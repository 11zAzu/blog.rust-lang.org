<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
    <generator uri="https://blog.rust-lang.org/inside-rust/" version="0.1.0">Inside Rust Blog</generator>
    <link href="https://blog.rust-lang.org/inside-rust/feed.xml" rel="self" type="application/atom+xml" />
    <link href="https://blog.rust-lang.org/inside-rust/" rel="alternate" type="text/html" />
    <id>https://blog.rust-lang.org/inside-rust/</id>
    <title>Inside Rust Blog</title>
    <subtitle>Want to follow along with Rust development? Curious how you might get involved? Take a look!</subtitle>
    <author>
        <name>Maintained by the Rust Teams.</name>
        <uri>https://github.com/rust-lang/blog.rust-lang.org/</uri>
    </author>
    <updated>2021-04-29T16:28:47+00:00</updated>

    
    <entry>
        <title>Rustup 1.24.0 release incident report for 2021-04-27</title>
        <link rel="alternate" href="https://blog.rust-lang.org/inside-rust/2021/04/28/rustup-1.24.0-incident-report.html" type="text/html" title="Rustup 1.24.0 release incident report for 2021-04-27" />
        <published>2021-04-28T00:00:00+00:00</published>
        <updated>2021-04-28T00:00:00+00:00</updated>
        <id>https://blog.rust-lang.org/inside-rust/2021/04/28/rustup-1.24.0-incident-report.html</id>
        <content type="html" xml:base="https://blog.rust-lang.org/inside-rust/2021/04/28/rustup-1.24.0-incident-report.html">&lt;p&gt;On 2021-04-27 at 15:09 UTC we released a new version of Rustup (1.24.0). At
15:23 UTC we received a report that we had introduced a regression in the part
of the code which is responsible for proxying the &lt;code&gt;rustfmt&lt;/code&gt; and &lt;code&gt;cargo-fmt&lt;/code&gt;
portions of Rust toolchains. At 15:27 UTC we had confirmed and identified the
cause of the problem, and while we worked on a fix, we reverted the released
Rustup to version 1.23.1 - an action completed by 15:56 UTC.&lt;/p&gt;
&lt;p&gt;This means that for approximately 47 minutes, CI jobs which used the code
formatting features of Rust toolchains may have had spurious failures, and users
who upgraded will have had to revert to 1.23.1. The revert process is designed
to be as easy as upgrading was, meaning that users should not have had lingering
issues.&lt;/p&gt;
&lt;h2&gt;&lt;a href&#x3D;&quot;#root-cause-of-the-issue&quot; aria-hidden&#x3D;&quot;true&quot; class&#x3D;&quot;anchor&quot; id&#x3D;&quot;root-cause-of-the-issue&quot;&gt;&lt;/a&gt;Root cause of the issue&lt;/h2&gt;
&lt;p&gt;In an effort to
&lt;a href&#x3D;&quot;https://github.com/rust-lang/rustup/issues/2286&quot;&gt;reduce confusion when downloaded copies of &lt;code&gt;rustup-init.exe&lt;/code&gt;are renamed&lt;/a&gt;
we merged a change which causes Rustup to report an error if an unknown name is
used when invoking the binary.&lt;/p&gt;
&lt;p&gt;Due to past complexities with &lt;code&gt;rustfmt&lt;/code&gt; and &lt;code&gt;cargo-fmt&lt;/code&gt; being binaries which
tended to be distributed by &lt;code&gt;cargo install&lt;/code&gt; rather than via
&lt;code&gt;rustup component add&lt;/code&gt; there is some intricate handling in Rustup&#x27;s proxy
management for those specific binaries. The fix for the above issue failed to
include these corner case proxies in the check it undertook to ensure the caller
hadn&#x27;t used an unexpected binary name.&lt;/p&gt;
&lt;p&gt;The 1.24.0 release had been staged at this point, however there was a problem
with the low-memory installation pathways which required a fix, and at the time
we incorrectly assessed that it was low-impact to rebase the release onto the
new master branch which had not only the fix for the low-memory installation
pathway but also the &amp;quot;refuse bad names&amp;quot; change for the above issue.&lt;/p&gt;
&lt;p&gt;Subsequent testing of the release focussed almost entirely on the installation
pathways, omitting to validate the proxy name verification code we had also
acquired into the release. As a result, this regression slipped in.&lt;/p&gt;
&lt;h2&gt;&lt;a href&#x3D;&quot;#resolution&quot; aria-hidden&#x3D;&quot;true&quot; class&#x3D;&quot;anchor&quot; id&#x3D;&quot;resolution&quot;&gt;&lt;/a&gt;Resolution&lt;/h2&gt;
&lt;p&gt;The author of the validation PR correctly identified it as the root-cause of
the regression, and the team discussed and decided that it was better to fix
the problem properly than to simply revert the change out of the release.&lt;/p&gt;
&lt;p&gt;The release team member who was helping with the release process began the
revert to Rustup 1.23.1 while the fixes were developed. In addition an issue
was filed around adding some tests around all the proxies (we currently test a
subset which we believed to be representative). We subsequently staged a
proposed 1.24.1 release to Rust&#x27;s development stage and we have issued a &lt;a href&#x3D;&quot;https://internals.rust-lang.org/t/seeking-beta-testers-for-rustup-1-24-1/14582&quot;&gt;call
for beta testers&lt;/a&gt; to confirm that we have not introduced any other
regressions.&lt;/p&gt;
&lt;h2&gt;&lt;a href&#x3D;&quot;#lessons-learned&quot; aria-hidden&#x3D;&quot;true&quot; class&#x3D;&quot;anchor&quot; id&#x3D;&quot;lessons-learned&quot;&gt;&lt;/a&gt;Lessons learned&lt;/h2&gt;
&lt;p&gt;The big lesson here is that while we&#x27;ve taken similar notes away from past
releases of Rustup and other tooling, we&#x27;ve not yet managed to set up a proper
beta-testing process for Rustup. As such we will be making changes to the
Rustup release process to codify testing phases with the wider community.&lt;/p&gt;
&lt;h2&gt;&lt;a href&#x3D;&quot;#long-term-changes-to-rustup-releases&quot; aria-hidden&#x3D;&quot;true&quot; class&#x3D;&quot;anchor&quot; id&#x3D;&quot;long-term-changes-to-rustup-releases&quot;&gt;&lt;/a&gt;Long term changes to Rustup releases&lt;/h2&gt;
&lt;p&gt;In order to try and reduce the chance of this happening again, the &lt;a href&#x3D;&quot;https://github.com/rust-lang/rustup/blob/master/CONTRIBUTING.md#making-a-release&quot;&gt;release
process&lt;/a&gt; will be updated to include a public beta-testing phase for any non-
purely-bugfix release and we intend to look into the possibility of a &amp;quot;nightly&amp;quot;
Rustup release for a &lt;em&gt;small&lt;/em&gt; subset of platforms.&lt;/p&gt;
&lt;p&gt;Finally we are hoping to work with the &lt;a href&#x3D;&quot;https://www.rust-lang.org/governance/teams/release&quot;&gt;release team&lt;/a&gt; to do what we can to
unify the Rustup release process with the well oiled Rust release process
though, due to the historical differences in how Rustup has been released, this
will likely be a long term effort.&lt;/p&gt;
&lt;h2&gt;&lt;a href&#x3D;&quot;#action-items&quot; aria-hidden&#x3D;&quot;true&quot; class&#x3D;&quot;anchor&quot; id&#x3D;&quot;action-items&quot;&gt;&lt;/a&gt;Action items&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://github.com/rust-lang/rustup/issues/2739&quot;&gt;#2739&lt;/a&gt;: Testing for proxying, including TOOLS and DUP_TOOLS&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://github.com/rust-lang/rustup/issues/2741&quot;&gt;#2741&lt;/a&gt;: Release process should include explicit beta test period&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;And as mentioned above, longer term we shall look to see what unification we can
do between releasing Rustup and how the Rust release train runs.&lt;/p&gt;
</content>

        <author>
            <name>Daniel Silverstone</name>
        </author>
    </entry>
    
    <entry>
        <title>Congrats to compiler team member Aaron Hill</title>
        <link rel="alternate" href="https://blog.rust-lang.org/inside-rust/2021/04/26/aaron-hill-compiler-team.html" type="text/html" title="Congrats to compiler team member Aaron Hill" />
        <published>2021-04-26T00:00:00+00:00</published>
        <updated>2021-04-26T00:00:00+00:00</updated>
        <id>https://blog.rust-lang.org/inside-rust/2021/04/26/aaron-hill-compiler-team.html</id>
        <content type="html" xml:base="https://blog.rust-lang.org/inside-rust/2021/04/26/aaron-hill-compiler-team.html">&lt;p&gt;I am pleased to announce that &lt;a href&#x3D;&quot;https://github.com/aaron1011&quot;&gt;Aaron Hill&lt;/a&gt; has been made a full member of the &lt;a href&#x3D;&quot;https://www.rust-lang.org/governance/teams/compiler&quot;&gt;compiler team&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Aaron Hill (&lt;a href&#x3D;&quot;https://github.com/aaron1011&quot;&gt;@Aaron1011&lt;/a&gt;) has been contributing to many different parts of the compiler since his start in 2017.
Recently, Aaron has been working on finding and fixing bugs and correctness issues in the incremental system, cleanups and improvements to macro expansion and hygiene, as well as miscellaneous bug fixes.
Beyond the compiler, Aaron has also implemented support for &lt;a href&#x3D;&quot;https://github.com/rust-lang/rust/pull/60026&quot;&gt;unwinding in Miri&lt;/a&gt;, &lt;a href&#x3D;&quot;https://github.com/rust-lang/rust/pull/47833&quot;&gt;generating documentation for auto-traits&lt;/a&gt;, and &lt;a href&#x3D;&quot;https://github.com/rust-lang/cargo/pull/8825&quot;&gt;future incompatibility reporting in Cargo&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Congratulations Aaron and thanks for all of your contributions to the project!&lt;/p&gt;
</content>

        <author>
            <name>Wesley Wiser</name>
        </author>
    </entry>
    
    <entry>
        <title>Jacob Hoffman-Andrews joins the Rustdoc team</title>
        <link rel="alternate" href="https://blog.rust-lang.org/inside-rust/2021/04/20/jsha-rustdoc-member.html" type="text/html" title="Jacob Hoffman-Andrews joins the Rustdoc team" />
        <published>2021-04-20T00:00:00+00:00</published>
        <updated>2021-04-20T00:00:00+00:00</updated>
        <id>https://blog.rust-lang.org/inside-rust/2021/04/20/jsha-rustdoc-member.html</id>
        <content type="html" xml:base="https://blog.rust-lang.org/inside-rust/2021/04/20/jsha-rustdoc-member.html">&lt;p&gt;Hello everyone, please welcome &lt;a href&#x3D;&quot;https://github.com/jsha&quot;&gt;Jacob Hoffman-Andrews&lt;/a&gt; to the rustdoc team!&lt;/p&gt;
&lt;p&gt;Jacob Hoffman-Andrews (&lt;a href&#x3D;&quot;https://github.com/jsha&quot;&gt;@jsha&lt;/a&gt;) has been contributing a lot on rustdoc front-end. Thanks to him, the pageload of the rustdoc pages is much faster. Here is a non-exhaustive list of the stuff he&#x27;s done recently:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The huge search index is now only loaded &lt;a href&#x3D;&quot;https://github.com/rust-lang/rust/pull/82310&quot;&gt;when needed&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;The pageload has &lt;a href&#x3D;&quot;https://github.com/rust-lang/rust/pull/82315&quot;&gt;has been optimized a bunch&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Rustdoc&#x27;s show/hide toggles &lt;a href&#x3D;&quot;https://github.com/rust-lang/rust/issues/83332&quot;&gt;are being converted to pure HTML&lt;/a&gt;, reducing complexity and improving pageload performance.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;And this is just an overview!&lt;/p&gt;
&lt;p&gt;We are really happy to have Jacob joining us, so thanks a lot for your work and congratulations!&lt;/p&gt;
</content>

        <author>
            <name>Guillaume Gomez</name>
        </author>
    </entry>
    
    <entry>
        <title>Lang team April update</title>
        <link rel="alternate" href="https://blog.rust-lang.org/inside-rust/2021/04/17/lang-team-apr-update.html" type="text/html" title="Lang team April update" />
        <published>2021-04-17T00:00:00+00:00</published>
        <updated>2021-04-17T00:00:00+00:00</updated>
        <id>https://blog.rust-lang.org/inside-rust/2021/04/17/lang-team-apr-update.html</id>
        <content type="html" xml:base="https://blog.rust-lang.org/inside-rust/2021/04/17/lang-team-apr-update.html">&lt;p&gt;This week the lang team held its April planning meeting (&lt;a href&#x3D;&quot;https://github.com/rust-lang/lang-team/blob/master/design-meeting-minutes/2021-04-14-Planning-Meeting.md&quot;&gt;minutes&lt;/a&gt;). We normally hold these meetings on the first Wednesday of every month, but this month we were delayed by one week due to scheduling conflicts.&lt;/p&gt;
&lt;p&gt;The planning meeting is used for:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Checking in on the status of our active projects&lt;/li&gt;
&lt;li&gt;Planning the design meetings for the remainder of the month&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;After each meeting, we post an update (like this one!) with notes and meeting announcements.&lt;/p&gt;
&lt;h2&gt;&lt;a href&#x3D;&quot;#update-from-active-projects&quot; aria-hidden&#x3D;&quot;true&quot; class&#x3D;&quot;anchor&quot; id&#x3D;&quot;update-from-active-projects&quot;&gt;&lt;/a&gt;Update from active projects&lt;/h2&gt;
&lt;p&gt;Did you know that you can see the lang team&#x27;s active projects on our &lt;a href&#x3D;&quot;https://github.com/rust-lang/lang-team/projects/2&quot;&gt;project board&lt;/a&gt;? We&#x27;re still experimenting and evolving the setup, but the goal is that it should give you a quick overview of what kinds of things the lang team is focused on, and what stage they are in their development.&lt;/p&gt;
&lt;p&gt;The minutes contain &lt;a href&#x3D;&quot;https://github.com/rust-lang/lang-team/blob/master/design-meeting-minutes/2021-04-14-Planning-Meeting.md#updates-from-active-groups-and-projects&quot;&gt;links the tracking issues for each project&lt;/a&gt; and those issues contain status reports. Here are some interesting updates:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://github.com/rust-lang/lang-team/issues/60#issuecomment-814509681&quot;&gt;never type update&lt;/a&gt;:
&lt;ul&gt;
&lt;li&gt;we have a general plan for hybrid fallback that we think will allow us to stabilize &lt;code&gt;!&lt;/code&gt; at long last without breaking existing crates&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://github.com/rust-lang/lang-team/issues/50#issuecomment-814526085&quot;&gt;improved closure capture (RFC 2229)&lt;/a&gt;:
&lt;ul&gt;
&lt;li&gt;implementation is working quite well and migration is nearly implemented also&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://github.com/rust-lang/lang-team/issues/19#issuecomment-814581675&quot;&gt;ffi-unwind&lt;/a&gt;:
&lt;ul&gt;
&lt;li&gt;C-unwind implementation has landed&lt;/li&gt;
&lt;li&gt;there is some ongoing work to fix some bugs in the initial implementation&lt;/li&gt;
&lt;li&gt;looking at potentially moving to considering setjmp/longjmp&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://github.com/rust-lang/rust/pull/83386#issuecomment-819719603&quot;&gt;nested pattern stabilization&lt;/a&gt; has almost completed&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href&#x3D;&quot;#upcoming-design-meetings&quot; aria-hidden&#x3D;&quot;true&quot; class&#x3D;&quot;anchor&quot; id&#x3D;&quot;upcoming-design-meetings&quot;&gt;&lt;/a&gt;Upcoming design meetings&lt;/h2&gt;
&lt;p&gt;We planned two design meetings for April. Our meetings are open for anyone to join and observe. They are also typically recorded and posted to YouTube. Ping nikomatsakis or joshtriplett for info about attending.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;April 21 -- proposed &amp;quot;wasm&amp;quot; ABI (&lt;a href&#x3D;&quot;https://github.com/rust-lang/lang-team/issues/90&quot;&gt;lang-team#90&lt;/a&gt;), featuring special guest Alex Crichton&lt;/li&gt;
&lt;li&gt;April 28 -- generators (&lt;a href&#x3D;&quot;https://github.com/rust-lang/lang-team/issues/92&quot;&gt;lang-team#92&lt;/a&gt;), featuring special guest Esteban Küber&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href&#x3D;&quot;#design-meeting-expectations&quot; aria-hidden&#x3D;&quot;true&quot; class&#x3D;&quot;anchor&quot; id&#x3D;&quot;design-meeting-expectations&quot;&gt;&lt;/a&gt;Design meeting expectations&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;The document for the meeting must be prepared by the triage meeting on Tuesday and posted to the tracking issue.
&lt;ul&gt;
&lt;li&gt;If it is not sent out by then, the meeting will be canceled. This gives folks 24 hour notice.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;There is no expectation that people will read the document before the meeting. The meeting will begin with a recap of the document.
&lt;ul&gt;
&lt;li&gt;However, there is no rule &lt;strong&gt;against&lt;/strong&gt; reading the document beforehand and providing feedback or advice on how to improve it.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
</content>

        <author>
            <name>Niko Matsakis</name>
        </author>
    </entry>
    
    <entry>
        <title>Rust Compiler April Steering Cycle</title>
        <link rel="alternate" href="https://blog.rust-lang.org/inside-rust/2021/04/15/compiler-team-april-steering-cycle.html" type="text/html" title="Rust Compiler April Steering Cycle" />
        <published>2021-04-15T00:00:00+00:00</published>
        <updated>2021-04-15T00:00:00+00:00</updated>
        <id>https://blog.rust-lang.org/inside-rust/2021/04/15/compiler-team-april-steering-cycle.html</id>
        <content type="html" xml:base="https://blog.rust-lang.org/inside-rust/2021/04/15/compiler-team-april-steering-cycle.html">&lt;p&gt;On &lt;a href&#x3D;&quot;https://zulip-archive.rust-lang.org/238009tcompilermeetings/96901planningmeeting20210409.html&quot;&gt;Friday, April 9th&lt;/a&gt;, the Rust Compiler team had a planning meeting for the April steering cycle.&lt;/p&gt;
&lt;p&gt;Every fourth Friday, the Rust compiler team decides how
it is going to use its scheduled steering and design meeting time over the next
three Fridays.&lt;/p&gt;
&lt;p&gt;On Friday, 23 April 2021, we will be having a meeting to discuss a
set of proposed &lt;a href&#x3D;&quot;https://github.com/rust-lang/compiler-team/issues/424&quot;&gt;guiding principles&lt;/a&gt; for compiler contributors.&lt;/p&gt;
&lt;p&gt;On Friday, 30 April 2021, we will be having a meeting to discuss the
process used for weekly compiler &lt;a href&#x3D;&quot;https://github.com/rust-lang/compiler-team/issues/400&quot;&gt;performance triage&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Both meetings will run from 2pm to 3pm GMT, and will take place on the
&lt;a href&#x3D;&quot;https://rust-lang.zulipchat.com/#narrow/stream/238009-t-compiler.2Fmeetings&quot;&gt;T-compiler/meetings zulip stream&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;(Also: we neglected to post an announcement at the outset of the March steering
cycle. In March we had two meetings: the first was a &lt;a href&#x3D;&quot;https://github.com/rust-lang/compiler-team/issues/412&quot;&gt;retrospective&lt;/a&gt; on the
memshrink development sprint that we had over the first week of March, and the
second was a meeting to &lt;a href&#x3D;&quot;https://github.com/rust-lang/compiler-team/issues/416&quot;&gt;discuss&lt;/a&gt; the static vs dynamic linking
defaults for our musl libc targets.)&lt;/p&gt;
</content>

        <author>
            <name>Felix Klock</name>
        </author>
    </entry>
    
    <entry>
        <title>Core Team updates</title>
        <link rel="alternate" href="https://blog.rust-lang.org/inside-rust/2021/04/03/core-team-updates.html" type="text/html" title="Core Team updates" />
        <published>2021-04-03T00:00:00+00:00</published>
        <updated>2021-04-03T00:00:00+00:00</updated>
        <id>https://blog.rust-lang.org/inside-rust/2021/04/03/core-team-updates.html</id>
        <content type="html" xml:base="https://blog.rust-lang.org/inside-rust/2021/04/03/core-team-updates.html">&lt;p&gt;Niko Matsakis is &lt;a href&#x3D;&quot;https://smallcultfollowing.com/babysteps/blog/2021/04/02/my-shiny-future/&quot;&gt;stepping back&lt;/a&gt; from the &lt;a href&#x3D;&quot;https://www.rust-lang.org/governance/teams/core&quot;&gt;Core Team&lt;/a&gt;,
focusing his energy on leading the &lt;a href&#x3D;&quot;https://www.rust-lang.org/governance/teams/lang&quot;&gt;Language Team&lt;/a&gt;. Amongst the many
things he has done for the Rust project over the years, Niko has been part of
the Core Team since the beginning, and had a key role in shaping Rust’s
governance. We’re all excited to see what his new focus is going to bring!&lt;/p&gt;
&lt;p&gt;Thanks Niko!&lt;/p&gt;
</content>

        <author>
            <name>Pietro Albini</name>
        </author>
    </entry>
    
    <entry>
        <title>1.51.0 pre-release testing</title>
        <link rel="alternate" href="https://blog.rust-lang.org/inside-rust/2021/03/23/1.51.0-prerelease.html" type="text/html" title="1.51.0 pre-release testing" />
        <published>2021-03-23T00:00:00+00:00</published>
        <updated>2021-03-23T00:00:00+00:00</updated>
        <id>https://blog.rust-lang.org/inside-rust/2021/03/23/1.51.0-prerelease.html</id>
        <content type="html" xml:base="https://blog.rust-lang.org/inside-rust/2021/03/23/1.51.0-prerelease.html">&lt;p&gt;The 1.51.0 pre-release is ready for testing. The release is scheduled for this
Thursday, March 25th. &lt;a href&#x3D;&quot;https://github.com/rust-lang/rust/blob/master/RELEASES.md#version-1510-2021-03-25&quot;&gt;Release notes can be found here.&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;You can try it out locally by running:&lt;/p&gt;
&lt;pre&gt;&lt;code class&#x3D;&quot;language-plain&quot;&gt;RUSTUP_DIST_SERVER&#x3D;https://dev-static.rust-lang.org rustup update stable
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The index is &lt;a href&#x3D;&quot;https://dev-static.rust-lang.org/dist/2021-03-23/index.html&quot;&gt;https://dev-static.rust-lang.org/dist/2021-03-23/index.html&lt;/a&gt;. You
can leave feedback on the &lt;a href&#x3D;&quot;https://internals.rust-lang.org/t/1-51-0-prerelease-testing&quot;&gt;internals thread&lt;/a&gt;.&lt;/p&gt;
</content>

        <author>
            <name>Mark Rousskov</name>
        </author>
    </entry>
    
    <entry>
        <title>Planning the Rust 2021 Edition</title>
        <link rel="alternate" href="https://blog.rust-lang.org/inside-rust/2021/03/04/planning-rust-2021.html" type="text/html" title="Planning the Rust 2021 Edition" />
        <published>2021-03-04T00:00:00+00:00</published>
        <updated>2021-03-04T00:00:00+00:00</updated>
        <id>https://blog.rust-lang.org/inside-rust/2021/03/04/planning-rust-2021.html</id>
        <content type="html" xml:base="https://blog.rust-lang.org/inside-rust/2021/03/04/planning-rust-2021.html">&lt;p&gt;The Rust 2021 Edition working group is happy to announce that the next edition of Rust, Rust 2021, is scheduled for release later this year. While the &lt;a href&#x3D;&quot;https://github.com/rust-lang/rfcs/pull/3085&quot;&gt;RFC&lt;/a&gt; formally introducing this edition is still open, we expect it to be merged soon. Planning and preparation have already begun, and we&#x27;re on schedule!&lt;/p&gt;
&lt;p&gt;If you&#x27;re curious what features Rust 2021 will introduce or what the timeline for getting the edition released on stable is, keep reading!&lt;/p&gt;
&lt;h2&gt;&lt;a href&#x3D;&quot;#whats-included-in-this-edition&quot; aria-hidden&#x3D;&quot;true&quot; class&#x3D;&quot;anchor&quot; id&#x3D;&quot;whats-included-in-this-edition&quot;&gt;&lt;/a&gt;What&#x27;s included in this edition?&lt;/h2&gt;
&lt;p&gt;The final list of features for inclusion in Rust 2021 is still being decided. Overall, we aim for Rust 2021 to be a much smaller release than Rust 2018. This is for several reasons:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;establishing a regular cadence for edition releases means we get many of the benefits of Rust&#x27;s &amp;quot;train&amp;quot; release model at the edition level.&lt;/li&gt;
&lt;li&gt;Rust 2018 worked directly against the Rust model of &amp;quot;low stress&amp;quot; releases.&lt;/li&gt;
&lt;li&gt;there&#x27;s simply fewer breaking changes needed to continue to evolve the language.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You can read more about the evolution of the concept of editions &lt;a href&#x3D;&quot;https://github.com/rust-lang/rfcs/pull/3085&quot;&gt;in the RFC&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Whether a feature will be included in Rust 2021 is a part of the RFC process, so the short list of possible features can and will change between now and the edition being released. That being said, here are some of the possible features that may be a part of the edition:&lt;/p&gt;
&lt;h3&gt;&lt;a href&#x3D;&quot;#prelude-changes&quot; aria-hidden&#x3D;&quot;true&quot; class&#x3D;&quot;anchor&quot; id&#x3D;&quot;prelude-changes&quot;&gt;&lt;/a&gt;Prelude changes&lt;/h3&gt;
&lt;p&gt;While types and free functions can be added to the prelude independent of edition boundaries, the same is not true for traits. Adding a trait to the prelude can cause compatibility issues because calls to methods named the same as methods of the newly in-scope traits can become ambiguous.&lt;/p&gt;
&lt;p&gt;Currently the following traits are being proposed for inclusion in the Rust 2021 edition:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;TryFrom&lt;/code&gt;/&lt;code&gt;TryInto&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;FromIterator&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The RFC for this change can be found &lt;a href&#x3D;&quot;https://github.com/rust-lang/rfcs/pull/3090&quot;&gt;here&lt;/a&gt;. Please note that the RFC is not yet merged, and the contents for a new prelude are still under active discussion.&lt;/p&gt;
&lt;h3&gt;&lt;a href&#x3D;&quot;#new-closure-capture-rules&quot; aria-hidden&#x3D;&quot;true&quot; class&#x3D;&quot;anchor&quot; id&#x3D;&quot;new-closure-capture-rules&quot;&gt;&lt;/a&gt;New closure capture rules&lt;/h3&gt;
&lt;p&gt;&lt;a href&#x3D;&quot;https://github.com/rust-lang/rfcs/pull/2229&quot;&gt;RFC 2229&lt;/a&gt; proposed that closures capture individual fields and not the whole struct when possible. This RFC has been accepted. In some circumstances this change would cause destructors to run at different times than they currently do, so the change must be tied to an edition. Migration lints will be provided to avoid changing the semantics of existing code.&lt;/p&gt;
&lt;h3&gt;&lt;a href&#x3D;&quot;#new-default-feature-resolver-in-cargo&quot; aria-hidden&#x3D;&quot;true&quot; class&#x3D;&quot;anchor&quot; id&#x3D;&quot;new-default-feature-resolver-in-cargo&quot;&gt;&lt;/a&gt;New default feature resolver in Cargo&lt;/h3&gt;
&lt;p&gt;In Rust 1.51, Cargo will stabilize a new &lt;a href&#x3D;&quot;https://github.com/rust-lang/cargo/issues/8088&quot;&gt;feature resolver&lt;/a&gt; which allows a crate&#x27;s dependencies to use different features in different contexts. For example, a &lt;code&gt;#[no_std]&lt;/code&gt; crate might want to use a particular dependency both as a build dependency (with &lt;code&gt;std&lt;/code&gt; enabled) and as a regular dependency (with &lt;code&gt;std&lt;/code&gt; disabled). Currently, this leads to &lt;code&gt;std&lt;/code&gt; being enabled in both cases since features belong to a global namespace.&lt;/p&gt;
&lt;p&gt;In Rust 2021 this new resolver will become the default, but older editions can still use the new resolver by opting into it.&lt;/p&gt;
&lt;h3&gt;&lt;a href&#x3D;&quot;#other&quot; aria-hidden&#x3D;&quot;true&quot; class&#x3D;&quot;anchor&quot; id&#x3D;&quot;other&quot;&gt;&lt;/a&gt;Other&lt;/h3&gt;
&lt;p&gt;Other proposed changes include &lt;a href&#x3D;&quot;https://github.com/rust-lang/rust/issues/80162&quot;&gt;unifying how &lt;code&gt;panic&lt;/code&gt; in &lt;code&gt;std&lt;/code&gt; and &lt;code&gt;core&lt;/code&gt; work&lt;/a&gt; and upgrading several lints from &lt;a href&#x3D;&quot;https://github.com/rust-lang/rust/issues/80165&quot;&gt;warnings to errors&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;You can find a full list of features that are under consideration &lt;a href&#x3D;&quot;https://docs.google.com/spreadsheets/d/1chZ2SL9T444nvU9al1kQ7TJMwC3IVQQV2xIv1HWGQ_k/edit?usp&#x3D;sharing&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;If you&#x27;re aware of a feature that has already been under discussion for inclusion in the next edition of Rust but is not listed here, &lt;a href&#x3D;&quot;https://rust-lang.zulipchat.com/#narrow/stream/268952-edition-2021&quot;&gt;please let us know&lt;/a&gt;. While we are excited to hear additional features that have not yet been discussed for inclusion in a Rust edition, we are unlikely to have the bandwidth to discuss such features until after the Rust 2021 edition is ready for release.&lt;/p&gt;
&lt;h2&gt;&lt;a href&#x3D;&quot;#rough-timeline&quot; aria-hidden&#x3D;&quot;true&quot; class&#x3D;&quot;anchor&quot; id&#x3D;&quot;rough-timeline&quot;&gt;&lt;/a&gt;Rough timeline&lt;/h2&gt;
&lt;p&gt;So how do we plan on shipping the new edition? Here&#x27;s a timeline of milestones we&#x27;re aiming for:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;01 April: All relevant RFCs either merged or in a good state (i.e., all major decisions reached and merging will happen in the following weeks).&lt;/li&gt;
&lt;li&gt;01 May: All features for inclusion in Rust 2021 are on nightly under feature flags.&lt;/li&gt;
&lt;li&gt;01 June: All lints are implemented on nightly.&lt;/li&gt;
&lt;li&gt;01 September: The edition is stabilized on nightly.&lt;/li&gt;
&lt;li&gt;21 October: The edition hits stable.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;As we approach these deadlines, we&#x27;ll be narrowing down the list of proposed changes to those items that have made active progress.&lt;/p&gt;
&lt;h2&gt;&lt;a href&#x3D;&quot;#call-for-participation&quot; aria-hidden&#x3D;&quot;true&quot; class&#x3D;&quot;anchor&quot; id&#x3D;&quot;call-for-participation&quot;&gt;&lt;/a&gt;Call for participation&lt;/h2&gt;
&lt;p&gt;If you&#x27;re interested in helping with the 2021 edition release, please &lt;a href&#x3D;&quot;https://rust-lang.zulipchat.com/#narrow/stream/268952-edition-2021&quot;&gt;get in touch&lt;/a&gt;. Besides feature work and edition management planning, there will be plenty of work to do. Some of the additional work items that will need to happen for the edition release include:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;rustfix&lt;/code&gt; migrations for all relevant features&lt;/li&gt;
&lt;li&gt;testing all features and their migration paths&lt;/li&gt;
&lt;li&gt;blog posts and other marketing material&lt;/li&gt;
&lt;/ul&gt;
</content>

        <author>
            <name>Ryan Levick</name>
        </author>
    </entry>
    
    <entry>
        <title>Lang team March update</title>
        <link rel="alternate" href="https://blog.rust-lang.org/inside-rust/2021/03/03/lang-team-mar-update.html" type="text/html" title="Lang team March update" />
        <published>2021-03-03T00:00:00+00:00</published>
        <updated>2021-03-03T00:00:00+00:00</updated>
        <id>https://blog.rust-lang.org/inside-rust/2021/03/03/lang-team-mar-update.html</id>
        <content type="html" xml:base="https://blog.rust-lang.org/inside-rust/2021/03/03/lang-team-mar-update.html">&lt;p&gt;Today the lang team held its March planning meeting (&lt;a href&#x3D;&quot;https://github.com/rust-lang/lang-team/blob/master/design-meeting-minutes/2021-03-03-Planning-Meeting.md&quot;&gt;minutes&lt;/a&gt;). We hold these meetings on the first Wednesday of every month.&lt;/p&gt;
&lt;p&gt;The planning meeting is used for:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Checking in on the status of our active projects&lt;/li&gt;
&lt;li&gt;Planning the design meetings for the remainder of the month&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;After each meeting, we post an update (like this one!) with notes and meeting announcements.&lt;/p&gt;
&lt;h2&gt;&lt;a href&#x3D;&quot;#update-from-active-projects&quot; aria-hidden&#x3D;&quot;true&quot; class&#x3D;&quot;anchor&quot; id&#x3D;&quot;update-from-active-projects&quot;&gt;&lt;/a&gt;Update from active projects&lt;/h2&gt;
&lt;p&gt;Did you know that you can see the lang team&#x27;s active projects on our &lt;a href&#x3D;&quot;https://github.com/rust-lang/lang-team/projects/2&quot;&gt;project board&lt;/a&gt;? We&#x27;re still experimenting and evolving the setup, but the goal is that it should give you a quick overview of what kinds of things the lang team is focused on, and what stage they are in their development. Our minutes contain a &lt;a href&#x3D;&quot;https://github.com/rust-lang/lang-team/blob/master/design-meeting-minutes/2021-02-03-Planning-Meeting.md#project-updates-and-discussion&quot;&gt;writeup for each active project&lt;/a&gt;, but let me call out a few highlights here:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;type ascription expressions:
&lt;ul&gt;
&lt;li&gt;we&#x27;ve recently made progress on type ascriptions and are likely to overcome the last issue blocking stabilization&lt;/li&gt;
&lt;li&gt;we would like to post a revised RFC&lt;/li&gt;
&lt;li&gt;there is some debate about the &lt;code&gt;x: T&lt;/code&gt; syntax that was previously proposed, and some desire to find an alternative (but also plenty of folks who liked it)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;never type:
&lt;ul&gt;
&lt;li&gt;current status is still &lt;a href&#x3D;&quot;https://github.com/rust-lang/rust/pull/79366&quot;&gt;#79366&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;simulacrum is going to recap the scenario for next triage meeting&lt;/li&gt;
&lt;li&gt;we are considering whether it makes sense to leverage 2021 Edition in any way&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;const generics:
&lt;ul&gt;
&lt;li&gt;min const generics will be stable in 1.51&lt;/li&gt;
&lt;li&gt;we are looking at various small extensions&lt;/li&gt;
&lt;li&gt;there is now a weekly meeting to look into improvements&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;declarative macro repitition counts:
&lt;ul&gt;
&lt;li&gt;there is an &lt;a href&#x3D;&quot;https://github.com/rust-lang/rfcs/pull/3086&quot;&gt;open RFC&lt;/a&gt; with proposed FCP&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;instruction set attribute:
&lt;ul&gt;
&lt;li&gt;exploration continues, the interaction of instruction set attribute with inline is not great, but it&#x27;s not clear how to improve&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;revised try trait:
&lt;ul&gt;
&lt;li&gt;generally positive vibes about the &lt;a href&#x3D;&quot;https://github.com/rust-lang/rfcs/pull/3058/&quot;&gt;RFC 3058&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;one question is whether to consider leveraging edition to tweak the desugaring and bypass some of the &amp;quot;accidental stabilization&amp;quot;
&lt;ul&gt;
&lt;li&gt;currently evaluating how many projects rely on this behavior; most of them don&#x27;t want to&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;ffi-unwind:
&lt;ul&gt;
&lt;li&gt;C-unwind implementation has almost landed&lt;/li&gt;
&lt;li&gt;exploring impact of longjmp on optimization&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href&#x3D;&quot;#upcoming-design-meetings&quot; aria-hidden&#x3D;&quot;true&quot; class&#x3D;&quot;anchor&quot; id&#x3D;&quot;upcoming-design-meetings&quot;&gt;&lt;/a&gt;Upcoming design meetings&lt;/h2&gt;
&lt;p&gt;We planned three design meetings for March. Our meetings are open for anyone to join and observe. They are also typically recorded and posted to YouTube. Ping nikomatsakis or joshtriplett for info about attending.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;March 10 -- no meeting, pnkfelix is absent&lt;/li&gt;
&lt;li&gt;March 17 -- RFC backlog bonanza recap (&lt;a href&#x3D;&quot;https://github.com/rust-lang/lang-team/issues/84&quot;&gt;lang-team#84&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;March 24 -- lang team reorg: shepherds 4.0, triage update (&lt;a href&#x3D;&quot;https://github.com/rust-lang/lang-team/issues/85&quot;&gt;lang-team#85&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;March 24 -- How to dismantle an &lt;code&gt;&amp;amp;Atomic&lt;/code&gt; bomb (&lt;a href&#x3D;&quot;https://github.com/rust-lang/lang-team/issues/82&quot;&gt;lang-team#82&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href&#x3D;&quot;#design-meeting-expectations&quot; aria-hidden&#x3D;&quot;true&quot; class&#x3D;&quot;anchor&quot; id&#x3D;&quot;design-meeting-expectations&quot;&gt;&lt;/a&gt;Design meeting expectations&lt;/h2&gt;
&lt;p&gt;We also settled some our expectations around preparation for design meetings:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The document for the meeting must be prepared by the triage meeting on Tuesday.
&lt;ul&gt;
&lt;li&gt;If it is not sent out by then, the meeting will be canceled. This gives folks 24 hour notice.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;There is no expectation that people will read the document before the meeting. The meeting will begin with a recap of the document.
&lt;ul&gt;
&lt;li&gt;However, there is no rule &lt;strong&gt;against&lt;/strong&gt; reading the document beforehand and provided feedback or advice on how to improve it.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
</content>

        <author>
            <name>Niko Matsakis</name>
        </author>
    </entry>
    
    <entry>
        <title>March Sprint for rustc: Shrink Memory Usage</title>
        <link rel="alternate" href="https://blog.rust-lang.org/inside-rust/2021/02/15/shrinkmem-rustc-sprint.html" type="text/html" title="March Sprint for rustc: Shrink Memory Usage" />
        <published>2021-02-15T00:00:00+00:00</published>
        <updated>2021-02-15T00:00:00+00:00</updated>
        <id>https://blog.rust-lang.org/inside-rust/2021/02/15/shrinkmem-rustc-sprint.html</id>
        <content type="html" xml:base="https://blog.rust-lang.org/inside-rust/2021/02/15/shrinkmem-rustc-sprint.html">&lt;p&gt;I am very excited about the compiler team&#x27;s upcoming sprint, and
I want to share that excitement with all of you.&lt;/p&gt;
&lt;p&gt;The Rust Compiler Team decided over a series of recent meetings
(&lt;a href&#x3D;&quot;https://zulip-archive.rust-lang.org/238009tcompilermeetings/99285steeringmeeting20201204PerformanceGoalsfor2020.html&quot;&gt;4 dec 2020&lt;/a&gt;, &lt;a href&#x3D;&quot;https://zulip-archive.rust-lang.org/238009tcompilermeetings/79391planningmeeting20210115.html&quot;&gt;15 jan 2021&lt;/a&gt;,
&lt;a href&#x3D;&quot;https://zulip-archive.rust-lang.org/238009tcompilermeetings/95022steeringmeeting20210129.html&quot;&gt;29 jan 2021&lt;/a&gt;) that our focus for 2021 will be improving the compiler&#x27;s
performance from the perspective of the new contributor experience bootstrapping
the compiler and developing code for the compiler.&lt;/p&gt;
&lt;p&gt;The team&#x27;s first sprint for 2021 will be during the first week of March, and its
focus will be on reducing the memory footprint of the compiler during bootstrap.&lt;/p&gt;
&lt;p&gt;During our most recent planning meeting (&lt;a href&#x3D;&quot;https://zulip-archive.rust-lang.org/238009tcompilermeetings/44925planningmeeting20210212.html&quot;&gt;12 feb 2021&lt;/a&gt;),
there were no new significant steering meeting proposals, so we decided to
do some extra sprint planning during that time. We established:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;we should settle on a common set of tools for measuring memory usage,&lt;/li&gt;
&lt;li&gt;we need some centralized documentation for how to best use those tools to measure rustc&#x27;s memory usage, and&lt;/li&gt;
&lt;li&gt;we need concrete proposals for tasks that will drive activity during the sprint; we started up
the &lt;a href&#x3D;&quot;https://rust-lang.zulipchat.com/#narrow/stream/276895-t-compiler.2Fshrinkmem-sprint&quot;&gt;shrinkmem-sprint zulip&lt;/a&gt; (&lt;a href&#x3D;&quot;https://zulip-archive.rust-lang.org/276895tcompilershrinkmemsprint/index.html&quot;&gt;public archive&lt;/a&gt;) to host conversations related to that.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Given the more narrow focus of this sprint, the Rust Compiler Team is interested
in input from people with strong experience using Valgrind DHAT or Windows
Performance Analyzer (or other tools) to help with identifying opportunities to
reduce memory usage. If this sounds like you please drop by the
&lt;a href&#x3D;&quot;https://rust-lang.zulipchat.com/#narrow/stream/276895-t-compiler.2Fshrinkmem-sprint&quot;&gt;shrinkmem-sprint zulip&lt;/a&gt; and say hello!&lt;/p&gt;
</content>

        <author>
            <name>Felix Klock</name>
        </author>
    </entry>
    
</feed>

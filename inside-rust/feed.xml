<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
    <generator uri="https://blog.rust-lang.org/inside-rust/" version="0.1.0">Inside Rust Blog</generator>
    <link href="https://blog.rust-lang.org/inside-rust/feed.xml" rel="self" type="application/atom+xml" />
    <link href="https://blog.rust-lang.org/inside-rust/" rel="alternate" type="text/html" />
    <id>https://blog.rust-lang.org/inside-rust/</id>
    <title>Inside Rust Blog</title>
    <subtitle>Want to follow along with Rust development? Curious how you might get involved? Take a look!</subtitle>
    <author>
        <name>Maintained by the Rust Teams.</name>
        <uri>https://github.com/rust-lang/blog.rust-lang.org/</uri>
    </author>
    <updated>2022-04-19T19:14:57+00:00</updated>

    
    <entry>
        <title>Imposter Syndrome</title>
        <link rel="alternate" href="https://blog.rust-lang.org/inside-rust/2022/04/19/imposter-syndrome.html" type="text/html" title="Imposter Syndrome" />
        <published>2022-04-19T00:00:00+00:00</published>
        <updated>2022-04-19T00:00:00+00:00</updated>
        <id>https://blog.rust-lang.org/inside-rust/2022/04/19/imposter-syndrome.html</id>
        <content type="html" xml:base="https://blog.rust-lang.org/inside-rust/2022/04/19/imposter-syndrome.html">&lt;p&gt;&lt;em&gt;Preface: This is in response to some feedback the project directors received
from the Rust Foundation staff. Some of the contributors they&#x27;d talked to said
they didn&#x27;t feel justified in applying for Foundation grants even though they&#x27;d
love the opportunity, because they don&#x27;t feel qualified or deserving of them
compared to the other amazing contributors they look up to within the Rust
project. This was a little bit heart breaking to me, because I know exactly
what that feeling is like&lt;sup class&#x3D;&quot;footnote-ref&quot;&gt;&lt;a href&#x3D;&quot;#fn1&quot; id&#x3D;&quot;fnref1&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;, and I also know just how wrong they are.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Imposter syndrome is an insidious problem within software communities. Many of
us, especially members of marginalized communities, struggle to shake the
feeling that we aren&#x27;t as qualified as our peers. This makes us feel
unqualified and undeserving compared to those around us. It can make us
hesitate to join communities in the first place and, for those already
involved, it can create a sense of impending doom where you constantly feel
like you&#x27;re going to get found out and expelled from the community. Overall
it&#x27;s just not great for mental health, 0/10, would not recommend.&lt;/p&gt;
&lt;p&gt;The thing is though, imposter syndrome is a logical fallacy&lt;sup class&#x3D;&quot;footnote-ref&quot;&gt;&lt;a href&#x3D;&quot;#fn2&quot; id&#x3D;&quot;fnref2&quot;&gt;2&lt;/a&gt;&lt;/sup&gt;. Imposter
syndrome occurs when we discount what we know and inflate what we think other
people know, and this effect is often then reinforced by systemic bias for
those of us who don&#x27;t get the assumption of competence.&lt;/p&gt;
&lt;p&gt;&lt;img src&#x3D;&quot;/images/2022-04-19-imposter-syndrome/imposter_syndrome.jpg&quot; alt&#x3D;&quot;picture of imposter syndrome, left side shows a large circle saying &amp;quot;What I think others know&amp;quot; and a small circle inside of it saying &amp;quot;What I know&amp;quot;, right side shows the same small circle saying &amp;quot;What I know&amp;quot; surrounded by many other equally sized small circles labeled &amp;quot;What others know&amp;quot;&quot; /&gt;&lt;/p&gt;
&lt;p&gt;In reality, we&#x27;re all specialists within the Rust project. We all have areas
where we have deep expertise and other large areas where we only have the
vaguest idea of how things work. &lt;a href&#x3D;&quot;https://github.com/nikomatsakis&quot;&gt;Niko&lt;/a&gt;, one
of the lang team co-leads, former compiler team lead and core team alumni,
still comes to me to ask questions about error handling. I frequently need to
tell my fellow contributors that I have no idea what the acronyms they&#x27;re using
mean&lt;sup class&#x3D;&quot;footnote-ref&quot;&gt;&lt;a href&#x3D;&quot;#fn3&quot; id&#x3D;&quot;fnref3&quot;&gt;3&lt;/a&gt;&lt;/sup&gt;. But this doesn&#x27;t mean we don&#x27;t deserve our positions within the
project. We don&#x27;t expect every contributor to know everything, to be perfect, or
to make no mistakes. The only thing we expect from our contributors is the
ability to collaborate effectively with others and a willingness to learn and
grow over time.&lt;/p&gt;
&lt;p&gt;The thing that makes the Rust project as good as it is isn&#x27;t a couple of
prolific contributors lifting mountains by themselves, it&#x27;s everyone working
together that brought us to where we are today. We all make mistakes. The
project has layer&lt;sup class&#x3D;&quot;footnote-ref&quot;&gt;&lt;a href&#x3D;&quot;#fn4&quot; id&#x3D;&quot;fnref4&quot;&gt;4&lt;/a&gt;&lt;/sup&gt; after layer&lt;sup class&#x3D;&quot;footnote-ref&quot;&gt;&lt;a href&#x3D;&quot;#fn5&quot; id&#x3D;&quot;fnref5&quot;&gt;5&lt;/a&gt;&lt;/sup&gt; of safeguards to make sure we have a
chance to catch and fix them before they affect our users. These incidents are
unavoidable, expected, and honestly fine! This is the most fundamental
philosophy of both the Rust language and the Rust project: we don&#x27;t think it&#x27;s
sufficient to build robust systems by only including people who don&#x27;t make
mistakes; we think it&#x27;s better to provide tooling and process to catch and
prevent mistakes. It isn&#x27;t an accident that our motto is &amp;quot;A language empowering
everyone to build reliable and efficient software.&amp;quot; We want people to feel
empowered to make changes they&#x27;re not 100% confident in, to make mistakes, to
learn, and to grow within the Rust project. This is how all of us got to where
we are today!&lt;/p&gt;
&lt;p&gt;So, if you look up to people within the Rust project, if the work we do here
interests you, if you have always wanted to contribute, and &lt;em&gt;especially&lt;/em&gt; if you
already have contributed, I want you to know that you&#x27;re one of the people we
want to apply for &lt;a href&#x3D;&quot;https://foundation.rust-lang.org/grants/&quot;&gt;Rust Foundation grants and
fellowships&lt;/a&gt;. You&#x27;re one of the
people we want to eventually see join teams. If you&#x27;re already on a team, I
want you to know that you&#x27;re there for a good reason, and we value your
judgement. You&#x27;re not an imposter, and I want you to know that I really look
forward to seeing you around the project.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;em&gt;To help reinforce and normalize this, I&#x27;ve gathered a list of times when
current or past project members have struggled with imposter syndrome, have
made mistakes, have had to ask &amp;quot;basic&amp;quot; questions, and similar experiences that
will hopefully help set more reasonable expectations for new and old
contributors across the project.&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://github.com/yaahc/&quot;&gt;Jane Lusby&lt;/a&gt;: &amp;quot;I frequently struggle with imposter
syndrome and feeling like I don&#x27;t get as much done as my peers. When I do all
of my work based off of notifications I completely lose track of what I&#x27;ve
done and end up starving the tasks I wanted to work on. I&#x27;m learning to set
reasonable expectations for myself, getting better at managing distractions,
and being intentional about when I respond to github/zulip notifications
which helps me with keeping track of what I&#x27;ve done and making steady
progress on my priorities.&amp;quot;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://github.com/joshtriplett/&quot;&gt;Josh Triplett&lt;/a&gt;: &amp;quot;I didn&#x27;t fully understand
&lt;code&gt;Pin&lt;/code&gt; until I read fasterthanlime&#x27;s &lt;a href&#x3D;&quot;https://fasterthanli.me/articles/pin-and-suffering&quot;&gt;&amp;quot;Pin and
suffering&amp;quot;&lt;/a&gt; blog post and
I gave a talk in 2016 where my &lt;a href&#x3D;&quot;https://www.youtube.com/watch?v&#x3D;U8Gl3RTXf88#t&#x3D;24m40s&quot;&gt;most important
point&lt;/a&gt; was that people
erroneously believe that you have to be an expert to write an RFC or change
Rust, but that I wasn&#x27;t, and you don&#x27;t need to be one either.&amp;quot;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://github.com/ralfjung&quot;&gt;Ralf Jung&lt;/a&gt;: &amp;quot;I am still surprised anyone is
taking Miri and Stacked Borrows seriously.&amp;quot;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://github.com/angelonfira/&quot;&gt;Forest Anderson&lt;/a&gt;: &amp;quot;As someone who just
learned last week what &lt;code&gt;dyn&lt;/code&gt; does, it still amazes me that I have something to
give as a team lead. I was immersed in Rust communities by writing weekly
blogs about Veloren (I took this on because I didn&#x27;t know enough to contribute
code), which lead to helping with the Rust Gamedev newsletter, which led me to
helping to run the Cross Team Collaboration Fun Times meetup!&amp;quot;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://github.com/pnkfelix&quot;&gt;Felix S Klock II&lt;/a&gt;: &amp;quot;Back in 2015, while I was
presenting a tutorial on Rust, and explaining &lt;code&gt;&amp;amp;T&lt;/code&gt;, I had someone from the
audience, a Rust expert, say &amp;quot;ah ah ah! but what about interior mutability&amp;quot;;
and in my mind I thought &amp;quot;... oh no; what is that?&amp;quot;, followed by &amp;quot;... what am
I doing, I&#x27;m not qualified to be up here...&amp;quot;. All of us &amp;quot;imposters&amp;quot; must
strive to prevent such moments from becoming barriers to our own
participation. I&#x27;ve learned a lot about Rust (and group dynamics, and
organizational behavior) since then, but I&#x27;m still learning every day;
re-learning, in some cases.&amp;quot;&lt;/li&gt;
&lt;/ul&gt;
&lt;section class&#x3D;&quot;footnotes&quot;&gt;
&lt;ol&gt;
&lt;li id&#x3D;&quot;fn1&quot;&gt;
&lt;p&gt;Quote from &lt;a href&#x3D;&quot;https://yaah.dev/getting-involved&quot;&gt;https://yaah.dev/getting-involved&lt;/a&gt;: &amp;quot;What happened at the
Google meetup you ask? Manish, our wonderful meetup organizer, walked up to
me, unprompted, and asked “Hey, you’re Jane right?”. I was shocked, how the
heck did Manish know who I was? It didn’t feel as though I’d done anything
worthy of notice, and yet here he was asking for me by name.&amp;quot; &lt;a href&#x3D;&quot;#fnref1&quot; class&#x3D;&quot;footnote-backref&quot;&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id&#x3D;&quot;fn2&quot;&gt;
&lt;p&gt;&lt;a href&#x3D;&quot;https://twitter.com/ithinkwellHugh/status/1175900121097220096&quot;&gt;https://twitter.com/ithinkwellHugh/status/1175900121097220096&lt;/a&gt; &lt;a href&#x3D;&quot;#fnref2&quot; class&#x3D;&quot;footnote-backref&quot;&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id&#x3D;&quot;fn3&quot;&gt;
&lt;p&gt;&lt;a href&#x3D;&quot;https://github.com/rust-lang/project-error-handling/issues/34#issuecomment-1092269566&quot;&gt;https://github.com/rust-lang/project-error-handling/issues/34#issuecomment-1092269566&lt;/a&gt; &lt;a href&#x3D;&quot;#fnref3&quot; class&#x3D;&quot;footnote-backref&quot;&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id&#x3D;&quot;fn4&quot;&gt;
&lt;p&gt;Any irreversible changes such as stabilizations require almost everyone
on the relevant team to approve the change and zero people on the team to
raise concerns. &lt;a href&#x3D;&quot;#fnref4&quot; class&#x3D;&quot;footnote-backref&quot;&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id&#x3D;&quot;fn5&quot;&gt;
&lt;p&gt;We double check all changes with
&lt;a href&#x3D;&quot;https://github.com/rust-lang/crater&quot;&gt;crater&lt;/a&gt; before they ever land on stable
and are careful to &lt;a href&#x3D;&quot;https://github.com/rust-lang/rust/issues/88967&quot;&gt;quickly&lt;/a&gt;
&lt;a href&#x3D;&quot;https://github.com/rust-lang/rust/issues/90904&quot;&gt;revert&lt;/a&gt;
&lt;a href&#x3D;&quot;https://github.com/rust-lang/rust/issues/82913&quot;&gt;changes&lt;/a&gt; that cause problems
on crater or nightly. &lt;a href&#x3D;&quot;#fnref5&quot; class&#x3D;&quot;footnote-backref&quot;&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</content>

        <author>
            <name>Jane Lusby, Project Director of Collaboration</name>
        </author>
    </entry>
    
    <entry>
        <title>Please welcome Thom and Chris to Library Contributors</title>
        <link rel="alternate" href="https://blog.rust-lang.org/inside-rust/2022/04/18/libs-contributors.html" type="text/html" title="Please welcome Thom and Chris to Library Contributors" />
        <published>2022-04-18T00:00:00+00:00</published>
        <updated>2022-04-18T00:00:00+00:00</updated>
        <id>https://blog.rust-lang.org/inside-rust/2022/04/18/libs-contributors.html</id>
        <content type="html" xml:base="https://blog.rust-lang.org/inside-rust/2022/04/18/libs-contributors.html">&lt;p&gt;Please welcome Thom Chiovoloni and Chris Denton to the
&lt;a href&#x3D;&quot;https://www.rust-lang.org/governance/teams/library#libs-contributors&quot;&gt;Library Contributors&lt;/a&gt; group!&lt;/p&gt;
&lt;p&gt;&lt;a href&#x3D;&quot;https://github.com/thomcc&quot;&gt;Thom&lt;/a&gt; has been working on various improvements to the implementation
of the standard library, such as &lt;a href&#x3D;&quot;https://github.com/rust-lang/rust/pull/87869&quot;&gt;optimizing &lt;code&gt;io::Error&lt;/code&gt;&lt;/a&gt;,
&lt;a href&#x3D;&quot;https://github.com/rust-lang/rust/pull/90414&quot;&gt;optimizing &lt;code&gt;Chars::count&lt;/code&gt;&lt;/a&gt;, and has been helping out
with reviewing various implementation changes.&lt;/p&gt;
&lt;p&gt;&lt;a href&#x3D;&quot;https://github.com/ChrisDenton/&quot;&gt;Chris&lt;/a&gt; has been focusing on the Windows specific parts of the standard library.
Chris implemented the Windows part of the patch for &lt;a href&#x3D;&quot;https://blog.rust-lang.org/2022/01/20/cve-2022-21658.html&quot;&gt;CVE-2022-21658&lt;/a&gt;,
and has done &lt;a href&#x3D;&quot;https://github.com/rust-lang/rust/pulls?q&#x3D;is%3Apr+author%3Achrisdenton+is%3Aclosed&quot;&gt;a ton of work&lt;/a&gt;
to improve the Windows side of &lt;code&gt;std::fs&lt;/code&gt;, &lt;code&gt;std::path&lt;/code&gt;, &lt;code&gt;std::process&lt;/code&gt; and other modules.&lt;/p&gt;
&lt;p&gt;Congratulations Thom and Chris, and thanks for everything you do!&lt;/p&gt;
</content>

        <author>
            <name>Mara Bos</name>
        </author>
    </entry>
    
    <entry>
        <title>Rust Compiler April 2022 Steering Cycle</title>
        <link rel="alternate" href="https://blog.rust-lang.org/inside-rust/2022/04/15/apr-steering-cycle.html" type="text/html" title="Rust Compiler April 2022 Steering Cycle" />
        <published>2022-04-15T00:00:00+00:00</published>
        <updated>2022-04-15T00:00:00+00:00</updated>
        <id>https://blog.rust-lang.org/inside-rust/2022/04/15/apr-steering-cycle.html</id>
        <content type="html" xml:base="https://blog.rust-lang.org/inside-rust/2022/04/15/apr-steering-cycle.html">&lt;p&gt;On &lt;a href&#x3D;&quot;https://zulip-archive.rust-lang.org/stream/238009-t-compiler/meetings/topic/.5Bplanning.20meeting.5D.202022-04-08.html&quot;&gt;Friday, April 8th&lt;/a&gt;, the Rust Compiler team had a planning meeting for the April 2022 steering cycle.&lt;/p&gt;
&lt;p&gt;Every fourth Friday, the Rust compiler team decides how
it is going to use its scheduled steering and design meeting time over the next
three Fridays.&lt;/p&gt;
&lt;p&gt;I want to apologize for how late I am posting this message: Our planning meeting
was a week ago, and my intent each cycle is to put up this post that day, so
that everyone, not just the compiler team members, has a chance participate in
the meetings. But, since this is going out a week late, it means one of the
meetings already happened (today).&lt;/p&gt;
&lt;p&gt;On Friday, 15 April, we discussed &lt;a href&#x3D;&quot;https://github.com/rust-lang/compiler-team/issues/507&quot;&gt;salsa 2.0&#x27;s entity design&lt;/a&gt;. &lt;a href&#x3D;&quot;https://github.com/salsa-rs/salsa&quot;&gt;Salsa&lt;/a&gt;
is a generic framework for on-demand incrementalized computation, which has many
ties to &lt;code&gt;rustc&lt;/code&gt;&#x27;s query system. Niko Matsakis authored the document that drove
the meeting&#x27;s discussion. The discussion was on &lt;a href&#x3D;&quot;https://rust-lang.zulipchat.com/#narrow/stream/238009-t-compiler.2Fmeetings/topic/.5Bsteering.20meeting.5D.202022-04-15.20compiler-team.23507/near/279082491&quot;&gt;zulip&lt;/a&gt;, and
should eventually be available on Rust&#x27;s public zulip archive.&lt;/p&gt;
&lt;p&gt;On Friday, 22 April, we will be having a meeting to discuss compiler team
&lt;a href&#x3D;&quot;https://github.com/rust-lang/compiler-team/issues/506&quot;&gt;leadership and succession planning&lt;/a&gt;. Leadership of the Compiler Team,
and selection of new leads, has thus far been performed in an ad-hoc manner. We
will be reviewing a document authored by Felix Klock that tries to fix this by
writing down 1. what the leads do today, 2. the minimum we expect from future
leads, and 3. what process we should use for selecting new leads.&lt;/p&gt;
&lt;p&gt;We are expecting this meeting may not occupy a full hour slot, and plan to
occupy any remaining time doing &lt;a href&#x3D;&quot;https://github.com/rust-lang/compiler-team/issues/484&quot;&gt;&amp;quot;backlog bonanza&amp;quot;&lt;/a&gt;, reviewing the list
of unimplemented or partially-implemented features.&lt;/p&gt;
&lt;p&gt;On Friday, 29 April, we will be having a meeting to discuss the future of Rust&#x27;s
&lt;a href&#x3D;&quot;https://github.com/rust-lang/compiler-team/issues/491&quot;&gt;incrementatal compilation&lt;/a&gt;. The incremental compilation system has been
hard to maintain and hasn&#x27;t been delivering as much value as we had hoped, at
least given the amount of effort that goes into maintaining it. We already had a
&lt;a href&#x3D;&quot;https://github.com/rust-lang/compiler-team/issues/490&quot;&gt;meeting on Friday, 1 April&lt;/a&gt; that looked at our high-level options going
forward; this meeting is a follow-up to that, but will now be informed by the
aforementioned discussion of Salsa 2.0&#x27;s entity design, which would resolve some
(but not all) of the issues that plague us today.&lt;/p&gt;
&lt;p&gt;The three meetings in April each run from 2pm to 3pm GMT.&lt;/p&gt;
&lt;p&gt;All of the steering meetings take place on the &lt;a href&#x3D;&quot;https://rust-lang.zulipchat.com/#narrow/stream/238009-t-compiler.2Fmeetings&quot;&gt;T-compiler/meetings zulip stream&lt;/a&gt;.&lt;/p&gt;
</content>

        <author>
            <name>Felix Klock</name>
        </author>
    </entry>
    
    <entry>
        <title>CTCFT 2022-04-18 Agenda</title>
        <link rel="alternate" href="https://blog.rust-lang.org/inside-rust/2022/04/12/CTCFT-april.html" type="text/html" title="CTCFT 2022-04-18 Agenda" />
        <published>2022-04-12T00:00:00+00:00</published>
        <updated>2022-04-12T00:00:00+00:00</updated>
        <id>https://blog.rust-lang.org/inside-rust/2022/04/12/CTCFT-april.html</id>
        <content type="html" xml:base="https://blog.rust-lang.org/inside-rust/2022/04/12/CTCFT-april.html">&lt;p&gt;The next &lt;a href&#x3D;&quot;https://rust-lang.github.io/ctcft/&quot;&gt;&amp;quot;Cross Team Collaboration Fun Times&amp;quot; (CTCFT)&lt;/a&gt; meeting will take
place on Monday, 2022-04-18 at &lt;strong&gt;9pm US Eastern Time&lt;/strong&gt; (&lt;a href&#x3D;&quot;https://everytimezone.com/s/497ef0a9&quot;&gt;click to see in your
time zone&lt;/a&gt;). You’ll find the full details (along with a calendar
event, zoom details, etc) &lt;a href&#x3D;&quot;https://rust-lang.github.io/ctcft/meetings/2022-04-18.html&quot;&gt;on the CTCFT website&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;&lt;a href&#x3D;&quot;#agenda&quot; aria-hidden&#x3D;&quot;true&quot; class&#x3D;&quot;anchor&quot; id&#x3D;&quot;agenda&quot;&gt;&lt;/a&gt;Agenda&lt;/h2&gt;
&lt;p&gt;The theme of April&#x27;s CTCFT is &amp;quot;learning&amp;quot;. Doc Jones will speak about the Rustc
Reading Club Phase II, and what was learned from the first iteration of the
club. Jon Gjengset will talk about teaching advanced Rust concepts.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;(5 min) Opening remarks 👋 (&lt;a href&#x3D;&quot;https://github.com/angelonfira&quot;&gt;angelonfira&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;(20 min) Rustc Reading Club Phase II (&lt;a href&#x3D;&quot;https://github.com/doc-jones&quot;&gt;doc-jones&lt;/a&gt;)
&lt;ul&gt;
&lt;li&gt;The Rustc Reading Club has two goals. First, to produce confident new
contributors to rustc. Second, to deepen understanding of rustc for mid
level contributors. The structure of RRC enables participants to gain
experience working with other contributors making their future
collaborations easier. &lt;a href&#x3D;&quot;https://mojosd.medium.com/rrc-phase-i-retrospective-74141fb246e4&quot;&gt;Phase I of the Rustc Reading Club&lt;/a&gt; is complete and
now we are ready to launch Phase II based on what we&#x27;ve learned. Phase I
focused solely on rustc&#x27;s name resolver module. We plan to expand and
&amp;quot;read&amp;quot; other areas of the compiler in Phase II.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;(20 min) Teaching Advanced Rust (&lt;a href&#x3D;&quot;https://github.com/jonhoo&quot;&gt;jonhoo&lt;/a&gt;)
&lt;ul&gt;
&lt;li&gt;Over the past few years I&#x27;ve spent a lot of time trying to teach Rust
&amp;quot;beyond the basics&amp;quot;, focusing my attention on the problems that developers
who have read all the introductory materials run into when they sit down
to actually use Rust &amp;quot;for real&#x27;. In this session I&#x27;ll talk about some
recurring patterns I&#x27;ve seen while doing this, in the hope that they may
spawn interesting discussion about possible solutions.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;(5 min) Closing (&lt;a href&#x3D;&quot;https://github.com/angelonfira&quot;&gt;angelonfira&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href&#x3D;&quot;#afterwards-social-hour&quot; aria-hidden&#x3D;&quot;true&quot; class&#x3D;&quot;anchor&quot; id&#x3D;&quot;afterwards-social-hour&quot;&gt;&lt;/a&gt;Afterwards: Social Hour&lt;/h2&gt;
&lt;p&gt;Like always, we&#x27;ll be running a social hour after the CTCFT. The idea is really
simple: for the hour after the meeting, we will create breakout rooms in Zoom
with different themes. You can join any breakout room you like and hangout.&lt;/p&gt;
</content>

        <author>
            <name>Rust CTCFT Team</name>
        </author>
    </entry>
    
    <entry>
        <title>Lang team April update</title>
        <link rel="alternate" href="https://blog.rust-lang.org/inside-rust/2022/04/06/lang-team-april-update.html" type="text/html" title="Lang team April update" />
        <published>2022-04-06T00:00:00+00:00</published>
        <updated>2022-04-06T00:00:00+00:00</updated>
        <id>https://blog.rust-lang.org/inside-rust/2022/04/06/lang-team-april-update.html</id>
        <content type="html" xml:base="https://blog.rust-lang.org/inside-rust/2022/04/06/lang-team-april-update.html">&lt;p&gt;Today, the lang team held its April planning meeting. We hold these meetings on the first Wednesday of every month, and we use them to schedule &lt;a href&#x3D;&quot;https://lang-team.rust-lang.org/meetings/design.html&quot;&gt;design meetings&lt;/a&gt; for the remainder of the month.&lt;/p&gt;
&lt;h2&gt;&lt;a href&#x3D;&quot;#upcoming-design-meetings&quot; aria-hidden&#x3D;&quot;true&quot; class&#x3D;&quot;anchor&quot; id&#x3D;&quot;upcoming-design-meetings&quot;&gt;&lt;/a&gt;Upcoming design meetings&lt;/h2&gt;
&lt;p&gt;We have planned the following design meetings:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;2021-04-13: &lt;a href&#x3D;&quot;https://github.com/rust-lang/lang-team/issues/152&quot;&gt;Implied bounds and perfect derive&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;2021-04-20: &lt;a href&#x3D;&quot;https://github.com/rust-lang/lang-team/issues/155&quot;&gt;Language design research overview&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;2021-04-27: &lt;a href&#x3D;&quot;https://lang-team.rust-lang.org/meetings/backlog-bonanza.html&quot;&gt;Backlog Bonanza&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href&#x3D;&quot;#design-meeting-expectations&quot; aria-hidden&#x3D;&quot;true&quot; class&#x3D;&quot;anchor&quot; id&#x3D;&quot;design-meeting-expectations&quot;&gt;&lt;/a&gt;Design meeting expectations&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;The document for the meeting must be prepared by the triage meeting on Tuesday and posted to the tracking issue.
&lt;ul&gt;
&lt;li&gt;If it is not sent out by then, the meeting will be replaced with a &lt;a href&#x3D;&quot;https://lang-team.rust-lang.org/meetings/backlog-bonanza.html&quot;&gt;Backlog Bonanza&lt;/a&gt; session. This gives folks 24 hour notice.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;There is no expectation that people will read the document before the meeting. The meeting will begin with a recap of the document.
&lt;ul&gt;
&lt;li&gt;However, there is no rule &lt;strong&gt;against&lt;/strong&gt; reading the document beforehand and providing feedback or advice on how to improve it.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
</content>

        <author>
            <name>Josh Triplett</name>
        </author>
    </entry>
    
    <entry>
        <title>Rust Lang Roadmap for 2024</title>
        <link rel="alternate" href="https://blog.rust-lang.org/inside-rust/2022/04/04/lang-roadmap-2024.html" type="text/html" title="Rust Lang Roadmap for 2024" />
        <published>2022-04-04T00:00:00+00:00</published>
        <updated>2022-04-04T00:00:00+00:00</updated>
        <id>https://blog.rust-lang.org/inside-rust/2022/04/04/lang-roadmap-2024.html</id>
        <content type="html" xml:base="https://blog.rust-lang.org/inside-rust/2022/04/04/lang-roadmap-2024.html">&lt;p&gt;Note: this blog post is a snapshot of the living roadmap at
&lt;a href&#x3D;&quot;https://lang-team.rust-lang.org/roadmaps/roadmap-2024.html&quot;&gt;https://lang-team.rust-lang.org/roadmaps/roadmap-2024.html&lt;/a&gt;. Subsequent
changes may occur in that version, but not in this blog post. Please see that
page for the most up-to-date version.&lt;/p&gt;
&lt;h1&gt;&lt;a href&#x3D;&quot;#lang-team-roadmap-2024&quot; aria-hidden&#x3D;&quot;true&quot; class&#x3D;&quot;anchor&quot; id&#x3D;&quot;lang-team-roadmap-2024&quot;&gt;&lt;/a&gt;Lang Team Roadmap 2024&lt;/h1&gt;
&lt;p&gt;Rust 1.0 was released in 2015. Since that time, we&#x27;ve seen Rust grow from a
small language used for a handful of prominent projects into a mainstay in use
at virtually every major tech company.&lt;/p&gt;
&lt;p&gt;As we work towards Rust 2024, it&#x27;s natural to ask what&#x27;s next for the language.
This roadmap provides insight into that question by describing what we, as
members of the lang team with input from other Rust teams, would like to
prioritize.&lt;/p&gt;
&lt;p&gt;We have two goals with this roadmap:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;to give people a sense for what to expect in Rust over the next few years;&lt;/li&gt;
&lt;li&gt;for those who would like to contribute to Rust, to help provide &amp;quot;starting
points&amp;quot; for how to get involved, and a sense for what kind of projects we are
looking for.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Also see the &lt;a href&#x3D;&quot;https://blog.rust-lang.org/inside-rust/2022/02/22/compiler-team-ambitions-2022.html&quot;&gt;Rust Compiler Ambitions for
2022&lt;/a&gt;,
for plans from the Rust Compiler team, and watch the Inside Rust blog for the
upcoming roadmap from the Rust Library team.&lt;/p&gt;
&lt;h2&gt;&lt;a href&#x3D;&quot;#rust-2024-scaling-empowerment&quot; aria-hidden&#x3D;&quot;true&quot; class&#x3D;&quot;anchor&quot; id&#x3D;&quot;rust-2024-scaling-empowerment&quot;&gt;&lt;/a&gt;Rust 2024: scaling empowerment&lt;/h2&gt;
&lt;p&gt;Rust&#x27;s goal is to &lt;strong&gt;empower everyone to build reliable and efficient
software&lt;/strong&gt;. Success requires not only designing and implementing a great
language with great libraries and great tools, but also maintaining a great and
supportive community.&lt;/p&gt;
&lt;p&gt;Our focus for Rust 2024 is to &lt;strong&gt;scale empowerment&lt;/strong&gt; in many different ways. As
we grow, we face increasing challenges in how we can scale the ways in which we
empower people to an increasing number of people. This roadmap presents three
general themes we plan to focus on:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href&#x3D;&quot;#Theme-Flatten-the-learning-curve&quot;&gt;Flatten the (learning) curve&lt;/a&gt;&lt;/strong&gt;:
scaling to new users and new use cases
&lt;ul&gt;
&lt;li&gt;Make Rust more accessible to new and existing users alike, and make
solving hard problems easier.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href&#x3D;&quot;#Theme-Help-users-help-each-other&quot;&gt;Help Rust&#x27;s users help each other&lt;/a&gt;&lt;/strong&gt;:
scaling the ecosystem
&lt;ul&gt;
&lt;li&gt;Empower library authors so they can---in turn---empower their users.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href&#x3D;&quot;#Theme-Help-the-Rust-project-scale&quot;&gt;Help the Rust project scale&lt;/a&gt;&lt;/strong&gt;:
scaling the project
&lt;ul&gt;
&lt;li&gt;Develop processes to scale to the needs and use cases of a growing number
of users; evaluate and finish projects we&#x27;ve started.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For each theme, we&#x27;ll describe our goals for Rust 2024, and give a few examples
of the kinds of things that we&#x27;re working on right now, as well as the kinds of
things we would like to do over the next few years.&lt;/p&gt;
&lt;p&gt;This roadmap is a starting point. Our intent is to highlight those areas that
will have the biggest impact on Rust&#x27;s success. Specific examples will change
over time, whether because they&#x27;re finished or because new proposals arise. As
2023 approaches, we will revisit these themes to see how much progress we have
made, and whether we wish to adjust the list.&lt;/p&gt;
&lt;h2&gt;&lt;a href&#x3D;&quot;#theme-flatten-the-learning-curve&quot; aria-hidden&#x3D;&quot;true&quot; class&#x3D;&quot;anchor&quot; id&#x3D;&quot;theme-flatten-the-learning-curve&quot;&gt;&lt;/a&gt;Theme: Flatten the (learning) curve&lt;/h2&gt;
&lt;h3&gt;&lt;a href&#x3D;&quot;#the-vision&quot; aria-hidden&#x3D;&quot;true&quot; class&#x3D;&quot;anchor&quot; id&#x3D;&quot;the-vision&quot;&gt;&lt;/a&gt;The vision&lt;/h3&gt;
&lt;p&gt;Thanks to a consistent focus on ergonomics, Rust has become considerably easier
to use over the last few years. Companies building large teams of Rust users
report that the typical onboarding time for a Rust engineer is around 3-6
months. Once folks learn Rust, they typically love it. Even so, many people
report a sense of high &amp;quot;cognitive overhead&amp;quot; in using it, and &amp;quot;learning curve&amp;quot;
remains the most common reason not to use Rust. The fact is that, even after
you learn how the Rust borrow checker works, there remain a lot of &amp;quot;small
details&amp;quot; that you have to get just right to get your Rust program to compile.&lt;/p&gt;
&lt;p&gt;For Rust 2024, we will identify and eliminate many of those patterns and
idiosyncracies that one must learn to use Rust; our goal is to let you focus
squarely on the &amp;quot;inherent complexity&amp;quot; of your problem domain and avoid
&amp;quot;accidental complexity&amp;quot; from Rust as much as possible.&lt;/p&gt;
&lt;p&gt;Async and embedded Rust are areas of particular interest. We have made a lot of
strides to support those areas, and they are growing rapidly. Nonetheless, Rust
lacks many core capabilities that would be required to make working in those
domains not only &lt;em&gt;possible&lt;/em&gt; but &lt;em&gt;straightforward and delightful&lt;/em&gt;. For Rust
2024, we will close that gap.&lt;/p&gt;
&lt;p&gt;Our plan for achieving this vision is to focus on four high-level goals (in
order from broad to precise):&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;More precise analyses, less rigamarole:&lt;/strong&gt; Make the compiler better able to
recognize when code is correct via improvements to the borrow checker, type
inference, and so forth. Identify and eliminate &amp;quot;boilerplate&amp;quot; patterns like
having to copy-and-paste the same set of where clauses everywhere.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Express yourself more easily:&lt;/strong&gt; Where necessary, extend the language so you
can express what you want your code to do more directly. In some cases this
takes the form of syntactic sugar (such as
&lt;a href&#x3D;&quot;https://github.com/rust-lang/rust/issues/87335&quot;&gt;let-else&lt;/a&gt;) but in other
cases it may mean extending the type system to be able to describe new
patterns (such as &lt;a href&#x3D;&quot;https://rust-lang.github.io/generic-associated-types-initiative/&quot;&gt;generic associated
types&lt;/a&gt;).&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Improve async support:&lt;/strong&gt; Extend our async-await support beyond the current
&amp;quot;MVP&amp;quot; to include features like async fns in traits, async drop, and other
features needed to support the &lt;a href&#x3D;&quot;https://rust-lang.github.io/wg-async/vision/roadmap.html&quot;&gt;async vision
document&lt;/a&gt; roadmap.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Make &lt;code&gt;dyn Trait&lt;/code&gt; more usable:&lt;/strong&gt; Broaden the set of traits that can be used
with &lt;code&gt;dyn&lt;/code&gt; and make working with &lt;code&gt;dyn&lt;/code&gt; closer to working with generics.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a href&#x3D;&quot;#how-you-can-help&quot; aria-hidden&#x3D;&quot;true&quot; class&#x3D;&quot;anchor&quot; id&#x3D;&quot;how-you-can-help&quot;&gt;&lt;/a&gt;How you can help&lt;/h3&gt;
&lt;p&gt;Join the rust-lang Zulip, and either start a thread in the
&lt;a href&#x3D;&quot;https://rust-lang.zulipchat.com/#narrow/stream/318377-t-lang.2Froadmap-2024&quot;&gt;&lt;code&gt;#t-lang/roadmap-2024&lt;/code&gt;&lt;/a&gt;
stream, or send a private message to nikomatsakis if you&#x27;d like to discuss
privately first.&lt;/p&gt;
&lt;h3&gt;&lt;a href&#x3D;&quot;#the-plan-so-far&quot; aria-hidden&#x3D;&quot;true&quot; class&#x3D;&quot;anchor&quot; id&#x3D;&quot;the-plan-so-far&quot;&gt;&lt;/a&gt;The plan (so far)&lt;/h3&gt;
&lt;p&gt;Current active &lt;a href&#x3D;&quot;https://lang-team.rust-lang.org/initiatives.html&quot;&gt;initiatives&lt;/a&gt;
in each category include:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;More precise analyses, less rigamarole:&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;Non-lexical lifetimes were a big stride forward, but the &lt;a href&#x3D;&quot;https://github.com/rust-lang/polonius/&quot;&gt;polonius
project&lt;/a&gt; promises to improve the
borrow check&#x27;s precision even more.&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://github.com/rust-lang/rust/issues/44491&quot;&gt;Implied bounds&lt;/a&gt; promise
to remove a lot of copy-and-pasting of where clauses.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Express yourself more easily:&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://github.com/rust-lang/rust/issues/87335&quot;&gt;let-else&lt;/a&gt; directly
express the &amp;quot;match this variant or &lt;code&gt;return&lt;/code&gt;/&lt;code&gt;continue&lt;/code&gt;/etc&amp;quot; pattern.&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://github.com/rust-lang/rust/issues/53667&quot;&gt;let-chains&lt;/a&gt; allow you to
express iterative refinement with a series of pattern-matches and
conditionals&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://rust-lang.github.io/impl-trait-initiative/explainer/tait.html&quot;&gt;&amp;quot;Type alias&amp;quot; impl
Trait&lt;/a&gt;
permits APIs to name previously unnameable types. This is part of a
larger effort to &lt;a href&#x3D;&quot;https://rust-lang.github.io/impl-trait-initiative/&quot;&gt;expand impl
Trait&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://rust-lang.github.io/generic-associated-types-initiative/&quot;&gt;Generic associated
types&lt;/a&gt;
allow traits to express a number of patterns (like &amp;quot;iterable&amp;quot;) that the
current trait system cannot handle. They are a particularly important
foundational piece for async programming.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Improve async support:&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;We are working to support &lt;a href&#x3D;&quot;https://rust-lang.github.io/async-fundamentals-initiative/explainer/async_fn_in_traits.html&quot;&gt;async fns in
traits&lt;/a&gt;,
including both static dispatch and dyn dispatch.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Make &lt;code&gt;dyn Trait&lt;/code&gt; more usable:&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://github.com/rust-lang/dyn-upcasting-coercion-initiative/issues/6&quot;&gt;Dyn upcasting coercion
initiative&lt;/a&gt;:
Allow upcasting &lt;code&gt;dyn trait&lt;/code&gt; objects from &lt;code&gt;&amp;amp;dyn Subtrait&lt;/code&gt; to &lt;code&gt;&amp;amp;dyn Supertrait&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;The &lt;a href&#x3D;&quot;https://rust-lang.github.io/async-fundamentals-initiative/explainer/async_fn_in_traits.html&quot;&gt;async fn in
traits&lt;/a&gt;
initiative is also extending dyn trait to support async fns and &amp;quot;return
position impl Trait&amp;quot;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a href&#x3D;&quot;#looking-forward&quot; aria-hidden&#x3D;&quot;true&quot; class&#x3D;&quot;anchor&quot; id&#x3D;&quot;looking-forward&quot;&gt;&lt;/a&gt;Looking forward&lt;/h3&gt;
&lt;p&gt;Looking beyond the initiatives that are in progress, there&#x27;s a lot of room for
more improvement. Here are some other ideas we&#x27;d like to see. &lt;strong&gt;For many of
these ideas, the main thing they need is someone to own the design!&lt;/strong&gt; If you
might be interested in giving that a try, come to
&lt;a href&#x3D;&quot;https://rust-lang.zulipchat.com/#narrow/stream/318377-t-lang.2Froadmap-2024&quot;&gt;&lt;code&gt;#t-lang/roadmap-2024&lt;/code&gt;&lt;/a&gt;
to discuss, or send a private message to nikomatsakis.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;More precise analyses, less rigamarole:&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://github.com/rust-lang/lang-team/issues/88&quot;&gt;Deref patterns&lt;/a&gt;:
Permit matching types with patterns they can dereference to, such as
matching a &lt;code&gt;String&lt;/code&gt; with a &lt;code&gt;&amp;quot;str&amp;quot;&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Perfect derive: determine the precise conditions for generic type
parameters based on the types of a struct fields. For instance,
&lt;code&gt;#[derive(Clone)] struct MyStruct(Rc&amp;lt;T&amp;gt;)&lt;/code&gt; would not require &lt;code&gt;T: Clone&lt;/code&gt;,
because &lt;code&gt;Rc&amp;lt;T&amp;gt;&lt;/code&gt; can be cloned without it.&lt;/li&gt;
&lt;li&gt;Autoref, operators, and clones: Generic methods that operate on
references sometimes necessitate types like &lt;code&gt;&amp;amp;u32&lt;/code&gt;; since &lt;code&gt;u32&lt;/code&gt; is
&lt;code&gt;Copy&lt;/code&gt;, we could automatically make it a reference. We&#x27;ve historically
had some hesitance to add more reference-producing operations, because it
can lead to types the user doesn&#x27;t expect (such as &lt;code&gt;&amp;amp;&amp;amp;&amp;amp;str&lt;/code&gt;). We have
some ideas to simplify those cases and avoid unnecessary
double-references.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Express yourself more easily:&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://github.com/rust-lang/lang-team/issues/137&quot;&gt;Generators&lt;/a&gt;, allowing
users to write iterators (async and otherwise) using custom syntax.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Improve async support:&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;After adding async fn in traits, we intend to add support for async drop,
async closures, and potentially other features.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Make &lt;code&gt;dyn Trait&lt;/code&gt; more usable:&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;Make more patterns &amp;quot;object safe&amp;quot; and thus usable in &lt;code&gt;dyn Trait&lt;/code&gt; objects,
including passing &lt;code&gt;self&lt;/code&gt; by value and handling &lt;code&gt;impl Trait&lt;/code&gt; in argument
position (&lt;a href&#x3D;&quot;https://smallcultfollowing.com/babysteps/blog/2022/01/07/dyn-async-traits-part-7/&quot;&gt;see this post for more
information&lt;/a&gt;).&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href&#x3D;&quot;#theme-help-users-help-each-other&quot; aria-hidden&#x3D;&quot;true&quot; class&#x3D;&quot;anchor&quot; id&#x3D;&quot;theme-help-users-help-each-other&quot;&gt;&lt;/a&gt;Theme: Help users help each other&lt;/h2&gt;
&lt;h3&gt;&lt;a href&#x3D;&quot;#the-vision-1&quot; aria-hidden&#x3D;&quot;true&quot; class&#x3D;&quot;anchor&quot; id&#x3D;&quot;the-vision-1&quot;&gt;&lt;/a&gt;The vision&lt;/h3&gt;
&lt;p&gt;Rust&#x27;s combination of ownership and borrowing, low-level systems control, and
powerful extensibility mechanisms like procedural macros makes it a great
language for writing libraries. And, thanks to Cargo, using a library in your
program only takes a few lines of code. Nonetheless, there are a number of
things that library authors &lt;em&gt;can&#x27;t&lt;/em&gt; do, or can&#x27;t do easily -- for example, they
can&#x27;t control the error messages you see or deploy an &amp;quot;unstable&amp;quot; feature that
requires special opt-in to use. For Rust 2024, we want to build features that
empower library authors to better serve their users, either by helping to
manage the feature lifecycle or by expanding the capabilities of what a library
can do.&lt;/p&gt;
&lt;p&gt;We encourage people to experiment and explore in the library ecosystem,
building new functionality for people to use. Sometimes, that new functionality
becomes a foundation for others to build on, and standardizing it simplifies
further development atop it, letting the cycle continue at another level.
However, some aspects of the Rust language (notably coherence) make it harder
to extend the Rust standard library or well-established crates from separate
libraries, discouraging experimentation. Other features (such as aspects of
method resolution) make it hard to promote best-in-class functionality into the
standard library or into well-established crates without breaking users of the
crates that first developed that functionality. For Rust 2024, we want to
pursue changes that enable more exploration in the ecosystem, and enable stable
migration of code from the ecosystem into the standard library.&lt;/p&gt;
&lt;p&gt;Our plan for achieving this vision is to focus on four categories of work:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Feature lifecycle&lt;/strong&gt;: Help library authors support features as they move
from experimental to finalized. Help library authors manage their development
lifecycle and evolution.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Richer abstractions&lt;/strong&gt;: Extend the language to let library authors express
richer abstractions.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Custom developer experience&lt;/strong&gt;: Permit library authors can tailor the
developer experience, for example by tailoring the error messages a user gets
when traits are not implemented or introducing custom lints.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Interoperability&lt;/strong&gt;: The library ecosystem can easily coordinate, making
libraries work together without tying them together. Library authors can
write code that is portable across many environments or specific to one, as
they please.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a href&#x3D;&quot;#how-you-can-help-1&quot; aria-hidden&#x3D;&quot;true&quot; class&#x3D;&quot;anchor&quot; id&#x3D;&quot;how-you-can-help-1&quot;&gt;&lt;/a&gt;How you can help&lt;/h3&gt;
&lt;p&gt;Join the rust-lang Zulip, and either start a thread in the
&lt;a href&#x3D;&quot;https://rust-lang.zulipchat.com/#narrow/stream/318377-t-lang.2Froadmap-2024&quot;&gt;&lt;code&gt;#t-lang/roadmap-2024&lt;/code&gt;&lt;/a&gt;
stream, or send a private message to Josh Triplett if you&#x27;d like to discuss
privately first.&lt;/p&gt;
&lt;h3&gt;&lt;a href&#x3D;&quot;#the-plan-so-far-1&quot; aria-hidden&#x3D;&quot;true&quot; class&#x3D;&quot;anchor&quot; id&#x3D;&quot;the-plan-so-far-1&quot;&gt;&lt;/a&gt;The plan (so far)&lt;/h3&gt;
&lt;p&gt;Current active &lt;a href&#x3D;&quot;https://lang-team.rust-lang.org/initiatives.html&quot;&gt;initiatives&lt;/a&gt;
in each category include:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Feature lifecycle:&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;RFC 3240 proposes &lt;a href&#x3D;&quot;https://github.com/rust-lang/rfcs/pull/3240&quot;&gt;edition-based method
disambiguation&lt;/a&gt;, to support
moving extension methods from external crates into the standard library.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Richer abstractions:&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;There are numerous core extensions to Rust&#x27;s type system that permit
richer traits to be developed. Often the lack of these features prohibits
people from writing general purpose libraries because they can&#x27;t get
sufficient reuse:
&lt;ul&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://rust-lang.github.io/async-fundamentals-initiative/&quot;&gt;Async fn in
traits&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://github.com/rust-lang/lang-team/issues/51&quot;&gt;Const generics&lt;/a&gt;
and &lt;a href&#x3D;&quot;https://github.com/rust-lang/lang-team/issues/22&quot;&gt;constant
evaluation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://rust-lang.github.io/impl-trait-initiative/explainer/tait.html&quot;&gt;Type alias impl
Trait&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://rust-lang.github.io/generic-associated-types-initiative/&quot;&gt;Generic associated
types&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Custom developer experience:&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;We are not currently doing any coordinated initiatives here, though there
are ongoing efforts that help lay groundwork for this.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Interoperability:&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;Support &amp;quot;global capabilities&amp;quot; like allocators or async runtimes, perhaps
via an approach like &lt;a href&#x3D;&quot;https://github.com/rust-lang/rfcs/pull/2492&quot;&gt;RFC
2492&lt;/a&gt;, and perhaps extending
to something like &lt;a href&#x3D;&quot;https://tmandry.gitlab.io/blog/posts/2021-12-21-context-capabilities/&quot;&gt;scoped contexts and
capabilities&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://rust-lang.github.io/negative-impls-initiative/&quot;&gt;Negative impls in
coherence&lt;/a&gt; allows
for more flexibility in the coherence check by permitting crates to
explicitly declare that a given type will never implement a given trait.&lt;/li&gt;
&lt;li&gt;The async working group&#x27;s &lt;a href&#x3D;&quot;https://www.ncameron.org/blog/portable-and-interoperable-async-rust/&quot;&gt;portability
initiative&lt;/a&gt;
(which builds on the work to support &lt;a href&#x3D;&quot;https://rust-lang.github.io/async-fundamentals-initiative/&quot;&gt;async fn in
traits&lt;/a&gt;) will
help the async ecosystem to grow by enabling more interoperability.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a href&#x3D;&quot;#looking-forward-1&quot; aria-hidden&#x3D;&quot;true&quot; class&#x3D;&quot;anchor&quot; id&#x3D;&quot;looking-forward-1&quot;&gt;&lt;/a&gt;Looking forward&lt;/h3&gt;
&lt;p&gt;Looking beyond the initiatives that are in progress, there&#x27;s a lot of room for
more improvement. Here are some other ideas we&#x27;d like to see. &lt;strong&gt;For many of
these ideas, the main thing they need is someone to own the design!&lt;/strong&gt; If you
might be interested in giving that a try, come to
&lt;a href&#x3D;&quot;https://rust-lang.zulipchat.com/#narrow/stream/318377-t-lang.2Froadmap-2024&quot;&gt;&lt;code&gt;#t-lang/roadmap-2024&lt;/code&gt;&lt;/a&gt;
to discuss, or send a private message to Josh Triplett.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Feature lifecycle&lt;/strong&gt;:
&lt;ul&gt;
&lt;li&gt;All ecosystem crates can have &amp;quot;release trains&amp;quot;, with the equivalent of
&amp;quot;nightly features&amp;quot; that require a stability opt-ins. Top-level crates
retain control over whether any of their dependencies may use nightly
features.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Richer abstractions&lt;/strong&gt;:
&lt;ul&gt;
&lt;li&gt;Allow libraries to implement the &lt;code&gt;Fn&lt;/code&gt; traits to define callable objects.&lt;/li&gt;
&lt;li&gt;Variadic tuples and variadic generics would address a common pain point
of &amp;quot;implement this trait for tuples of any arity&amp;quot;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Custom developer experience&lt;/strong&gt;:
&lt;ul&gt;
&lt;li&gt;Allow libraries to provide custom lints for their users.&lt;/li&gt;
&lt;li&gt;Allow libraries to control or customize Rust diagnostics, especially for
trait resolution failures.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Interoperability&lt;/strong&gt;:
&lt;ul&gt;
&lt;li&gt;Revive the stalled &lt;a href&#x3D;&quot;https://github.com/rust-lang/rfcs/pull/1868&quot;&gt;portability
lint&lt;/a&gt; or pursue an
alternative design (a recent suggestion is that the &amp;quot;platform&amp;quot; might be a
global service, similar to &lt;a href&#x3D;&quot;https://github.com/rust-lang/rfcs/pull/2492&quot;&gt;RFC
2492&lt;/a&gt;, permitting one to use
where clauses to designate portable code)&lt;/li&gt;
&lt;li&gt;The coherence rules make it hard to implement interoperability traits; we
should find a way to lift this restriction, while preserving coherence&#x27;s
key benefits.&lt;/li&gt;
&lt;li&gt;Adopt a standard way to write performance benchmarks (perhaps simply
adopt &lt;code&gt;criterion&lt;/code&gt; officially).&lt;/li&gt;
&lt;li&gt;Better support for dynamic linking, with richer and safer types than the
C ABI. For instance, implement an &lt;code&gt;extern &amp;quot;safe&amp;quot;&lt;/code&gt; providing a subset of
Rust&#x27;s rich types.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href&#x3D;&quot;#theme-help-the-rust-project-scale&quot; aria-hidden&#x3D;&quot;true&quot; class&#x3D;&quot;anchor&quot; id&#x3D;&quot;theme-help-the-rust-project-scale&quot;&gt;&lt;/a&gt;Theme: &lt;strong&gt;Help the Rust project scale&lt;/strong&gt;&lt;/h2&gt;
&lt;h3&gt;&lt;a href&#x3D;&quot;#the-vision-2&quot; aria-hidden&#x3D;&quot;true&quot; class&#x3D;&quot;anchor&quot; id&#x3D;&quot;the-vision-2&quot;&gt;&lt;/a&gt;The vision&lt;/h3&gt;
&lt;p&gt;The Rust repo is a blizzard of activity. This is great, but it can be
overwhelming, particularly if you are trying to figure out the status of some
particular thing that you are interested in or would like to contribute to.&lt;/p&gt;
&lt;p&gt;To ship Rust 2024 and make Rust all that it can be, we need a system that makes
it easy for people to find out what&#x27;s going on and how they can help. We want
to scale our language development through delegation, empowering developers to
own and drive the work that they are passionate about. Lang team liaisons and
frequent lang team check-in will help ensure quality, stability, and overall
coherence. The team itself will have a clear &amp;quot;path to membership&amp;quot; that helps us
to maintain our membership and make sure we have the expertise we need.&lt;/p&gt;
&lt;p&gt;Our plan for achieving this vision is to focus on four categories of work:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;See the status at a glance:&lt;/strong&gt; We want it to be easy to identify what things
the lang-team is actively working on and how far those designs have come. We
want every tracking issue to clearly identify what &amp;quot;next steps&amp;quot; are needed to
push that particular feature over the finish line and make sure that those
steps are clearly documented for would-be contributors.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Clear owners and clear communication:&lt;/strong&gt; Rust operates by consensus, but
that doesn&#x27;t mean that everybody has to know all the details of everything.
We need a system that has clear owners for the work to be done, and ideally,
owners that are not on the lang team. Simply dividing work though can lead to
conflicts later on, so we also need frequent communication and updates to
ensure that everyone is keeping abreast of the overall direction things are
going, and to surface concerns early.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Efficient, open processes with tooling support:&lt;/strong&gt; We are always looking for
ways to improve how we operate to help us stay on top of what is going on in
the Rust project and to reach conclusions more quickly. One thing we&#x27;ve
noticed is that processes that are supported by bots or other tooling tend to
work much better.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a href&#x3D;&quot;#how-you-can-help-2&quot; aria-hidden&#x3D;&quot;true&quot; class&#x3D;&quot;anchor&quot; id&#x3D;&quot;how-you-can-help-2&quot;&gt;&lt;/a&gt;How you can help&lt;/h3&gt;
&lt;p&gt;Join the rust-lang Zulip, and either start a thread in the
&lt;a href&#x3D;&quot;https://rust-lang.zulipchat.com/#narrow/stream/318377-t-lang.2Froadmap-2024&quot;&gt;&lt;code&gt;#t-lang/roadmap-2024&lt;/code&gt;&lt;/a&gt;
stream, or send a private message to Josh Triplett and nikomatsakis if you&#x27;d
like to discuss privately first.&lt;/p&gt;
&lt;h3&gt;&lt;a href&#x3D;&quot;#the-plan-so-far-2&quot; aria-hidden&#x3D;&quot;true&quot; class&#x3D;&quot;anchor&quot; id&#x3D;&quot;the-plan-so-far-2&quot;&gt;&lt;/a&gt;The plan (so far)&lt;/h3&gt;
&lt;p&gt;Current active &lt;a href&#x3D;&quot;https://lang-team.rust-lang.org/initiatives.html&quot;&gt;initiatives&lt;/a&gt;
in each category include:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;See the status at a glance:&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;The &lt;a href&#x3D;&quot;https://github.com/orgs/rust-lang/projects/16/&quot;&gt;initiative project
board&lt;/a&gt; tracks all the
currently active initiatives that we are focusing on. For each one, it
shows their &lt;a href&#x3D;&quot;https://lang-team.rust-lang.org/initiatives/process/stages.html&quot;&gt;current
stage&lt;/a&gt;
along with their
&lt;a href&#x3D;&quot;https://lang-team.rust-lang.org/initiatives/process/roles/owner.html&quot;&gt;owners&lt;/a&gt;
and &lt;a href&#x3D;&quot;https://lang-team.rust-lang.org/initiatives/process/roles/liaison.html&quot;&gt;lang-team
liaisons&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;During the &lt;a href&#x3D;&quot;https://lang-team.rust-lang.org/meetings/backlog-bonanza.html&quot;&gt;backlog
bonanza&lt;/a&gt;
meetings, we are going through each older tracking issue and identifying
what kinds of work is needed to move it forward (needs a summary, needs
design work, etc).&lt;/li&gt;
&lt;li&gt;We&#x27;re taking the time to stabilize features that people are using, and
remove incomplete features as well as features people are not using, with
the eventual goal of treating everything open as &amp;quot;in-flight&amp;quot; rather than
&amp;quot;unknown&amp;quot;. We will also reduce the total number of in-flight features.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Clear owners and clear communication:&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;The &lt;a href&#x3D;&quot;https://lang-team.rust-lang.org/initiatives.html&quot;&gt;initiative system&lt;/a&gt;
assigns each task an owner, who drives the design, as well as a lang-team
liaison, who helps ensure alignment with the team. More work is needed to
get this system up and running smoothly.&lt;/li&gt;
&lt;li&gt;We are launching a &lt;a href&#x3D;&quot;https://hackmd.io/@nikomatsakis/rJ3h_-kJc&quot;&gt;formality
team&lt;/a&gt; that will take ownership
of ensuring Rust&#x27;s type soundness and diving into the details. This will
help to grow the set of people with expertise in that area while also
allowing the main lang team to consult as needed.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Efficient, open processes with tooling support:&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;We have designed a new &lt;a href&#x3D;&quot;https://lang-team.rust-lang.org/decision_process.html&quot;&gt;consensus decision
process&lt;/a&gt; that is
designed to overcome some of the shortcomings we&#x27;ve seen with rfcbot; it
needs to be implemented. This will help us make easily reversible
decisions easier, enable more experimentation, make it smoother to raise
and resolve concerns, and keep track of potential issues from proposal
through to stabilization&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a href&#x3D;&quot;#looking-forward-2&quot; aria-hidden&#x3D;&quot;true&quot; class&#x3D;&quot;anchor&quot; id&#x3D;&quot;looking-forward-2&quot;&gt;&lt;/a&gt;Looking forward&lt;/h3&gt;
&lt;p&gt;Looking beyond the initiatives that are in progress, there&#x27;s a lot of room for
more improvement. Here are some other ideas we&#x27;d like to see. If you might be
interested in giving that a try, come to
&lt;a href&#x3D;&quot;https://rust-lang.zulipchat.com/#narrow/stream/318377-t-lang.2Froadmap-2024&quot;&gt;&lt;code&gt;#t-lang/roadmap-2024&lt;/code&gt;&lt;/a&gt;
to discuss, or send a private message to Josh Triplett and nikomatsakis.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;See the status at a glance:&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;Find ways to integrate the older tracking issues with active initiatives;
reduce the manual updates required to keep the project board in sync.&lt;/li&gt;
&lt;li&gt;Improve the visualization of projects and blockers to something more
compelling and easier to follow.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Clear owners and clear communication:&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;Beyond the type system, there are other areas where forming specialized
teams could be useful.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Efficient, open processes with tooling support:&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;Generally improve rustbot to make meetings more efficient.&lt;/li&gt;
&lt;li&gt;Improve and automate the process of going from initiative proposal to
tracked initiative.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href&#x3D;&quot;#conclusion&quot; aria-hidden&#x3D;&quot;true&quot; class&#x3D;&quot;anchor&quot; id&#x3D;&quot;conclusion&quot;&gt;&lt;/a&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;We hope that this post has given you a taste for what we plan to focus on over
the next few years. If you&#x27;d like to help us reach these goals, please &lt;a href&#x3D;&quot;https://rust-lang.zulipchat.com/#narrow/stream/318377-t-lang.2Froadmap-2024&quot;&gt;get
involved&lt;/a&gt;!
We&#x27;ve listed a number of active initiatives for each point, but we&#x27;ve also
included a lot of ideas that are looking for an owner. Whether you prefer to
code, design, document, or organize, there&#x27;s work for you to do. And if the
only thing you want to do with Rust 2024 is to use it, we welcome that too.
Happy Rust hacking to y&#x27;all!&lt;/p&gt;
</content>

        <author>
            <name>Josh Triplett, Niko Matsakis</name>
        </author>
    </entry>
    
    <entry>
        <title>1.60.0 pre-release testing</title>
        <link rel="alternate" href="https://blog.rust-lang.org/inside-rust/2022/04/04/1.60.0-prerelease.html" type="text/html" title="1.60.0 pre-release testing" />
        <published>2022-04-04T00:00:00+00:00</published>
        <updated>2022-04-04T00:00:01+00:00</updated>
        <id>https://blog.rust-lang.org/inside-rust/2022/04/04/1.60.0-prerelease.html</id>
        <content type="html" xml:base="https://blog.rust-lang.org/inside-rust/2022/04/04/1.60.0-prerelease.html">&lt;p&gt;The 1.60.0 pre-release is ready for testing. The release is scheduled for this
Thursday, April 7th. &lt;a href&#x3D;&quot;https://github.com/rust-lang/rust/blob/stable/RELEASES.md#version-1600-2022-04-07&quot;&gt;Release notes can be found here.&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;You can try it out locally by running:&lt;/p&gt;
&lt;pre&gt;&lt;code class&#x3D;&quot;language-plain&quot;&gt;RUSTUP_DIST_SERVER&#x3D;https://dev-static.rust-lang.org rustup update stable
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The index is &lt;a href&#x3D;&quot;https://dev-static.rust-lang.org/dist/2022-04-04/index.html&quot;&gt;https://dev-static.rust-lang.org/dist/2022-04-04/index.html&lt;/a&gt;. You
can leave feedback on the &lt;a href&#x3D;&quot;https://internals.rust-lang.org/t/rust-1-60-0-prerelease-testing/&quot;&gt;internals thread&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The release team is also thinking about changes to our pre-release process:
we&#x27;d love your feedback &lt;a href&#x3D;&quot;https://github.com/rust-lang/release-team/issues/16&quot;&gt;on this GitHub issue&lt;/a&gt;.&lt;/p&gt;
</content>

        <author>
            <name>Pietro Albini</name>
        </author>
    </entry>
    
    <entry>
        <title>Changes at the Cargo Team</title>
        <link rel="alternate" href="https://blog.rust-lang.org/inside-rust/2022/03/31/cargo-team-changes.html" type="text/html" title="Changes at the Cargo Team" />
        <published>2022-03-31T00:00:00+00:00</published>
        <updated>2022-03-31T00:00:00+00:00</updated>
        <id>https://blog.rust-lang.org/inside-rust/2022/03/31/cargo-team-changes.html</id>
        <content type="html" xml:base="https://blog.rust-lang.org/inside-rust/2022/03/31/cargo-team-changes.html">&lt;p&gt;We are thrilled to publicly announce that &lt;a href&#x3D;&quot;https://github.com/weihanglo&quot;&gt;Weihang
Lo&lt;/a&gt; and &lt;a href&#x3D;&quot;https://github.com/epage/&quot;&gt;Ed Page&lt;/a&gt;
have joined the Cargo Team!&lt;/p&gt;
&lt;p&gt;Weihang has been providing thoughtful and helpful replies on our issue
tracker. He has often had the patience to explain to people what problem
they&#x27;re hitting and how to get unstuck. He often summarizes technical
conversations clearly describing the available solutions and their costs both
technical and more importantly human. He has also been contributing to many
improvements and code reviews.&lt;/p&gt;
&lt;p&gt;Ed has been a champion on many fronts. He has done tremendous work on
&lt;a href&#x3D;&quot;https://crates.io/crates/toml_edit&quot;&gt;toml_edit&lt;/a&gt; to push Cargo towards getting
&lt;code&gt;cargo add&lt;/code&gt; &lt;a href&#x3D;&quot;https://github.com/rust-lang/cargo/pull/10472&quot;&gt;merged in cargo
proper&lt;/a&gt;. He has brought
&lt;a href&#x3D;&quot;https://crates.io/crates/clap&quot;&gt;clap&lt;/a&gt; to the momentous 3.0 release and
continues to push on CLI improvements, more advanced testing tools, and much
more!&lt;/p&gt;
&lt;p&gt;At the same time one of the pillars of our team is stepping down. &lt;del&gt;Alex is
a programming robot sent back in time from the future to make sure that Rust
succeeds.&lt;/del&gt; &lt;a href&#x3D;&quot;https://github.com/alexcrichton/&quot;&gt;Alex Crichton&lt;/a&gt; has done
more than his fair share being a keystone holding the Rust project together.
&lt;a href&#x3D;&quot;https://internals.rust-lang.org/t/scaling-back-my-involvement-in-rust/&quot;&gt;Several years
ago&lt;/a&gt;
he stepped back from single-handedly running everything, to spin out many new
teams to take care of things he did alone. The Cargo Team was lucky enough to
be one of the places he still had energy to provide guidance, mentorship, and
continuity. He is the last member of the team to have been involved with Rust
since before Cargo existed. He will be deeply missed. Good luck on your next
project of interest! Or, take the time to relax. You&#x27;ve earned it!&lt;/p&gt;
&lt;p&gt;As a result of these changes to the team, the rate of new PRs is beyond our
capacity to accept at this time. Reviews for PRs will be taking significantly
longer than before. For now, Cargo will be having a freeze on any new features
or major changes. We will still be accepting bug fixes and work on existing
projects under active development. As capacity becomes more available, new
features may be accepted after being approved by the Cargo Team.&lt;/p&gt;
&lt;p&gt;Cargo is a large project with many moving pieces and different use cases. The
fact that it works reliably and that it is intuitive has been a significant
multiplier for Rust&#x27;s success. But it also means that reviewing changes needs
to be done very carefully. It is easy for changes to break some
obscure configuration, or be a targeted fix that deepens our technical debt
making it even harder to understand the whole of Cargo. We appreciate people&#x27;s
patience as we move forward.&lt;/p&gt;
</content>

        <author>
            <name>Eric Huss</name>
        </author>
    </entry>
    
    <entry>
        <title>CTCFT 2022-03-21 Agenda</title>
        <link rel="alternate" href="https://blog.rust-lang.org/inside-rust/2022/03/16/CTCFT-march.html" type="text/html" title="CTCFT 2022-03-21 Agenda" />
        <published>2022-03-16T00:00:00+00:00</published>
        <updated>2022-03-16T00:00:00+00:00</updated>
        <id>https://blog.rust-lang.org/inside-rust/2022/03/16/CTCFT-march.html</id>
        <content type="html" xml:base="https://blog.rust-lang.org/inside-rust/2022/03/16/CTCFT-march.html">&lt;p&gt;The next &lt;a href&#x3D;&quot;https://rust-lang.github.io/ctcft/&quot;&gt;&amp;quot;Cross Team Collaboration Fun Times&amp;quot; (CTCFT)&lt;/a&gt; meeting will take
place on Monday, 2022-03-21 at &lt;strong&gt;1pm US Eastern Time&lt;/strong&gt; (&lt;a href&#x3D;&quot;https://everytimezone.com/s/d733869e&quot;&gt;click to see in your
time zone&lt;/a&gt;). You’ll find the full details (along with a calendar
event, zoom details, etc) &lt;a href&#x3D;&quot;https://rust-lang.github.io/ctcft/meetings/2022-03-21.html&quot;&gt;on the CTCFT website&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;&lt;a href&#x3D;&quot;#agenda&quot; aria-hidden&#x3D;&quot;true&quot; class&#x3D;&quot;anchor&quot; id&#x3D;&quot;agenda&quot;&gt;&lt;/a&gt;Agenda&lt;/h2&gt;
&lt;p&gt;For this month&#x27;s CTCFT meeting, the theme is &amp;quot;planning for 2022&amp;quot;. Rebecca
Rumbul, the CEO of the Rust Foundation, will give some insight into the Foundation&#x27;s
mission. Niko Matsakis and Josh Triplett will go over the lang team&#x27;s roadmap
of the priorities for Rust 2024.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;(5 min) Opening remarks 👋 (&lt;a href&#x3D;&quot;https://github.com/nikomatsakis&quot;&gt;nikomatsakis&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;(15 min) Planning for Rust 2024 (&lt;a href&#x3D;&quot;https://github.com/nikomatsakis&quot;&gt;nikomatsakis&lt;/a&gt;, &lt;a href&#x3D;&quot;https://github.com/joshtriplett&quot;&gt;joshtriplett&lt;/a&gt;)
&lt;ul&gt;
&lt;li&gt;Now that Rust 2021 is behind us, it&#x27;s time to start thinking about Rust
2024! The lang team has been working on a roadmap that proposes various
priorities for Rust 2024 and discusses some of the language changes that can
help support those priorities. &lt;a href&#x3D;&quot;https://github.com/nikomatsakis&quot;&gt;@nikomatsakis&lt;/a&gt; and
&lt;a href&#x3D;&quot;https://github.com/joshtriplett&quot;&gt;@joshtriplett&lt;/a&gt; will discuss the contents of that document. We
would love feedback, both on the document and on whether it can be broadened
to include other teams&#x27; efforts as well.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;(15 min) Rust Foundation 2022 (&lt;a href&#x3D;&quot;https://twitter.com/rebeccarumbul&quot;&gt;Rebecca Rumbul&lt;/a&gt;)
&lt;ul&gt;
&lt;li&gt;Bec will give an overview of the Foundation&#x27;s current thinking on its
mission and how to achieve it, and talk a little about some of the bigger
questions that need to be addressed for the future. This will include more
detail on the work programs that the Foundation is currently pursuing (such
as the Community Grants Program), and some potential gaps / areas that the
Foundation is considering in terms of what support and resources it could
provide. Bec will also talk about the more operational/practical side of the
Foundation, outlining how the organisation is growing and how the split of
responsibilities between board and staff is working.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;(5 min) Closing (&lt;a href&#x3D;&quot;https://github.com/nikomatsakis&quot;&gt;nikomatsakis&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href&#x3D;&quot;#afterwards-social-hour&quot; aria-hidden&#x3D;&quot;true&quot; class&#x3D;&quot;anchor&quot; id&#x3D;&quot;afterwards-social-hour&quot;&gt;&lt;/a&gt;Afterwards: Social Hour&lt;/h2&gt;
&lt;p&gt;Like always, we&#x27;ll be running a social hour after the CTCFT. The idea is really
simple: for the hour after the meeting, we will create breakout rooms in Zoom
with different themes. You can join any breakout room you like and hangout.&lt;/p&gt;
</content>

        <author>
            <name>Rust CTCFT Team</name>
        </author>
    </entry>
    
    <entry>
        <title>Rust Compiler March 2022 Steering Cycle</title>
        <link rel="alternate" href="https://blog.rust-lang.org/inside-rust/2022/03/11/mar-steering-cycle.html" type="text/html" title="Rust Compiler March 2022 Steering Cycle" />
        <published>2022-03-11T00:00:00+00:00</published>
        <updated>2022-03-11T00:00:00+00:00</updated>
        <id>https://blog.rust-lang.org/inside-rust/2022/03/11/mar-steering-cycle.html</id>
        <content type="html" xml:base="https://blog.rust-lang.org/inside-rust/2022/03/11/mar-steering-cycle.html">&lt;p&gt;On &lt;a href&#x3D;&quot;https://zulip-archive.rust-lang.org/stream/238009-t-compiler/meetings/topic/.5Bplanning.20meeting.5D.202022-03-11.html&quot;&gt;Friday, March 11th&lt;/a&gt;, the Rust Compiler team had a planning meeting for the March steering cycle.&lt;/p&gt;
&lt;p&gt;Every fourth Friday, the Rust compiler team decides how
it is going to use its scheduled steering and design meeting time over the next
three Fridays.&lt;/p&gt;
&lt;p&gt;On Friday, 18 March, we will be having a &lt;a href&#x3D;&quot;https://github.com/rust-lang/compiler-team/issues/484&quot;&gt;&amp;quot;backlog bonanza&amp;quot;&lt;/a&gt;, in a
similar vein to that done by T-lang, to review the list of unimplemented or
partially-implemented features. pnkfelix and Jack Huey will prepare a document
to drive the meeting.&lt;/p&gt;
&lt;p&gt;On Friday, 25 March, we will be reviewing &lt;a href&#x3D;&quot;https://github.com/rust-lang/compiler-team/issues/488&quot;&gt;formal methods in Rust&lt;/a&gt;, and
also discuss how to provide a &lt;a href&#x3D;&quot;https://github.com/rust-lang/compiler-team/issues/498&quot;&gt;stable interface to MIR&lt;/a&gt;, &lt;code&gt;rustc&lt;/code&gt;&#x27;s middle
intermediate representation, for use by external tools (such as those developed
by the formal methods community). pnkfelix and Xavier Denis will prepare a
document to drive the meeting.&lt;/p&gt;
&lt;p&gt;Note: The MIR interface topic is of interest to a number of external
stakeholders, so we expect to have the document to drive the meeting ready for
review well ahead of this meeting. Please reach out to pnkfelix if you are
working on a project that would benefit from stable MIR, so we can determine if
you should be included in the development of that document. (Of course, all are
welcome at the steering meeting itself.)&lt;/p&gt;
&lt;p&gt;On Friday, 1 April, we will discuss &lt;a href&#x3D;&quot;https://github.com/rust-lang/compiler-team/issues/490&quot;&gt;robust incremental compilation&lt;/a&gt;. The
compiler team has opted to disable incremental compilation in the stable channel
twice in the past year. This meeting will discuss the pervasive issues suffered
by the current design, and possible strategies to validate the incremental
compilation subsystem going forward. mw and Aaron Hill will prepare a document
to drive the meeting.&lt;/p&gt;
&lt;p&gt;The two meetings in March will run from 2pm to 3pm GMT.&lt;/p&gt;
&lt;p&gt;The meeting on April 1st has a different time than normal; it will run from 4pm
to 5pm GMT.&lt;/p&gt;
&lt;p&gt;All of the meetings will take place on the &lt;a href&#x3D;&quot;https://rust-lang.zulipchat.com/#narrow/stream/238009-t-compiler.2Fmeetings&quot;&gt;T-compiler/meetings zulip stream&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;You can find a public link to the &lt;a href&#x3D;&quot;https://rust-lang.github.io/compiler-team/#meeting-calendar&quot;&gt;compiler team calendar&lt;/a&gt; here; it lists
these meetings as well as a number of other meetings for the compiler team and
various projects and working groups.&lt;/p&gt;
</content>

        <author>
            <name>Felix Klock</name>
        </author>
    </entry>
    
</feed>

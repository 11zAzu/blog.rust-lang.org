<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
    <generator uri="https://blog.rust-lang.org/inside-rust/" version="0.1.0">Inside Rust Blog</generator>
    <link href="https://blog.rust-lang.org/inside-rust/feed.xml" rel="self" type="application/atom+xml" />
    <link href="https://blog.rust-lang.org/inside-rust/" rel="alternate" type="text/html" />
    <id>https://blog.rust-lang.org/inside-rust/</id>
    <title>Inside Rust Blog</title>
    <subtitle>Want to follow along with Rust development? Curious how you might get involved? Take a look!</subtitle>
    <author>
        <name>Maintained by the Rust Teams.</name>
        <uri>https://github.com/rust-lang/blog.rust-lang.org/</uri>
    </author>
    <updated>2021-06-17T14:43:50+00:00</updated>

    
    <entry>
        <title>Please welcome Boxy, Léo Lanteri Thauvin and the8472 to compiler-contributors</title>
        <link rel="alternate" href="https://blog.rust-lang.org/inside-rust/2021/06/15/boxyuwu-leseulartichaut-the8472-compiler-contributors.html" type="text/html" title="Please welcome Boxy, Léo Lanteri Thauvin and the8472 to compiler-contributors" />
        <published>2021-06-15T00:00:00+00:00</published>
        <updated>2021-06-15T00:00:00+00:00</updated>
        <id>https://blog.rust-lang.org/inside-rust/2021/06/15/boxyuwu-leseulartichaut-the8472-compiler-contributors.html</id>
        <content type="html" xml:base="https://blog.rust-lang.org/inside-rust/2021/06/15/boxyuwu-leseulartichaut-the8472-compiler-contributors.html">&lt;p&gt;Please welcome &lt;a href&#x3D;&quot;https://github.com/BoxyUwU&quot;&gt;Boxy&lt;/a&gt;, &lt;a href&#x3D;&quot;https://github.com/LeSeulArtichaut&quot;&gt;Léo Lanteri Thauvin&lt;/a&gt; and &lt;a href&#x3D;&quot;https://github.com/the8472&quot;&gt;the8472&lt;/a&gt; to the &lt;a href&#x3D;&quot;https://rust-lang.github.io/rfcs/2689-compiler-team-contributors.html&quot;&gt;compiler-contributors&lt;/a&gt; group!&lt;/p&gt;
&lt;p&gt;&lt;a href&#x3D;&quot;https://github.com/BoxyUwU&quot;&gt;Boxy&lt;/a&gt; has been working on pushing const generics forward by &lt;a href&#x3D;&quot;https://github.com/rust-lang/rust/pull/81577&quot;&gt;implementing parts&lt;/a&gt; of the &lt;code&gt;const_evaluatable_checked&lt;/code&gt; feature, &lt;a href&#x3D;&quot;https://github.com/rust-lang/rust/pull/82067&quot;&gt;fixing bugs&lt;/a&gt; and &lt;a href&#x3D;&quot;https://github.com/rust-lang/rust/pull/85957&quot;&gt;making rustdoc work with const generics&lt;/a&gt;.
Boxy is also a frequent contributor to &lt;a href&#x3D;&quot;https://rust-lang.zulipchat.com/#narrow/stream/260443-project-const-generics&quot;&gt;#project-const-generics&lt;/a&gt; discussions and meetings.&lt;/p&gt;
&lt;p&gt;&lt;a href&#x3D;&quot;https://github.com/LeSeulArtichaut&quot;&gt;Léo Lanteri Thauvin&lt;/a&gt; has been a consistent contributor of &lt;a href&#x3D;&quot;https://github.com/rust-lang/rust/pull/78182&quot;&gt;refactorings and improvements&lt;/a&gt; to rustc.
Recently, Léo has been &lt;a href&#x3D;&quot;https://github.com/rust-lang/rust/pull/83129&quot;&gt;implementing&lt;/a&gt; a &lt;a href&#x3D;&quot;https://github.com/rust-lang/compiler-team/issues/402&quot;&gt;Major Change Proposal&lt;/a&gt; to migrate the &lt;code&gt;unsafe&lt;/code&gt; checker to operate on THIR instead of MIR.&lt;/p&gt;
&lt;p&gt;&lt;a href&#x3D;&quot;https://github.com/the8472&quot;&gt;the8472&lt;/a&gt; has been a frequent contributor of performance improvements to both the &lt;a href&#x3D;&quot;https://github.com/rust-lang/rust/pull/84965&quot;&gt;compiler itself&lt;/a&gt; as well as the &lt;a href&#x3D;&quot;https://github.com/rust-lang/rust/pull/83245&quot;&gt;standard library&lt;/a&gt;.
&lt;a href&#x3D;&quot;https://github.com/the8472&quot;&gt;the8472&lt;/a&gt; can also be frequently found on Zulip offering advice and help.&lt;/p&gt;
&lt;p&gt;Congratulations &lt;a href&#x3D;&quot;https://github.com/BoxyUwU&quot;&gt;Boxy&lt;/a&gt;, &lt;a href&#x3D;&quot;https://github.com/LeSeulArtichaut&quot;&gt;Léo Lanteri Thauvin&lt;/a&gt; and &lt;a href&#x3D;&quot;https://github.com/the8472&quot;&gt;the8472&lt;/a&gt; and thanks!&lt;/p&gt;
</content>

        <author>
            <name>Wesley Wiser</name>
        </author>
    </entry>
    
    <entry>
        <title>1.53.0 pre-release testing</title>
        <link rel="alternate" href="https://blog.rust-lang.org/inside-rust/2021/06/15/1.53.0-prelease.html" type="text/html" title="1.53.0 pre-release testing" />
        <published>2021-06-15T00:00:00+00:00</published>
        <updated>2021-06-15T00:00:01+00:00</updated>
        <id>https://blog.rust-lang.org/inside-rust/2021/06/15/1.53.0-prelease.html</id>
        <content type="html" xml:base="https://blog.rust-lang.org/inside-rust/2021/06/15/1.53.0-prelease.html">&lt;p&gt;The 1.53.0 pre-release is ready for testing. The release is scheduled for this
Thursday, June 17th. &lt;a href&#x3D;&quot;https://github.com/rust-lang/rust/blob/master/RELEASES.md#version-1530-2021-06-17&quot;&gt;Release notes can be found here.&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;You can try it out locally by running:&lt;/p&gt;
&lt;pre&gt;&lt;code class&#x3D;&quot;language-plain&quot;&gt;RUSTUP_DIST_SERVER&#x3D;https://dev-static.rust-lang.org rustup update stable
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The index is &lt;a href&#x3D;&quot;https://dev-static.rust-lang.org/dist/2021-06-15/index.html&quot;&gt;https://dev-static.rust-lang.org/dist/2021-06-15/index.html&lt;/a&gt;. You
can leave feedback on the &lt;a href&#x3D;&quot;https://internals.rust-lang.org/t/1-53-0-prerelease-testing/14884&quot;&gt;internals thread&lt;/a&gt;.&lt;/p&gt;
</content>

        <author>
            <name>Mark Rousskov</name>
        </author>
    </entry>
    
    <entry>
        <title>Core Team Update: May 2021</title>
        <link rel="alternate" href="https://blog.rust-lang.org/inside-rust/2021/05/04/core-team-update.html" type="text/html" title="Core Team Update: May 2021" />
        <published>2021-05-04T00:00:00+00:00</published>
        <updated>2021-05-04T00:00:00+00:00</updated>
        <id>https://blog.rust-lang.org/inside-rust/2021/05/04/core-team-update.html</id>
        <content type="html" xml:base="https://blog.rust-lang.org/inside-rust/2021/05/04/core-team-update.html">&lt;p&gt;Hey everyone!  Back in August of last year, the core team wrote a blog post
titled &amp;quot;&lt;a href&#x3D;&quot;https://blog.rust-lang.org/2020/08/18/laying-the-foundation-for-rusts-future.html&quot;&gt;Laying the foundation for Rust&#x27;s Future&lt;/a&gt;.&amp;quot; Ever since then,
the Core Team has been doing a tremendous amount of work to help get the
foundation going, and prepare the project for the changes that have now
occurred because of these events.&lt;/p&gt;
&lt;p&gt;But that also means we&#x27;ve been very quiet!  This sort of work has largely
been focused inward, and not really something that&#x27;s visible from the
outside, even if you are on a Rust team.  However, thanks to these efforts,
the Foundation now exists, and is starting to work on its mission.  That also
means it&#x27;s time for the core team to shift the focus of its work.&lt;/p&gt;
&lt;p&gt;Beyond the Foundation efforts, we&#x27;ve also had several initiatives underway
that you may or may not know about:&lt;/p&gt;
&lt;h2&gt;&lt;a href&#x3D;&quot;#the-2021-roadmap&quot; aria-hidden&#x3D;&quot;true&quot; class&#x3D;&quot;anchor&quot; id&#x3D;&quot;the-2021-roadmap&quot;&gt;&lt;/a&gt;The 2021 Roadmap&lt;/h2&gt;
&lt;p&gt;The &lt;a href&#x3D;&quot;https://github.com/rust-lang/rfcs/pull/3037&quot;&gt;2021 Roadmap&lt;/a&gt; RFC was merged back in January.  This set the goals for
the core team for this year.  This is a bit different from previous years,
where we laid out goals for the entire project.  We decided this year to
focus on Core, and give the teams the leeway to set their own goals, while we
focused on overall organizational health.&lt;/p&gt;
&lt;p&gt;Later in the year, we&#x27;ll be starting the process for next year as well. We&#x27;re
not actively thinking about this yet, but ideally, a yearly roadmap would be
merged in December, rather than in January, so we want to make sure and begin
early enough to get this shipped on time for 2022.&lt;/p&gt;
&lt;h2&gt;&lt;a href&#x3D;&quot;#team-charters&quot; aria-hidden&#x3D;&quot;true&quot; class&#x3D;&quot;anchor&quot; id&#x3D;&quot;team-charters&quot;&gt;&lt;/a&gt;Team Charters&lt;/h2&gt;
&lt;p&gt;As part of that work, we&#x27;ve begun the first steps of a process to give each
team a formal charter.  Way back in &lt;a href&#x3D;&quot;https://github.com/rust-lang/rfcs/blob/master/text/1068-rust-governance.md&quot;&gt;RFC 1068&lt;/a&gt;, the scope of the initial
teams was laid out.  While that has served us well over the years, as teams
were spun up, shut down, and changed, we haven&#x27;t always done a good job of
making it clear where the boundaries of responsibility lie in each team.
Part of the magic in Rust&#x27;s governance structure is that individual teams are
given significant authority to do as they see fit, but that also means that
we have to be concious about scope. We&#x27;ll have more to report on this process
as it continues to unfold, but the end goal is stated in the roadmap:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The Rust teams, in concert with the core team, will work to establish a
charter for each of the Rust teams over the course of the year, with an aim
for defining, particularly, the purpose and membership requirements.  Our
goal is that going into 2022, all active groups within the Rust project will
have well-defined charters and membership.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Now is the time to redouble efforts here, and we are excited to work with all
of the teams on nailing these charters down. As a start, we&#x27;ve been working with
the Libs, Release, and Cargo teams for an initial pass at their charters. We&#x27;ve
structured this to be largely team-driven; we&#x27;re setting expectations and framing
what charters should look like, but the teams work on what goes in them. As this
progresses, we hope to learn more about the challenges involved so that we can
improve our process and bring in more teams.&lt;/p&gt;
&lt;p&gt;It&#x27;s worth pointing out explicitly that this work also includes the Core Team; we&#x27;ll
be creating a charter for ourselves as well.&lt;/p&gt;
&lt;h2&gt;&lt;a href&#x3D;&quot;#audit-of-packages-owned-by-the-project&quot; aria-hidden&#x3D;&quot;true&quot; class&#x3D;&quot;anchor&quot; id&#x3D;&quot;audit-of-packages-owned-by-the-project&quot;&gt;&lt;/a&gt;Audit of packages owned by the project&lt;/h2&gt;
&lt;p&gt;As another example of something the core team has been working on, we&#x27;ve been
doing work to clarify the status of a number of packages owned by the Rust team
on crates.io. We are conducting a full audit of these packages, making sure that
they&#x27;re things that should be owned by the project, making sure that they have
appropriate permissions, making sure that they have people taking care of them,
all of that kind of thing. Historically, we&#x27;ve been fairly ad-hoc about this sort
of thing, but as we grow, it is very imporant to be deliberate. An
&lt;a href&#x3D;&quot;https://github.com/rust-lang/rfcs/pull/3119&quot;&gt;RFC&lt;/a&gt; was just opened to create a policy here.&lt;/p&gt;
&lt;h2&gt;&lt;a href&#x3D;&quot;#thanks&quot; aria-hidden&#x3D;&quot;true&quot; class&#x3D;&quot;anchor&quot; id&#x3D;&quot;thanks&quot;&gt;&lt;/a&gt;Thanks!&lt;/h2&gt;
&lt;p&gt;So that&#x27;s a quick summary of what we&#x27;ve been up to, and some of what we&#x27;ll be
doing in the immediate future. We plan on trying to communicate what Core is working
on more often in the future; 2020 was an extremely complex year for a variety of
reasons, but we&#x27;re feeling really positive about the future of Core and the
Rust project generally. Thank you to the teams for all you&#x27;ve done for Rust.&lt;/p&gt;
</content>

        <author>
            <name>Steve Klabnik</name>
        </author>
    </entry>
    
    <entry>
        <title>1.52.0 pre-release testing</title>
        <link rel="alternate" href="https://blog.rust-lang.org/inside-rust/2021/05/04/1.52.0-prerelease.html" type="text/html" title="1.52.0 pre-release testing" />
        <published>2021-05-04T00:00:00+00:00</published>
        <updated>2021-05-04T00:00:01+00:00</updated>
        <id>https://blog.rust-lang.org/inside-rust/2021/05/04/1.52.0-prerelease.html</id>
        <content type="html" xml:base="https://blog.rust-lang.org/inside-rust/2021/05/04/1.52.0-prerelease.html">&lt;p&gt;The 1.52.0 pre-release is ready for testing. The release is scheduled for this
Thursday, May 6th. &lt;a href&#x3D;&quot;https://github.com/rust-lang/rust/blob/stable/RELEASES.md#version-1520-2021-05-06&quot;&gt;Release notes can be found here.&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;You can try it out locally by running:&lt;/p&gt;
&lt;pre&gt;&lt;code class&#x3D;&quot;language-plain&quot;&gt;RUSTUP_DIST_SERVER&#x3D;https://dev-static.rust-lang.org rustup update stable
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The index is &lt;a href&#x3D;&quot;https://dev-static.rust-lang.org/dist/2021-05-04/index.html&quot;&gt;https://dev-static.rust-lang.org/dist/2021-05-04/index.html&lt;/a&gt;. You
can leave feedback on the &lt;a href&#x3D;&quot;https://internals.rust-lang.org/t/1-52-0-prerelease-testing&quot;&gt;internals thread&lt;/a&gt;.&lt;/p&gt;
</content>

        <author>
            <name>Pietro Albini</name>
        </author>
    </entry>
    
    <entry>
        <title>Rustup 1.24.0 release incident report for 2021-04-27</title>
        <link rel="alternate" href="https://blog.rust-lang.org/inside-rust/2021/04/28/rustup-1.24.0-incident-report.html" type="text/html" title="Rustup 1.24.0 release incident report for 2021-04-27" />
        <published>2021-04-28T00:00:00+00:00</published>
        <updated>2021-04-28T00:00:00+00:00</updated>
        <id>https://blog.rust-lang.org/inside-rust/2021/04/28/rustup-1.24.0-incident-report.html</id>
        <content type="html" xml:base="https://blog.rust-lang.org/inside-rust/2021/04/28/rustup-1.24.0-incident-report.html">&lt;p&gt;On 2021-04-27 at 15:09 UTC we released a new version of Rustup (1.24.0). At
15:23 UTC we received a report that we had introduced a regression in the part
of the code which is responsible for proxying the &lt;code&gt;rustfmt&lt;/code&gt; and &lt;code&gt;cargo-fmt&lt;/code&gt;
portions of Rust toolchains. At 15:27 UTC we had confirmed and identified the
cause of the problem, and while we worked on a fix, we reverted the released
Rustup to version 1.23.1 - an action completed by 15:56 UTC.&lt;/p&gt;
&lt;p&gt;This means that for approximately 47 minutes, CI jobs which used the code
formatting features of Rust toolchains may have had spurious failures, and users
who upgraded will have had to revert to 1.23.1. The revert process is designed
to be as easy as upgrading was, meaning that users should not have had lingering
issues.&lt;/p&gt;
&lt;h2&gt;&lt;a href&#x3D;&quot;#root-cause-of-the-issue&quot; aria-hidden&#x3D;&quot;true&quot; class&#x3D;&quot;anchor&quot; id&#x3D;&quot;root-cause-of-the-issue&quot;&gt;&lt;/a&gt;Root cause of the issue&lt;/h2&gt;
&lt;p&gt;In an effort to
&lt;a href&#x3D;&quot;https://github.com/rust-lang/rustup/issues/2286&quot;&gt;reduce confusion when downloaded copies of &lt;code&gt;rustup-init.exe&lt;/code&gt;are renamed&lt;/a&gt;
we merged a change which causes Rustup to report an error if an unknown name is
used when invoking the binary.&lt;/p&gt;
&lt;p&gt;Due to past complexities with &lt;code&gt;rustfmt&lt;/code&gt; and &lt;code&gt;cargo-fmt&lt;/code&gt; being binaries which
tended to be distributed by &lt;code&gt;cargo install&lt;/code&gt; rather than via
&lt;code&gt;rustup component add&lt;/code&gt; there is some intricate handling in Rustup&#x27;s proxy
management for those specific binaries. The fix for the above issue failed to
include these corner case proxies in the check it undertook to ensure the caller
hadn&#x27;t used an unexpected binary name.&lt;/p&gt;
&lt;p&gt;The 1.24.0 release had been staged at this point, however there was a problem
with the low-memory installation pathways which required a fix, and at the time
we incorrectly assessed that it was low-impact to rebase the release onto the
new master branch which had not only the fix for the low-memory installation
pathway but also the &amp;quot;refuse bad names&amp;quot; change for the above issue.&lt;/p&gt;
&lt;p&gt;Subsequent testing of the release focussed almost entirely on the installation
pathways, omitting to validate the proxy name verification code we had also
acquired into the release. As a result, this regression slipped in.&lt;/p&gt;
&lt;h2&gt;&lt;a href&#x3D;&quot;#resolution&quot; aria-hidden&#x3D;&quot;true&quot; class&#x3D;&quot;anchor&quot; id&#x3D;&quot;resolution&quot;&gt;&lt;/a&gt;Resolution&lt;/h2&gt;
&lt;p&gt;The author of the validation PR correctly identified it as the root-cause of
the regression, and the team discussed and decided that it was better to fix
the problem properly than to simply revert the change out of the release.&lt;/p&gt;
&lt;p&gt;The release team member who was helping with the release process began the
revert to Rustup 1.23.1 while the fixes were developed. In addition an issue
was filed around adding some tests around all the proxies (we currently test a
subset which we believed to be representative). We subsequently staged a
proposed 1.24.1 release to Rust&#x27;s development stage and we have issued a &lt;a href&#x3D;&quot;https://internals.rust-lang.org/t/seeking-beta-testers-for-rustup-1-24-1/14582&quot;&gt;call
for beta testers&lt;/a&gt; to confirm that we have not introduced any other
regressions.&lt;/p&gt;
&lt;h2&gt;&lt;a href&#x3D;&quot;#lessons-learned&quot; aria-hidden&#x3D;&quot;true&quot; class&#x3D;&quot;anchor&quot; id&#x3D;&quot;lessons-learned&quot;&gt;&lt;/a&gt;Lessons learned&lt;/h2&gt;
&lt;p&gt;The big lesson here is that while we&#x27;ve taken similar notes away from past
releases of Rustup and other tooling, we&#x27;ve not yet managed to set up a proper
beta-testing process for Rustup. As such we will be making changes to the
Rustup release process to codify testing phases with the wider community.&lt;/p&gt;
&lt;h2&gt;&lt;a href&#x3D;&quot;#long-term-changes-to-rustup-releases&quot; aria-hidden&#x3D;&quot;true&quot; class&#x3D;&quot;anchor&quot; id&#x3D;&quot;long-term-changes-to-rustup-releases&quot;&gt;&lt;/a&gt;Long term changes to Rustup releases&lt;/h2&gt;
&lt;p&gt;In order to try and reduce the chance of this happening again, the &lt;a href&#x3D;&quot;https://github.com/rust-lang/rustup/blob/master/CONTRIBUTING.md#making-a-release&quot;&gt;release
process&lt;/a&gt; will be updated to include a public beta-testing phase for any non-
purely-bugfix release and we intend to look into the possibility of a &amp;quot;nightly&amp;quot;
Rustup release for a &lt;em&gt;small&lt;/em&gt; subset of platforms.&lt;/p&gt;
&lt;p&gt;Finally we are hoping to work with the &lt;a href&#x3D;&quot;https://www.rust-lang.org/governance/teams/release&quot;&gt;release team&lt;/a&gt; to do what we can to
unify the Rustup release process with the well oiled Rust release process
though, due to the historical differences in how Rustup has been released, this
will likely be a long term effort.&lt;/p&gt;
&lt;h2&gt;&lt;a href&#x3D;&quot;#action-items&quot; aria-hidden&#x3D;&quot;true&quot; class&#x3D;&quot;anchor&quot; id&#x3D;&quot;action-items&quot;&gt;&lt;/a&gt;Action items&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://github.com/rust-lang/rustup/issues/2739&quot;&gt;#2739&lt;/a&gt;: Testing for proxying, including TOOLS and DUP_TOOLS&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://github.com/rust-lang/rustup/issues/2741&quot;&gt;#2741&lt;/a&gt;: Release process should include explicit beta test period&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;And as mentioned above, longer term we shall look to see what unification we can
do between releasing Rustup and how the Rust release train runs.&lt;/p&gt;
</content>

        <author>
            <name>Daniel Silverstone</name>
        </author>
    </entry>
    
    <entry>
        <title>Congrats to compiler team member Aaron Hill</title>
        <link rel="alternate" href="https://blog.rust-lang.org/inside-rust/2021/04/26/aaron-hill-compiler-team.html" type="text/html" title="Congrats to compiler team member Aaron Hill" />
        <published>2021-04-26T00:00:00+00:00</published>
        <updated>2021-04-26T00:00:00+00:00</updated>
        <id>https://blog.rust-lang.org/inside-rust/2021/04/26/aaron-hill-compiler-team.html</id>
        <content type="html" xml:base="https://blog.rust-lang.org/inside-rust/2021/04/26/aaron-hill-compiler-team.html">&lt;p&gt;I am pleased to announce that &lt;a href&#x3D;&quot;https://github.com/aaron1011&quot;&gt;Aaron Hill&lt;/a&gt; has been made a full member of the &lt;a href&#x3D;&quot;https://www.rust-lang.org/governance/teams/compiler&quot;&gt;compiler team&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Aaron Hill (&lt;a href&#x3D;&quot;https://github.com/aaron1011&quot;&gt;@Aaron1011&lt;/a&gt;) has been contributing to many different parts of the compiler since his start in 2017.
Recently, Aaron has been working on finding and fixing bugs and correctness issues in the incremental system, cleanups and improvements to macro expansion and hygiene, as well as miscellaneous bug fixes.
Beyond the compiler, Aaron has also implemented support for &lt;a href&#x3D;&quot;https://github.com/rust-lang/rust/pull/60026&quot;&gt;unwinding in Miri&lt;/a&gt;, &lt;a href&#x3D;&quot;https://github.com/rust-lang/rust/pull/47833&quot;&gt;generating documentation for auto-traits&lt;/a&gt;, and &lt;a href&#x3D;&quot;https://github.com/rust-lang/cargo/pull/8825&quot;&gt;future incompatibility reporting in Cargo&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Congratulations Aaron and thanks for all of your contributions to the project!&lt;/p&gt;
</content>

        <author>
            <name>Wesley Wiser</name>
        </author>
    </entry>
    
    <entry>
        <title>Jacob Hoffman-Andrews joins the Rustdoc team</title>
        <link rel="alternate" href="https://blog.rust-lang.org/inside-rust/2021/04/20/jsha-rustdoc-member.html" type="text/html" title="Jacob Hoffman-Andrews joins the Rustdoc team" />
        <published>2021-04-20T00:00:00+00:00</published>
        <updated>2021-04-20T00:00:00+00:00</updated>
        <id>https://blog.rust-lang.org/inside-rust/2021/04/20/jsha-rustdoc-member.html</id>
        <content type="html" xml:base="https://blog.rust-lang.org/inside-rust/2021/04/20/jsha-rustdoc-member.html">&lt;p&gt;Hello everyone, please welcome &lt;a href&#x3D;&quot;https://github.com/jsha&quot;&gt;Jacob Hoffman-Andrews&lt;/a&gt; to the rustdoc team!&lt;/p&gt;
&lt;p&gt;Jacob Hoffman-Andrews (&lt;a href&#x3D;&quot;https://github.com/jsha&quot;&gt;@jsha&lt;/a&gt;) has been contributing a lot on rustdoc front-end. Thanks to him, the pageload of the rustdoc pages is much faster. Here is a non-exhaustive list of the stuff he&#x27;s done recently:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The huge search index is now only loaded &lt;a href&#x3D;&quot;https://github.com/rust-lang/rust/pull/82310&quot;&gt;when needed&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;The pageload has &lt;a href&#x3D;&quot;https://github.com/rust-lang/rust/pull/82315&quot;&gt;has been optimized a bunch&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Rustdoc&#x27;s show/hide toggles &lt;a href&#x3D;&quot;https://github.com/rust-lang/rust/issues/83332&quot;&gt;are being converted to pure HTML&lt;/a&gt;, reducing complexity and improving pageload performance.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;And this is just an overview!&lt;/p&gt;
&lt;p&gt;We are really happy to have Jacob joining us, so thanks a lot for your work and congratulations!&lt;/p&gt;
</content>

        <author>
            <name>Guillaume Gomez</name>
        </author>
    </entry>
    
    <entry>
        <title>Lang team April update</title>
        <link rel="alternate" href="https://blog.rust-lang.org/inside-rust/2021/04/17/lang-team-apr-update.html" type="text/html" title="Lang team April update" />
        <published>2021-04-17T00:00:00+00:00</published>
        <updated>2021-04-17T00:00:00+00:00</updated>
        <id>https://blog.rust-lang.org/inside-rust/2021/04/17/lang-team-apr-update.html</id>
        <content type="html" xml:base="https://blog.rust-lang.org/inside-rust/2021/04/17/lang-team-apr-update.html">&lt;p&gt;This week the lang team held its April planning meeting (&lt;a href&#x3D;&quot;https://github.com/rust-lang/lang-team/blob/master/design-meeting-minutes/2021-04-14-Planning-Meeting.md&quot;&gt;minutes&lt;/a&gt;). We normally hold these meetings on the first Wednesday of every month, but this month we were delayed by one week due to scheduling conflicts.&lt;/p&gt;
&lt;p&gt;The planning meeting is used for:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Checking in on the status of our active projects&lt;/li&gt;
&lt;li&gt;Planning the design meetings for the remainder of the month&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;After each meeting, we post an update (like this one!) with notes and meeting announcements.&lt;/p&gt;
&lt;h2&gt;&lt;a href&#x3D;&quot;#update-from-active-projects&quot; aria-hidden&#x3D;&quot;true&quot; class&#x3D;&quot;anchor&quot; id&#x3D;&quot;update-from-active-projects&quot;&gt;&lt;/a&gt;Update from active projects&lt;/h2&gt;
&lt;p&gt;Did you know that you can see the lang team&#x27;s active projects on our &lt;a href&#x3D;&quot;https://github.com/rust-lang/lang-team/projects/2&quot;&gt;project board&lt;/a&gt;? We&#x27;re still experimenting and evolving the setup, but the goal is that it should give you a quick overview of what kinds of things the lang team is focused on, and what stage they are in their development.&lt;/p&gt;
&lt;p&gt;The minutes contain &lt;a href&#x3D;&quot;https://github.com/rust-lang/lang-team/blob/master/design-meeting-minutes/2021-04-14-Planning-Meeting.md#updates-from-active-groups-and-projects&quot;&gt;links the tracking issues for each project&lt;/a&gt; and those issues contain status reports. Here are some interesting updates:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://github.com/rust-lang/lang-team/issues/60#issuecomment-814509681&quot;&gt;never type update&lt;/a&gt;:
&lt;ul&gt;
&lt;li&gt;we have a general plan for hybrid fallback that we think will allow us to stabilize &lt;code&gt;!&lt;/code&gt; at long last without breaking existing crates&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://github.com/rust-lang/lang-team/issues/50#issuecomment-814526085&quot;&gt;improved closure capture (RFC 2229)&lt;/a&gt;:
&lt;ul&gt;
&lt;li&gt;implementation is working quite well and migration is nearly implemented also&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://github.com/rust-lang/lang-team/issues/19#issuecomment-814581675&quot;&gt;ffi-unwind&lt;/a&gt;:
&lt;ul&gt;
&lt;li&gt;C-unwind implementation has landed&lt;/li&gt;
&lt;li&gt;there is some ongoing work to fix some bugs in the initial implementation&lt;/li&gt;
&lt;li&gt;looking at potentially moving to considering setjmp/longjmp&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://github.com/rust-lang/rust/pull/83386#issuecomment-819719603&quot;&gt;nested pattern stabilization&lt;/a&gt; has almost completed&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href&#x3D;&quot;#upcoming-design-meetings&quot; aria-hidden&#x3D;&quot;true&quot; class&#x3D;&quot;anchor&quot; id&#x3D;&quot;upcoming-design-meetings&quot;&gt;&lt;/a&gt;Upcoming design meetings&lt;/h2&gt;
&lt;p&gt;We planned two design meetings for April. Our meetings are open for anyone to join and observe. They are also typically recorded and posted to YouTube. Ping nikomatsakis or joshtriplett for info about attending.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;April 21 -- proposed &amp;quot;wasm&amp;quot; ABI (&lt;a href&#x3D;&quot;https://github.com/rust-lang/lang-team/issues/90&quot;&gt;lang-team#90&lt;/a&gt;), featuring special guest Alex Crichton&lt;/li&gt;
&lt;li&gt;April 28 -- generators (&lt;a href&#x3D;&quot;https://github.com/rust-lang/lang-team/issues/92&quot;&gt;lang-team#92&lt;/a&gt;), featuring special guest Esteban Küber&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href&#x3D;&quot;#design-meeting-expectations&quot; aria-hidden&#x3D;&quot;true&quot; class&#x3D;&quot;anchor&quot; id&#x3D;&quot;design-meeting-expectations&quot;&gt;&lt;/a&gt;Design meeting expectations&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;The document for the meeting must be prepared by the triage meeting on Tuesday and posted to the tracking issue.
&lt;ul&gt;
&lt;li&gt;If it is not sent out by then, the meeting will be canceled. This gives folks 24 hour notice.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;There is no expectation that people will read the document before the meeting. The meeting will begin with a recap of the document.
&lt;ul&gt;
&lt;li&gt;However, there is no rule &lt;strong&gt;against&lt;/strong&gt; reading the document beforehand and providing feedback or advice on how to improve it.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
</content>

        <author>
            <name>Niko Matsakis</name>
        </author>
    </entry>
    
    <entry>
        <title>Rust Compiler April Steering Cycle</title>
        <link rel="alternate" href="https://blog.rust-lang.org/inside-rust/2021/04/15/compiler-team-april-steering-cycle.html" type="text/html" title="Rust Compiler April Steering Cycle" />
        <published>2021-04-15T00:00:00+00:00</published>
        <updated>2021-04-15T00:00:00+00:00</updated>
        <id>https://blog.rust-lang.org/inside-rust/2021/04/15/compiler-team-april-steering-cycle.html</id>
        <content type="html" xml:base="https://blog.rust-lang.org/inside-rust/2021/04/15/compiler-team-april-steering-cycle.html">&lt;p&gt;On &lt;a href&#x3D;&quot;https://zulip-archive.rust-lang.org/238009tcompilermeetings/96901planningmeeting20210409.html&quot;&gt;Friday, April 9th&lt;/a&gt;, the Rust Compiler team had a planning meeting for the April steering cycle.&lt;/p&gt;
&lt;p&gt;Every fourth Friday, the Rust compiler team decides how
it is going to use its scheduled steering and design meeting time over the next
three Fridays.&lt;/p&gt;
&lt;p&gt;On Friday, 23 April 2021, we will be having a meeting to discuss a
set of proposed &lt;a href&#x3D;&quot;https://github.com/rust-lang/compiler-team/issues/424&quot;&gt;guiding principles&lt;/a&gt; for compiler contributors.&lt;/p&gt;
&lt;p&gt;On Friday, 30 April 2021, we will be having a meeting to discuss the
process used for weekly compiler &lt;a href&#x3D;&quot;https://github.com/rust-lang/compiler-team/issues/400&quot;&gt;performance triage&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Both meetings will run from 2pm to 3pm GMT, and will take place on the
&lt;a href&#x3D;&quot;https://rust-lang.zulipchat.com/#narrow/stream/238009-t-compiler.2Fmeetings&quot;&gt;T-compiler/meetings zulip stream&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;(Also: we neglected to post an announcement at the outset of the March steering
cycle. In March we had two meetings: the first was a &lt;a href&#x3D;&quot;https://github.com/rust-lang/compiler-team/issues/412&quot;&gt;retrospective&lt;/a&gt; on the
memshrink development sprint that we had over the first week of March, and the
second was a meeting to &lt;a href&#x3D;&quot;https://github.com/rust-lang/compiler-team/issues/416&quot;&gt;discuss&lt;/a&gt; the static vs dynamic linking
defaults for our musl libc targets.)&lt;/p&gt;
</content>

        <author>
            <name>Felix Klock</name>
        </author>
    </entry>
    
    <entry>
        <title>Core Team updates</title>
        <link rel="alternate" href="https://blog.rust-lang.org/inside-rust/2021/04/03/core-team-updates.html" type="text/html" title="Core Team updates" />
        <published>2021-04-03T00:00:00+00:00</published>
        <updated>2021-04-03T00:00:00+00:00</updated>
        <id>https://blog.rust-lang.org/inside-rust/2021/04/03/core-team-updates.html</id>
        <content type="html" xml:base="https://blog.rust-lang.org/inside-rust/2021/04/03/core-team-updates.html">&lt;p&gt;Niko Matsakis is &lt;a href&#x3D;&quot;https://smallcultfollowing.com/babysteps/blog/2021/04/02/my-shiny-future/&quot;&gt;stepping back&lt;/a&gt; from the &lt;a href&#x3D;&quot;https://www.rust-lang.org/governance/teams/core&quot;&gt;Core Team&lt;/a&gt;,
focusing his energy on leading the &lt;a href&#x3D;&quot;https://www.rust-lang.org/governance/teams/lang&quot;&gt;Language Team&lt;/a&gt;. Amongst the many
things he has done for the Rust project over the years, Niko has been part of
the Core Team since the beginning, and had a key role in shaping Rust’s
governance. We’re all excited to see what his new focus is going to bring!&lt;/p&gt;
&lt;p&gt;Thanks Niko!&lt;/p&gt;
</content>

        <author>
            <name>Pietro Albini</name>
        </author>
    </entry>
    
</feed>

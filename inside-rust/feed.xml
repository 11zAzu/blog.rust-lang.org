<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
    <generator uri="https://blog.rust-lang.org/inside-rust/" version="0.1.0">Inside Rust Blog</generator>
    <link href="https://blog.rust-lang.org/inside-rust/feed.xml" rel="self" type="application/atom+xml" />
    <link href="https://blog.rust-lang.org/inside-rust/" rel="alternate" type="text/html" />
    <id>https://blog.rust-lang.org/inside-rust/</id>
    <title>Inside Rust Blog</title>
    <subtitle>Want to follow along with Rust development? Curious how you might get involved? Take a look!</subtitle>
    <author>
        <name>Maintained by the Rust Teams.</name>
        <uri>https://github.com/rust-lang/blog.rust-lang.org/</uri>
    </author>
    <updated>2022-04-12T13:42:22+00:00</updated>

    
    <entry>
        <title>CTCFT 2022-04-18 Agenda</title>
        <link rel="alternate" href="https://blog.rust-lang.org/inside-rust/2022/04/12/CTCFT-april.html" type="text/html" title="CTCFT 2022-04-18 Agenda" />
        <published>2022-04-12T00:00:00+00:00</published>
        <updated>2022-04-12T00:00:00+00:00</updated>
        <id>https://blog.rust-lang.org/inside-rust/2022/04/12/CTCFT-april.html</id>
        <content type="html" xml:base="https://blog.rust-lang.org/inside-rust/2022/04/12/CTCFT-april.html">&lt;p&gt;The next &lt;a href&#x3D;&quot;https://rust-lang.github.io/ctcft/&quot;&gt;&amp;quot;Cross Team Collaboration Fun Times&amp;quot; (CTCFT)&lt;/a&gt; meeting will take
place on Monday, 2022-04-18 at &lt;strong&gt;9pm US Eastern Time&lt;/strong&gt; (&lt;a href&#x3D;&quot;https://everytimezone.com/s/497ef0a9&quot;&gt;click to see in your
time zone&lt;/a&gt;). You’ll find the full details (along with a calendar
event, zoom details, etc) &lt;a href&#x3D;&quot;https://rust-lang.github.io/ctcft/meetings/2022-04-18.html&quot;&gt;on the CTCFT website&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;&lt;a href&#x3D;&quot;#agenda&quot; aria-hidden&#x3D;&quot;true&quot; class&#x3D;&quot;anchor&quot; id&#x3D;&quot;agenda&quot;&gt;&lt;/a&gt;Agenda&lt;/h2&gt;
&lt;p&gt;The theme of April&#x27;s CTCFT is &amp;quot;learning&amp;quot;. Doc Jones will speak about the Rustc
Reading Club Phase II, and what was learned from the first iteration of the
club. Jon Gjengset will talk about teaching advanced Rust concepts.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;(5 min) Opening remarks 👋 ([angelonfira])&lt;/li&gt;
&lt;li&gt;(15 min) Rustc Reading Club Phase II ([doc-jones])&lt;/li&gt;
&lt;li&gt;(15 min) Teaching Advanced Rust ([jonhoo])&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href&#x3D;&quot;#afterwards-social-hour&quot; aria-hidden&#x3D;&quot;true&quot; class&#x3D;&quot;anchor&quot; id&#x3D;&quot;afterwards-social-hour&quot;&gt;&lt;/a&gt;Afterwards: Social Hour&lt;/h2&gt;
&lt;p&gt;Like always, we&#x27;ll be running a social hour after the CTCFT. The idea is really
simple: for the hour after the meeting, we will create breakout rooms in Zoom
with different themes. You can join any breakout room you like and hangout.&lt;/p&gt;
</content>

        <author>
            <name>Rust CTCFT Team</name>
        </author>
    </entry>
    
    <entry>
        <title>Lang team April update</title>
        <link rel="alternate" href="https://blog.rust-lang.org/inside-rust/2022/04/06/lang-team-april-update.html" type="text/html" title="Lang team April update" />
        <published>2022-04-06T00:00:00+00:00</published>
        <updated>2022-04-06T00:00:00+00:00</updated>
        <id>https://blog.rust-lang.org/inside-rust/2022/04/06/lang-team-april-update.html</id>
        <content type="html" xml:base="https://blog.rust-lang.org/inside-rust/2022/04/06/lang-team-april-update.html">&lt;p&gt;Today, the lang team held its April planning meeting. We hold these meetings on the first Wednesday of every month, and we use them to schedule &lt;a href&#x3D;&quot;https://lang-team.rust-lang.org/meetings/design.html&quot;&gt;design meetings&lt;/a&gt; for the remainder of the month.&lt;/p&gt;
&lt;h2&gt;&lt;a href&#x3D;&quot;#upcoming-design-meetings&quot; aria-hidden&#x3D;&quot;true&quot; class&#x3D;&quot;anchor&quot; id&#x3D;&quot;upcoming-design-meetings&quot;&gt;&lt;/a&gt;Upcoming design meetings&lt;/h2&gt;
&lt;p&gt;We have planned the following design meetings:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;2021-04-13: &lt;a href&#x3D;&quot;https://github.com/rust-lang/lang-team/issues/152&quot;&gt;Implied bounds and perfect derive&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;2021-04-20: &lt;a href&#x3D;&quot;https://github.com/rust-lang/lang-team/issues/155&quot;&gt;Language design research overview&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;2021-04-27: &lt;a href&#x3D;&quot;https://lang-team.rust-lang.org/meetings/backlog-bonanza.html&quot;&gt;Backlog Bonanza&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href&#x3D;&quot;#design-meeting-expectations&quot; aria-hidden&#x3D;&quot;true&quot; class&#x3D;&quot;anchor&quot; id&#x3D;&quot;design-meeting-expectations&quot;&gt;&lt;/a&gt;Design meeting expectations&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;The document for the meeting must be prepared by the triage meeting on Tuesday and posted to the tracking issue.
&lt;ul&gt;
&lt;li&gt;If it is not sent out by then, the meeting will be replaced with a &lt;a href&#x3D;&quot;https://lang-team.rust-lang.org/meetings/backlog-bonanza.html&quot;&gt;Backlog Bonanza&lt;/a&gt; session. This gives folks 24 hour notice.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;There is no expectation that people will read the document before the meeting. The meeting will begin with a recap of the document.
&lt;ul&gt;
&lt;li&gt;However, there is no rule &lt;strong&gt;against&lt;/strong&gt; reading the document beforehand and providing feedback or advice on how to improve it.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
</content>

        <author>
            <name>Josh Triplett</name>
        </author>
    </entry>
    
    <entry>
        <title>Rust Lang Roadmap for 2024</title>
        <link rel="alternate" href="https://blog.rust-lang.org/inside-rust/2022/04/04/lang-roadmap-2024.html" type="text/html" title="Rust Lang Roadmap for 2024" />
        <published>2022-04-04T00:00:00+00:00</published>
        <updated>2022-04-04T00:00:00+00:00</updated>
        <id>https://blog.rust-lang.org/inside-rust/2022/04/04/lang-roadmap-2024.html</id>
        <content type="html" xml:base="https://blog.rust-lang.org/inside-rust/2022/04/04/lang-roadmap-2024.html">&lt;p&gt;Note: this blog post is a snapshot of the living roadmap at
&lt;a href&#x3D;&quot;https://lang-team.rust-lang.org/roadmaps/roadmap-2024.html&quot;&gt;https://lang-team.rust-lang.org/roadmaps/roadmap-2024.html&lt;/a&gt;. Subsequent
changes may occur in that version, but not in this blog post. Please see that
page for the most up-to-date version.&lt;/p&gt;
&lt;h1&gt;&lt;a href&#x3D;&quot;#lang-team-roadmap-2024&quot; aria-hidden&#x3D;&quot;true&quot; class&#x3D;&quot;anchor&quot; id&#x3D;&quot;lang-team-roadmap-2024&quot;&gt;&lt;/a&gt;Lang Team Roadmap 2024&lt;/h1&gt;
&lt;p&gt;Rust 1.0 was released in 2015. Since that time, we&#x27;ve seen Rust grow from a
small language used for a handful of prominent projects into a mainstay in use
at virtually every major tech company.&lt;/p&gt;
&lt;p&gt;As we work towards Rust 2024, it&#x27;s natural to ask what&#x27;s next for the language.
This roadmap provides insight into that question by describing what we, as
members of the lang team with input from other Rust teams, would like to
prioritize.&lt;/p&gt;
&lt;p&gt;We have two goals with this roadmap:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;to give people a sense for what to expect in Rust over the next few years;&lt;/li&gt;
&lt;li&gt;for those who would like to contribute to Rust, to help provide &amp;quot;starting
points&amp;quot; for how to get involved, and a sense for what kind of projects we are
looking for.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Also see the &lt;a href&#x3D;&quot;https://blog.rust-lang.org/inside-rust/2022/02/22/compiler-team-ambitions-2022.html&quot;&gt;Rust Compiler Ambitions for
2022&lt;/a&gt;,
for plans from the Rust Compiler team, and watch the Inside Rust blog for the
upcoming roadmap from the Rust Library team.&lt;/p&gt;
&lt;h2&gt;&lt;a href&#x3D;&quot;#rust-2024-scaling-empowerment&quot; aria-hidden&#x3D;&quot;true&quot; class&#x3D;&quot;anchor&quot; id&#x3D;&quot;rust-2024-scaling-empowerment&quot;&gt;&lt;/a&gt;Rust 2024: scaling empowerment&lt;/h2&gt;
&lt;p&gt;Rust&#x27;s goal is to &lt;strong&gt;empower everyone to build reliable and efficient
software&lt;/strong&gt;. Success requires not only designing and implementing a great
language with great libraries and great tools, but also maintaining a great and
supportive community.&lt;/p&gt;
&lt;p&gt;Our focus for Rust 2024 is to &lt;strong&gt;scale empowerment&lt;/strong&gt; in many different ways. As
we grow, we face increasing challenges in how we can scale the ways in which we
empower people to an increasing number of people. This roadmap presents three
general themes we plan to focus on:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href&#x3D;&quot;#Theme-Flatten-the-learning-curve&quot;&gt;Flatten the (learning) curve&lt;/a&gt;&lt;/strong&gt;:
scaling to new users and new use cases
&lt;ul&gt;
&lt;li&gt;Make Rust more accessible to new and existing users alike, and make
solving hard problems easier.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href&#x3D;&quot;#Theme-Help-users-help-each-other&quot;&gt;Help Rust&#x27;s users help each other&lt;/a&gt;&lt;/strong&gt;:
scaling the ecosystem
&lt;ul&gt;
&lt;li&gt;Empower library authors so they can---in turn---empower their users.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href&#x3D;&quot;#Theme-Help-the-Rust-project-scale&quot;&gt;Help the Rust project scale&lt;/a&gt;&lt;/strong&gt;:
scaling the project
&lt;ul&gt;
&lt;li&gt;Develop processes to scale to the needs and use cases of a growing number
of users; evaluate and finish projects we&#x27;ve started.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For each theme, we&#x27;ll describe our goals for Rust 2024, and give a few examples
of the kinds of things that we&#x27;re working on right now, as well as the kinds of
things we would like to do over the next few years.&lt;/p&gt;
&lt;p&gt;This roadmap is a starting point. Our intent is to highlight those areas that
will have the biggest impact on Rust&#x27;s success. Specific examples will change
over time, whether because they&#x27;re finished or because new proposals arise. As
2023 approaches, we will revisit these themes to see how much progress we have
made, and whether we wish to adjust the list.&lt;/p&gt;
&lt;h2&gt;&lt;a href&#x3D;&quot;#theme-flatten-the-learning-curve&quot; aria-hidden&#x3D;&quot;true&quot; class&#x3D;&quot;anchor&quot; id&#x3D;&quot;theme-flatten-the-learning-curve&quot;&gt;&lt;/a&gt;Theme: Flatten the (learning) curve&lt;/h2&gt;
&lt;h3&gt;&lt;a href&#x3D;&quot;#the-vision&quot; aria-hidden&#x3D;&quot;true&quot; class&#x3D;&quot;anchor&quot; id&#x3D;&quot;the-vision&quot;&gt;&lt;/a&gt;The vision&lt;/h3&gt;
&lt;p&gt;Thanks to a consistent focus on ergonomics, Rust has become considerably easier
to use over the last few years. Companies building large teams of Rust users
report that the typical onboarding time for a Rust engineer is around 3-6
months. Once folks learn Rust, they typically love it. Even so, many people
report a sense of high &amp;quot;cognitive overhead&amp;quot; in using it, and &amp;quot;learning curve&amp;quot;
remains the most common reason not to use Rust. The fact is that, even after
you learn how the Rust borrow checker works, there remain a lot of &amp;quot;small
details&amp;quot; that you have to get just right to get your Rust program to compile.&lt;/p&gt;
&lt;p&gt;For Rust 2024, we will identify and eliminate many of those patterns and
idiosyncracies that one must learn to use Rust; our goal is to let you focus
squarely on the &amp;quot;inherent complexity&amp;quot; of your problem domain and avoid
&amp;quot;accidental complexity&amp;quot; from Rust as much as possible.&lt;/p&gt;
&lt;p&gt;Async and embedded Rust are areas of particular interest. We have made a lot of
strides to support those areas, and they are growing rapidly. Nonetheless, Rust
lacks many core capabilities that would be required to make working in those
domains not only &lt;em&gt;possible&lt;/em&gt; but &lt;em&gt;straightforward and delightful&lt;/em&gt;. For Rust
2024, we will close that gap.&lt;/p&gt;
&lt;p&gt;Our plan for achieving this vision is to focus on four high-level goals (in
order from broad to precise):&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;More precise analyses, less rigamarole:&lt;/strong&gt; Make the compiler better able to
recognize when code is correct via improvements to the borrow checker, type
inference, and so forth. Identify and eliminate &amp;quot;boilerplate&amp;quot; patterns like
having to copy-and-paste the same set of where clauses everywhere.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Express yourself more easily:&lt;/strong&gt; Where necessary, extend the language so you
can express what you want your code to do more directly. In some cases this
takes the form of syntactic sugar (such as
&lt;a href&#x3D;&quot;https://github.com/rust-lang/rust/issues/87335&quot;&gt;let-else&lt;/a&gt;) but in other
cases it may mean extending the type system to be able to describe new
patterns (such as &lt;a href&#x3D;&quot;https://rust-lang.github.io/generic-associated-types-initiative/&quot;&gt;generic associated
types&lt;/a&gt;).&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Improve async support:&lt;/strong&gt; Extend our async-await support beyond the current
&amp;quot;MVP&amp;quot; to include features like async fns in traits, async drop, and other
features needed to support the &lt;a href&#x3D;&quot;https://rust-lang.github.io/wg-async/vision/roadmap.html&quot;&gt;async vision
document&lt;/a&gt; roadmap.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Make &lt;code&gt;dyn Trait&lt;/code&gt; more usable:&lt;/strong&gt; Broaden the set of traits that can be used
with &lt;code&gt;dyn&lt;/code&gt; and make working with &lt;code&gt;dyn&lt;/code&gt; closer to working with generics.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a href&#x3D;&quot;#how-you-can-help&quot; aria-hidden&#x3D;&quot;true&quot; class&#x3D;&quot;anchor&quot; id&#x3D;&quot;how-you-can-help&quot;&gt;&lt;/a&gt;How you can help&lt;/h3&gt;
&lt;p&gt;Join the rust-lang Zulip, and either start a thread in the
&lt;a href&#x3D;&quot;https://rust-lang.zulipchat.com/#narrow/stream/318377-t-lang.2Froadmap-2024&quot;&gt;&lt;code&gt;#t-lang/roadmap-2024&lt;/code&gt;&lt;/a&gt;
stream, or send a private message to nikomatsakis if you&#x27;d like to discuss
privately first.&lt;/p&gt;
&lt;h3&gt;&lt;a href&#x3D;&quot;#the-plan-so-far&quot; aria-hidden&#x3D;&quot;true&quot; class&#x3D;&quot;anchor&quot; id&#x3D;&quot;the-plan-so-far&quot;&gt;&lt;/a&gt;The plan (so far)&lt;/h3&gt;
&lt;p&gt;Current active &lt;a href&#x3D;&quot;https://lang-team.rust-lang.org/initiatives.html&quot;&gt;initiatives&lt;/a&gt;
in each category include:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;More precise analyses, less rigamarole:&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;Non-lexical lifetimes were a big stride forward, but the &lt;a href&#x3D;&quot;https://github.com/rust-lang/polonius/&quot;&gt;polonius
project&lt;/a&gt; promises to improve the
borrow check&#x27;s precision even more.&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://github.com/rust-lang/rust/issues/44491&quot;&gt;Implied bounds&lt;/a&gt; promise
to remove a lot of copy-and-pasting of where clauses.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Express yourself more easily:&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://github.com/rust-lang/rust/issues/87335&quot;&gt;let-else&lt;/a&gt; directly
express the &amp;quot;match this variant or &lt;code&gt;return&lt;/code&gt;/&lt;code&gt;continue&lt;/code&gt;/etc&amp;quot; pattern.&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://github.com/rust-lang/rust/issues/53667&quot;&gt;let-chains&lt;/a&gt; allow you to
express iterative refinement with a series of pattern-matches and
conditionals&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://rust-lang.github.io/impl-trait-initiative/explainer/tait.html&quot;&gt;&amp;quot;Type alias&amp;quot; impl
Trait&lt;/a&gt;
permits APIs to name previously unnameable types. This is part of a
larger effort to &lt;a href&#x3D;&quot;https://rust-lang.github.io/impl-trait-initiative/&quot;&gt;expand impl
Trait&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://rust-lang.github.io/generic-associated-types-initiative/&quot;&gt;Generic associated
types&lt;/a&gt;
allow traits to express a number of patterns (like &amp;quot;iterable&amp;quot;) that the
current trait system cannot handle. They are a particularly important
foundational piece for async programming.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Improve async support:&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;We are working to support &lt;a href&#x3D;&quot;https://rust-lang.github.io/async-fundamentals-initiative/explainer/async_fn_in_traits.html&quot;&gt;async fns in
traits&lt;/a&gt;,
including both static dispatch and dyn dispatch.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Make &lt;code&gt;dyn Trait&lt;/code&gt; more usable:&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://github.com/rust-lang/dyn-upcasting-coercion-initiative/issues/6&quot;&gt;Dyn upcasting coercion
initiative&lt;/a&gt;:
Allow upcasting &lt;code&gt;dyn trait&lt;/code&gt; objects from &lt;code&gt;&amp;amp;dyn Subtrait&lt;/code&gt; to &lt;code&gt;&amp;amp;dyn Supertrait&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;The &lt;a href&#x3D;&quot;https://rust-lang.github.io/async-fundamentals-initiative/explainer/async_fn_in_traits.html&quot;&gt;async fn in
traits&lt;/a&gt;
initiative is also extending dyn trait to support async fns and &amp;quot;return
position impl Trait&amp;quot;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a href&#x3D;&quot;#looking-forward&quot; aria-hidden&#x3D;&quot;true&quot; class&#x3D;&quot;anchor&quot; id&#x3D;&quot;looking-forward&quot;&gt;&lt;/a&gt;Looking forward&lt;/h3&gt;
&lt;p&gt;Looking beyond the initiatives that are in progress, there&#x27;s a lot of room for
more improvement. Here are some other ideas we&#x27;d like to see. &lt;strong&gt;For many of
these ideas, the main thing they need is someone to own the design!&lt;/strong&gt; If you
might be interested in giving that a try, come to
&lt;a href&#x3D;&quot;https://rust-lang.zulipchat.com/#narrow/stream/318377-t-lang.2Froadmap-2024&quot;&gt;&lt;code&gt;#t-lang/roadmap-2024&lt;/code&gt;&lt;/a&gt;
to discuss, or send a private message to nikomatsakis.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;More precise analyses, less rigamarole:&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://github.com/rust-lang/lang-team/issues/88&quot;&gt;Deref patterns&lt;/a&gt;:
Permit matching types with patterns they can dereference to, such as
matching a &lt;code&gt;String&lt;/code&gt; with a &lt;code&gt;&amp;quot;str&amp;quot;&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Perfect derive: determine the precise conditions for generic type
parameters based on the types of a struct fields. For instance,
&lt;code&gt;#[derive(Clone)] struct MyStruct(Rc&amp;lt;T&amp;gt;)&lt;/code&gt; would not require &lt;code&gt;T: Clone&lt;/code&gt;,
because &lt;code&gt;Rc&amp;lt;T&amp;gt;&lt;/code&gt; can be cloned without it.&lt;/li&gt;
&lt;li&gt;Autoref, operators, and clones: Generic methods that operate on
references sometimes necessitate types like &lt;code&gt;&amp;amp;u32&lt;/code&gt;; since &lt;code&gt;u32&lt;/code&gt; is
&lt;code&gt;Copy&lt;/code&gt;, we could automatically make it a reference. We&#x27;ve historically
had some hesitance to add more reference-producing operations, because it
can lead to types the user doesn&#x27;t expect (such as &lt;code&gt;&amp;amp;&amp;amp;&amp;amp;str&lt;/code&gt;). We have
some ideas to simplify those cases and avoid unnecessary
double-references.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Express yourself more easily:&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://github.com/rust-lang/lang-team/issues/137&quot;&gt;Generators&lt;/a&gt;, allowing
users to write iterators (async and otherwise) using custom syntax.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Improve async support:&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;After adding async fn in traits, we intend to add support for async drop,
async closures, and potentially other features.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Make &lt;code&gt;dyn Trait&lt;/code&gt; more usable:&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;Make more patterns &amp;quot;object safe&amp;quot; and thus usable in &lt;code&gt;dyn Trait&lt;/code&gt; objects,
including passing &lt;code&gt;self&lt;/code&gt; by value and handling &lt;code&gt;impl Trait&lt;/code&gt; in argument
position (&lt;a href&#x3D;&quot;https://smallcultfollowing.com/babysteps/blog/2022/01/07/dyn-async-traits-part-7/&quot;&gt;see this post for more
information&lt;/a&gt;).&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href&#x3D;&quot;#theme-help-users-help-each-other&quot; aria-hidden&#x3D;&quot;true&quot; class&#x3D;&quot;anchor&quot; id&#x3D;&quot;theme-help-users-help-each-other&quot;&gt;&lt;/a&gt;Theme: Help users help each other&lt;/h2&gt;
&lt;h3&gt;&lt;a href&#x3D;&quot;#the-vision-1&quot; aria-hidden&#x3D;&quot;true&quot; class&#x3D;&quot;anchor&quot; id&#x3D;&quot;the-vision-1&quot;&gt;&lt;/a&gt;The vision&lt;/h3&gt;
&lt;p&gt;Rust&#x27;s combination of ownership and borrowing, low-level systems control, and
powerful extensibility mechanisms like procedural macros makes it a great
language for writing libraries. And, thanks to Cargo, using a library in your
program only takes a few lines of code. Nonetheless, there are a number of
things that library authors &lt;em&gt;can&#x27;t&lt;/em&gt; do, or can&#x27;t do easily -- for example, they
can&#x27;t control the error messages you see or deploy an &amp;quot;unstable&amp;quot; feature that
requires special opt-in to use. For Rust 2024, we want to build features that
empower library authors to better serve their users, either by helping to
manage the feature lifecycle or by expanding the capabilities of what a library
can do.&lt;/p&gt;
&lt;p&gt;We encourage people to experiment and explore in the library ecosystem,
building new functionality for people to use. Sometimes, that new functionality
becomes a foundation for others to build on, and standardizing it simplifies
further development atop it, letting the cycle continue at another level.
However, some aspects of the Rust language (notably coherence) make it harder
to extend the Rust standard library or well-established crates from separate
libraries, discouraging experimentation. Other features (such as aspects of
method resolution) make it hard to promote best-in-class functionality into the
standard library or into well-established crates without breaking users of the
crates that first developed that functionality. For Rust 2024, we want to
pursue changes that enable more exploration in the ecosystem, and enable stable
migration of code from the ecosystem into the standard library.&lt;/p&gt;
&lt;p&gt;Our plan for achieving this vision is to focus on four categories of work:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Feature lifecycle&lt;/strong&gt;: Help library authors support features as they move
from experimental to finalized. Help library authors manage their development
lifecycle and evolution.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Richer abstractions&lt;/strong&gt;: Extend the language to let library authors express
richer abstractions.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Custom developer experience&lt;/strong&gt;: Permit library authors can tailor the
developer experience, for example by tailoring the error messages a user gets
when traits are not implemented or introducing custom lints.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Interoperability&lt;/strong&gt;: The library ecosystem can easily coordinate, making
libraries work together without tying them together. Library authors can
write code that is portable across many environments or specific to one, as
they please.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a href&#x3D;&quot;#how-you-can-help-1&quot; aria-hidden&#x3D;&quot;true&quot; class&#x3D;&quot;anchor&quot; id&#x3D;&quot;how-you-can-help-1&quot;&gt;&lt;/a&gt;How you can help&lt;/h3&gt;
&lt;p&gt;Join the rust-lang Zulip, and either start a thread in the
&lt;a href&#x3D;&quot;https://rust-lang.zulipchat.com/#narrow/stream/318377-t-lang.2Froadmap-2024&quot;&gt;&lt;code&gt;#t-lang/roadmap-2024&lt;/code&gt;&lt;/a&gt;
stream, or send a private message to Josh Triplett if you&#x27;d like to discuss
privately first.&lt;/p&gt;
&lt;h3&gt;&lt;a href&#x3D;&quot;#the-plan-so-far-1&quot; aria-hidden&#x3D;&quot;true&quot; class&#x3D;&quot;anchor&quot; id&#x3D;&quot;the-plan-so-far-1&quot;&gt;&lt;/a&gt;The plan (so far)&lt;/h3&gt;
&lt;p&gt;Current active &lt;a href&#x3D;&quot;https://lang-team.rust-lang.org/initiatives.html&quot;&gt;initiatives&lt;/a&gt;
in each category include:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Feature lifecycle:&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;RFC 3240 proposes &lt;a href&#x3D;&quot;https://github.com/rust-lang/rfcs/pull/3240&quot;&gt;edition-based method
disambiguation&lt;/a&gt;, to support
moving extension methods from external crates into the standard library.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Richer abstractions:&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;There are numerous core extensions to Rust&#x27;s type system that permit
richer traits to be developed. Often the lack of these features prohibits
people from writing general purpose libraries because they can&#x27;t get
sufficient reuse:
&lt;ul&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://rust-lang.github.io/async-fundamentals-initiative/&quot;&gt;Async fn in
traits&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://github.com/rust-lang/lang-team/issues/51&quot;&gt;Const generics&lt;/a&gt;
and &lt;a href&#x3D;&quot;https://github.com/rust-lang/lang-team/issues/22&quot;&gt;constant
evaluation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://rust-lang.github.io/impl-trait-initiative/explainer/tait.html&quot;&gt;Type alias impl
Trait&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://rust-lang.github.io/generic-associated-types-initiative/&quot;&gt;Generic associated
types&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Custom developer experience:&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;We are not currently doing any coordinated initiatives here, though there
are ongoing efforts that help lay groundwork for this.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Interoperability:&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;Support &amp;quot;global capabilities&amp;quot; like allocators or async runtimes, perhaps
via an approach like &lt;a href&#x3D;&quot;https://github.com/rust-lang/rfcs/pull/2492&quot;&gt;RFC
2492&lt;/a&gt;, and perhaps extending
to something like &lt;a href&#x3D;&quot;https://tmandry.gitlab.io/blog/posts/2021-12-21-context-capabilities/&quot;&gt;scoped contexts and
capabilities&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://rust-lang.github.io/negative-impls-initiative/&quot;&gt;Negative impls in
coherence&lt;/a&gt; allows
for more flexibility in the coherence check by permitting crates to
explicitly declare that a given type will never implement a given trait.&lt;/li&gt;
&lt;li&gt;The async working group&#x27;s &lt;a href&#x3D;&quot;https://www.ncameron.org/blog/portable-and-interoperable-async-rust/&quot;&gt;portability
initiative&lt;/a&gt;
(which builds on the work to support &lt;a href&#x3D;&quot;https://rust-lang.github.io/async-fundamentals-initiative/&quot;&gt;async fn in
traits&lt;/a&gt;) will
help the async ecosystem to grow by enabling more interoperability.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a href&#x3D;&quot;#looking-forward-1&quot; aria-hidden&#x3D;&quot;true&quot; class&#x3D;&quot;anchor&quot; id&#x3D;&quot;looking-forward-1&quot;&gt;&lt;/a&gt;Looking forward&lt;/h3&gt;
&lt;p&gt;Looking beyond the initiatives that are in progress, there&#x27;s a lot of room for
more improvement. Here are some other ideas we&#x27;d like to see. &lt;strong&gt;For many of
these ideas, the main thing they need is someone to own the design!&lt;/strong&gt; If you
might be interested in giving that a try, come to
&lt;a href&#x3D;&quot;https://rust-lang.zulipchat.com/#narrow/stream/318377-t-lang.2Froadmap-2024&quot;&gt;&lt;code&gt;#t-lang/roadmap-2024&lt;/code&gt;&lt;/a&gt;
to discuss, or send a private message to Josh Triplett.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Feature lifecycle&lt;/strong&gt;:
&lt;ul&gt;
&lt;li&gt;All ecosystem crates can have &amp;quot;release trains&amp;quot;, with the equivalent of
&amp;quot;nightly features&amp;quot; that require a stability opt-ins. Top-level crates
retain control over whether any of their dependencies may use nightly
features.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Richer abstractions&lt;/strong&gt;:
&lt;ul&gt;
&lt;li&gt;Allow libraries to implement the &lt;code&gt;Fn&lt;/code&gt; traits to define callable objects.&lt;/li&gt;
&lt;li&gt;Variadic tuples and variadic generics would address a common pain point
of &amp;quot;implement this trait for tuples of any arity&amp;quot;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Custom developer experience&lt;/strong&gt;:
&lt;ul&gt;
&lt;li&gt;Allow libraries to provide custom lints for their users.&lt;/li&gt;
&lt;li&gt;Allow libraries to control or customize Rust diagnostics, especially for
trait resolution failures.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Interoperability&lt;/strong&gt;:
&lt;ul&gt;
&lt;li&gt;Revive the stalled &lt;a href&#x3D;&quot;https://github.com/rust-lang/rfcs/pull/1868&quot;&gt;portability
lint&lt;/a&gt; or pursue an
alternative design (a recent suggestion is that the &amp;quot;platform&amp;quot; might be a
global service, similar to &lt;a href&#x3D;&quot;https://github.com/rust-lang/rfcs/pull/2492&quot;&gt;RFC
2492&lt;/a&gt;, permitting one to use
where clauses to designate portable code)&lt;/li&gt;
&lt;li&gt;The coherence rules make it hard to implement interoperability traits; we
should find a way to lift this restriction, while preserving coherence&#x27;s
key benefits.&lt;/li&gt;
&lt;li&gt;Adopt a standard way to write performance benchmarks (perhaps simply
adopt &lt;code&gt;criterion&lt;/code&gt; officially).&lt;/li&gt;
&lt;li&gt;Better support for dynamic linking, with richer and safer types than the
C ABI. For instance, implement an &lt;code&gt;extern &amp;quot;safe&amp;quot;&lt;/code&gt; providing a subset of
Rust&#x27;s rich types.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href&#x3D;&quot;#theme-help-the-rust-project-scale&quot; aria-hidden&#x3D;&quot;true&quot; class&#x3D;&quot;anchor&quot; id&#x3D;&quot;theme-help-the-rust-project-scale&quot;&gt;&lt;/a&gt;Theme: &lt;strong&gt;Help the Rust project scale&lt;/strong&gt;&lt;/h2&gt;
&lt;h3&gt;&lt;a href&#x3D;&quot;#the-vision-2&quot; aria-hidden&#x3D;&quot;true&quot; class&#x3D;&quot;anchor&quot; id&#x3D;&quot;the-vision-2&quot;&gt;&lt;/a&gt;The vision&lt;/h3&gt;
&lt;p&gt;The Rust repo is a blizzard of activity. This is great, but it can be
overwhelming, particularly if you are trying to figure out the status of some
particular thing that you are interested in or would like to contribute to.&lt;/p&gt;
&lt;p&gt;To ship Rust 2024 and make Rust all that it can be, we need a system that makes
it easy for people to find out what&#x27;s going on and how they can help. We want
to scale our language development through delegation, empowering developers to
own and drive the work that they are passionate about. Lang team liaisons and
frequent lang team check-in will help ensure quality, stability, and overall
coherence. The team itself will have a clear &amp;quot;path to membership&amp;quot; that helps us
to maintain our membership and make sure we have the expertise we need.&lt;/p&gt;
&lt;p&gt;Our plan for achieving this vision is to focus on four categories of work:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;See the status at a glance:&lt;/strong&gt; We want it to be easy to identify what things
the lang-team is actively working on and how far those designs have come. We
want every tracking issue to clearly identify what &amp;quot;next steps&amp;quot; are needed to
push that particular feature over the finish line and make sure that those
steps are clearly documented for would-be contributors.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Clear owners and clear communication:&lt;/strong&gt; Rust operates by consensus, but
that doesn&#x27;t mean that everybody has to know all the details of everything.
We need a system that has clear owners for the work to be done, and ideally,
owners that are not on the lang team. Simply dividing work though can lead to
conflicts later on, so we also need frequent communication and updates to
ensure that everyone is keeping abreast of the overall direction things are
going, and to surface concerns early.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Efficient, open processes with tooling support:&lt;/strong&gt; We are always looking for
ways to improve how we operate to help us stay on top of what is going on in
the Rust project and to reach conclusions more quickly. One thing we&#x27;ve
noticed is that processes that are supported by bots or other tooling tend to
work much better.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a href&#x3D;&quot;#how-you-can-help-2&quot; aria-hidden&#x3D;&quot;true&quot; class&#x3D;&quot;anchor&quot; id&#x3D;&quot;how-you-can-help-2&quot;&gt;&lt;/a&gt;How you can help&lt;/h3&gt;
&lt;p&gt;Join the rust-lang Zulip, and either start a thread in the
&lt;a href&#x3D;&quot;https://rust-lang.zulipchat.com/#narrow/stream/318377-t-lang.2Froadmap-2024&quot;&gt;&lt;code&gt;#t-lang/roadmap-2024&lt;/code&gt;&lt;/a&gt;
stream, or send a private message to Josh Triplett and nikomatsakis if you&#x27;d
like to discuss privately first.&lt;/p&gt;
&lt;h3&gt;&lt;a href&#x3D;&quot;#the-plan-so-far-2&quot; aria-hidden&#x3D;&quot;true&quot; class&#x3D;&quot;anchor&quot; id&#x3D;&quot;the-plan-so-far-2&quot;&gt;&lt;/a&gt;The plan (so far)&lt;/h3&gt;
&lt;p&gt;Current active &lt;a href&#x3D;&quot;https://lang-team.rust-lang.org/initiatives.html&quot;&gt;initiatives&lt;/a&gt;
in each category include:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;See the status at a glance:&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;The &lt;a href&#x3D;&quot;https://github.com/orgs/rust-lang/projects/16/&quot;&gt;initiative project
board&lt;/a&gt; tracks all the
currently active initiatives that we are focusing on. For each one, it
shows their &lt;a href&#x3D;&quot;https://lang-team.rust-lang.org/initiatives/process/stages.html&quot;&gt;current
stage&lt;/a&gt;
along with their
&lt;a href&#x3D;&quot;https://lang-team.rust-lang.org/initiatives/process/roles/owner.html&quot;&gt;owners&lt;/a&gt;
and &lt;a href&#x3D;&quot;https://lang-team.rust-lang.org/initiatives/process/roles/liaison.html&quot;&gt;lang-team
liaisons&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;During the &lt;a href&#x3D;&quot;https://lang-team.rust-lang.org/meetings/backlog-bonanza.html&quot;&gt;backlog
bonanza&lt;/a&gt;
meetings, we are going through each older tracking issue and identifying
what kinds of work is needed to move it forward (needs a summary, needs
design work, etc).&lt;/li&gt;
&lt;li&gt;We&#x27;re taking the time to stabilize features that people are using, and
remove incomplete features as well as features people are not using, with
the eventual goal of treating everything open as &amp;quot;in-flight&amp;quot; rather than
&amp;quot;unknown&amp;quot;. We will also reduce the total number of in-flight features.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Clear owners and clear communication:&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;The &lt;a href&#x3D;&quot;https://lang-team.rust-lang.org/initiatives.html&quot;&gt;initiative system&lt;/a&gt;
assigns each task an owner, who drives the design, as well as a lang-team
liaison, who helps ensure alignment with the team. More work is needed to
get this system up and running smoothly.&lt;/li&gt;
&lt;li&gt;We are launching a &lt;a href&#x3D;&quot;https://hackmd.io/@nikomatsakis/rJ3h_-kJc&quot;&gt;formality
team&lt;/a&gt; that will take ownership
of ensuring Rust&#x27;s type soundness and diving into the details. This will
help to grow the set of people with expertise in that area while also
allowing the main lang team to consult as needed.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Efficient, open processes with tooling support:&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;We have designed a new &lt;a href&#x3D;&quot;https://lang-team.rust-lang.org/decision_process.html&quot;&gt;consensus decision
process&lt;/a&gt; that is
designed to overcome some of the shortcomings we&#x27;ve seen with rfcbot; it
needs to be implemented. This will help us make easily reversible
decisions easier, enable more experimentation, make it smoother to raise
and resolve concerns, and keep track of potential issues from proposal
through to stabilization&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a href&#x3D;&quot;#looking-forward-2&quot; aria-hidden&#x3D;&quot;true&quot; class&#x3D;&quot;anchor&quot; id&#x3D;&quot;looking-forward-2&quot;&gt;&lt;/a&gt;Looking forward&lt;/h3&gt;
&lt;p&gt;Looking beyond the initiatives that are in progress, there&#x27;s a lot of room for
more improvement. Here are some other ideas we&#x27;d like to see. If you might be
interested in giving that a try, come to
&lt;a href&#x3D;&quot;https://rust-lang.zulipchat.com/#narrow/stream/318377-t-lang.2Froadmap-2024&quot;&gt;&lt;code&gt;#t-lang/roadmap-2024&lt;/code&gt;&lt;/a&gt;
to discuss, or send a private message to Josh Triplett and nikomatsakis.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;See the status at a glance:&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;Find ways to integrate the older tracking issues with active initiatives;
reduce the manual updates required to keep the project board in sync.&lt;/li&gt;
&lt;li&gt;Improve the visualization of projects and blockers to something more
compelling and easier to follow.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Clear owners and clear communication:&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;Beyond the type system, there are other areas where forming specialized
teams could be useful.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Efficient, open processes with tooling support:&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;Generally improve rustbot to make meetings more efficient.&lt;/li&gt;
&lt;li&gt;Improve and automate the process of going from initiative proposal to
tracked initiative.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href&#x3D;&quot;#conclusion&quot; aria-hidden&#x3D;&quot;true&quot; class&#x3D;&quot;anchor&quot; id&#x3D;&quot;conclusion&quot;&gt;&lt;/a&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;We hope that this post has given you a taste for what we plan to focus on over
the next few years. If you&#x27;d like to help us reach these goals, please &lt;a href&#x3D;&quot;https://rust-lang.zulipchat.com/#narrow/stream/318377-t-lang.2Froadmap-2024&quot;&gt;get
involved&lt;/a&gt;!
We&#x27;ve listed a number of active initiatives for each point, but we&#x27;ve also
included a lot of ideas that are looking for an owner. Whether you prefer to
code, design, document, or organize, there&#x27;s work for you to do. And if the
only thing you want to do with Rust 2024 is to use it, we welcome that too.
Happy Rust hacking to y&#x27;all!&lt;/p&gt;
</content>

        <author>
            <name>Josh Triplett, Niko Matsakis</name>
        </author>
    </entry>
    
    <entry>
        <title>1.60.0 pre-release testing</title>
        <link rel="alternate" href="https://blog.rust-lang.org/inside-rust/2022/04/04/1.60.0-prerelease.html" type="text/html" title="1.60.0 pre-release testing" />
        <published>2022-04-04T00:00:00+00:00</published>
        <updated>2022-04-04T00:00:01+00:00</updated>
        <id>https://blog.rust-lang.org/inside-rust/2022/04/04/1.60.0-prerelease.html</id>
        <content type="html" xml:base="https://blog.rust-lang.org/inside-rust/2022/04/04/1.60.0-prerelease.html">&lt;p&gt;The 1.60.0 pre-release is ready for testing. The release is scheduled for this
Thursday, April 7th. &lt;a href&#x3D;&quot;https://github.com/rust-lang/rust/blob/stable/RELEASES.md#version-1600-2022-04-07&quot;&gt;Release notes can be found here.&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;You can try it out locally by running:&lt;/p&gt;
&lt;pre&gt;&lt;code class&#x3D;&quot;language-plain&quot;&gt;RUSTUP_DIST_SERVER&#x3D;https://dev-static.rust-lang.org rustup update stable
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The index is &lt;a href&#x3D;&quot;https://dev-static.rust-lang.org/dist/2022-04-04/index.html&quot;&gt;https://dev-static.rust-lang.org/dist/2022-04-04/index.html&lt;/a&gt;. You
can leave feedback on the &lt;a href&#x3D;&quot;https://internals.rust-lang.org/t/rust-1-60-0-prerelease-testing/&quot;&gt;internals thread&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The release team is also thinking about changes to our pre-release process:
we&#x27;d love your feedback &lt;a href&#x3D;&quot;https://github.com/rust-lang/release-team/issues/16&quot;&gt;on this GitHub issue&lt;/a&gt;.&lt;/p&gt;
</content>

        <author>
            <name>Pietro Albini</name>
        </author>
    </entry>
    
    <entry>
        <title>Changes at the Cargo Team</title>
        <link rel="alternate" href="https://blog.rust-lang.org/inside-rust/2022/03/31/cargo-team-changes.html" type="text/html" title="Changes at the Cargo Team" />
        <published>2022-03-31T00:00:00+00:00</published>
        <updated>2022-03-31T00:00:00+00:00</updated>
        <id>https://blog.rust-lang.org/inside-rust/2022/03/31/cargo-team-changes.html</id>
        <content type="html" xml:base="https://blog.rust-lang.org/inside-rust/2022/03/31/cargo-team-changes.html">&lt;p&gt;We are thrilled to publicly announce that &lt;a href&#x3D;&quot;https://github.com/weihanglo&quot;&gt;Weihang
Lo&lt;/a&gt; and &lt;a href&#x3D;&quot;https://github.com/epage/&quot;&gt;Ed Page&lt;/a&gt;
have joined the Cargo Team!&lt;/p&gt;
&lt;p&gt;Weihang has been providing thoughtful and helpful replies on our issue
tracker. He has often had the patience to explain to people what problem
they&#x27;re hitting and how to get unstuck. He often summarizes technical
conversations clearly describing the available solutions and their costs both
technical and more importantly human. He has also been contributing to many
improvements and code reviews.&lt;/p&gt;
&lt;p&gt;Ed has been a champion on many fronts. He has done tremendous work on
&lt;a href&#x3D;&quot;https://crates.io/crates/toml_edit&quot;&gt;toml_edit&lt;/a&gt; to push Cargo towards getting
&lt;code&gt;cargo add&lt;/code&gt; &lt;a href&#x3D;&quot;https://github.com/rust-lang/cargo/pull/10472&quot;&gt;merged in cargo
proper&lt;/a&gt;. He has brought
&lt;a href&#x3D;&quot;https://crates.io/crates/clap&quot;&gt;clap&lt;/a&gt; to the momentous 3.0 release and
continues to push on CLI improvements, more advanced testing tools, and much
more!&lt;/p&gt;
&lt;p&gt;At the same time one of the pillars of our team is stepping down. &lt;del&gt;Alex is
a programming robot sent back in time from the future to make sure that Rust
succeeds.&lt;/del&gt; &lt;a href&#x3D;&quot;https://github.com/alexcrichton/&quot;&gt;Alex Crichton&lt;/a&gt; has done
more than his fair share being a keystone holding the Rust project together.
&lt;a href&#x3D;&quot;https://internals.rust-lang.org/t/scaling-back-my-involvement-in-rust/&quot;&gt;Several years
ago&lt;/a&gt;
he stepped back from single-handedly running everything, to spin out many new
teams to take care of things he did alone. The Cargo Team was lucky enough to
be one of the places he still had energy to provide guidance, mentorship, and
continuity. He is the last member of the team to have been involved with Rust
since before Cargo existed. He will be deeply missed. Good luck on your next
project of interest! Or, take the time to relax. You&#x27;ve earned it!&lt;/p&gt;
&lt;p&gt;As a result of these changes to the team, the rate of new PRs is beyond our
capacity to accept at this time. Reviews for PRs will be taking significantly
longer than before. For now, Cargo will be having a freeze on any new features
or major changes. We will still be accepting bug fixes and work on existing
projects under active development. As capacity becomes more available, new
features may be accepted after being approved by the Cargo Team.&lt;/p&gt;
&lt;p&gt;Cargo is a large project with many moving pieces and different use cases. The
fact that it works reliably and that it is intuitive has been a significant
multiplier for Rust&#x27;s success. But it also means that reviewing changes needs
to be done very carefully. It is easy for changes to break some
obscure configuration, or be a targeted fix that deepens our technical debt
making it even harder to understand the whole of Cargo. We appreciate people&#x27;s
patience as we move forward.&lt;/p&gt;
</content>

        <author>
            <name>Eric Huss</name>
        </author>
    </entry>
    
    <entry>
        <title>CTCFT 2022-03-21 Agenda</title>
        <link rel="alternate" href="https://blog.rust-lang.org/inside-rust/2022/03/16/CTCFT-march.html" type="text/html" title="CTCFT 2022-03-21 Agenda" />
        <published>2022-03-16T00:00:00+00:00</published>
        <updated>2022-03-16T00:00:00+00:00</updated>
        <id>https://blog.rust-lang.org/inside-rust/2022/03/16/CTCFT-march.html</id>
        <content type="html" xml:base="https://blog.rust-lang.org/inside-rust/2022/03/16/CTCFT-march.html">&lt;p&gt;The next &lt;a href&#x3D;&quot;https://rust-lang.github.io/ctcft/&quot;&gt;&amp;quot;Cross Team Collaboration Fun Times&amp;quot; (CTCFT)&lt;/a&gt; meeting will take
place on Monday, 2022-03-21 at &lt;strong&gt;1pm US Eastern Time&lt;/strong&gt; (&lt;a href&#x3D;&quot;https://everytimezone.com/s/d733869e&quot;&gt;click to see in your
time zone&lt;/a&gt;). You’ll find the full details (along with a calendar
event, zoom details, etc) &lt;a href&#x3D;&quot;https://rust-lang.github.io/ctcft/meetings/2022-03-21.html&quot;&gt;on the CTCFT website&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;&lt;a href&#x3D;&quot;#agenda&quot; aria-hidden&#x3D;&quot;true&quot; class&#x3D;&quot;anchor&quot; id&#x3D;&quot;agenda&quot;&gt;&lt;/a&gt;Agenda&lt;/h2&gt;
&lt;p&gt;For this month&#x27;s CTCFT meeting, the theme is &amp;quot;planning for 2022&amp;quot;. Rebecca
Rumbul, the CEO of the Rust Foundation, will give some insight into the Foundation&#x27;s
mission. Niko Matsakis and Josh Triplett will go over the lang team&#x27;s roadmap
of the priorities for Rust 2024.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;(5 min) Opening remarks 👋 (&lt;a href&#x3D;&quot;https://github.com/nikomatsakis&quot;&gt;nikomatsakis&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;(15 min) Planning for Rust 2024 (&lt;a href&#x3D;&quot;https://github.com/nikomatsakis&quot;&gt;nikomatsakis&lt;/a&gt;, &lt;a href&#x3D;&quot;https://github.com/joshtriplett&quot;&gt;joshtriplett&lt;/a&gt;)
&lt;ul&gt;
&lt;li&gt;Now that Rust 2021 is behind us, it&#x27;s time to start thinking about Rust
2024! The lang team has been working on a roadmap that proposes various
priorities for Rust 2024 and discusses some of the language changes that can
help support those priorities. &lt;a href&#x3D;&quot;https://github.com/nikomatsakis&quot;&gt;@nikomatsakis&lt;/a&gt; and
&lt;a href&#x3D;&quot;https://github.com/joshtriplett&quot;&gt;@joshtriplett&lt;/a&gt; will discuss the contents of that document. We
would love feedback, both on the document and on whether it can be broadened
to include other teams&#x27; efforts as well.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;(15 min) Rust Foundation 2022 (&lt;a href&#x3D;&quot;https://twitter.com/rebeccarumbul&quot;&gt;Rebecca Rumbul&lt;/a&gt;)
&lt;ul&gt;
&lt;li&gt;Bec will give an overview of the Foundation&#x27;s current thinking on its
mission and how to achieve it, and talk a little about some of the bigger
questions that need to be addressed for the future. This will include more
detail on the work programs that the Foundation is currently pursuing (such
as the Community Grants Program), and some potential gaps / areas that the
Foundation is considering in terms of what support and resources it could
provide. Bec will also talk about the more operational/practical side of the
Foundation, outlining how the organisation is growing and how the split of
responsibilities between board and staff is working.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;(5 min) Closing (&lt;a href&#x3D;&quot;https://github.com/nikomatsakis&quot;&gt;nikomatsakis&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href&#x3D;&quot;#afterwards-social-hour&quot; aria-hidden&#x3D;&quot;true&quot; class&#x3D;&quot;anchor&quot; id&#x3D;&quot;afterwards-social-hour&quot;&gt;&lt;/a&gt;Afterwards: Social Hour&lt;/h2&gt;
&lt;p&gt;Like always, we&#x27;ll be running a social hour after the CTCFT. The idea is really
simple: for the hour after the meeting, we will create breakout rooms in Zoom
with different themes. You can join any breakout room you like and hangout.&lt;/p&gt;
</content>

        <author>
            <name>Rust CTCFT Team</name>
        </author>
    </entry>
    
    <entry>
        <title>Rust Compiler March 2022 Steering Cycle</title>
        <link rel="alternate" href="https://blog.rust-lang.org/inside-rust/2022/03/11/mar-steering-cycle.html" type="text/html" title="Rust Compiler March 2022 Steering Cycle" />
        <published>2022-03-11T00:00:00+00:00</published>
        <updated>2022-03-11T00:00:00+00:00</updated>
        <id>https://blog.rust-lang.org/inside-rust/2022/03/11/mar-steering-cycle.html</id>
        <content type="html" xml:base="https://blog.rust-lang.org/inside-rust/2022/03/11/mar-steering-cycle.html">&lt;p&gt;On &lt;a href&#x3D;&quot;https://zulip-archive.rust-lang.org/stream/238009-t-compiler/meetings/topic/.5Bplanning.20meeting.5D.202022-03-11.html&quot;&gt;Friday, March 11th&lt;/a&gt;, the Rust Compiler team had a planning meeting for the March steering cycle.&lt;/p&gt;
&lt;p&gt;Every fourth Friday, the Rust compiler team decides how
it is going to use its scheduled steering and design meeting time over the next
three Fridays.&lt;/p&gt;
&lt;p&gt;On Friday, 18 March, we will be having a &lt;a href&#x3D;&quot;https://github.com/rust-lang/compiler-team/issues/484&quot;&gt;&amp;quot;backlog bonanza&amp;quot;&lt;/a&gt;, in a
similar vein to that done by T-lang, to review the list of unimplemented or
partially-implemented features. pnkfelix and Jack Huey will prepare a document
to drive the meeting.&lt;/p&gt;
&lt;p&gt;On Friday, 25 March, we will be reviewing &lt;a href&#x3D;&quot;https://github.com/rust-lang/compiler-team/issues/488&quot;&gt;formal methods in Rust&lt;/a&gt;, and
also discuss how to provide a &lt;a href&#x3D;&quot;https://github.com/rust-lang/compiler-team/issues/498&quot;&gt;stable interface to MIR&lt;/a&gt;, &lt;code&gt;rustc&lt;/code&gt;&#x27;s middle
intermediate representation, for use by external tools (such as those developed
by the formal methods community). pnkfelix and Xavier Denis will prepare a
document to drive the meeting.&lt;/p&gt;
&lt;p&gt;Note: The MIR interface topic is of interest to a number of external
stakeholders, so we expect to have the document to drive the meeting ready for
review well ahead of this meeting. Please reach out to pnkfelix if you are
working on a project that would benefit from stable MIR, so we can determine if
you should be included in the development of that document. (Of course, all are
welcome at the steering meeting itself.)&lt;/p&gt;
&lt;p&gt;On Friday, 1 April, we will discuss &lt;a href&#x3D;&quot;https://github.com/rust-lang/compiler-team/issues/490&quot;&gt;robust incremental compilation&lt;/a&gt;. The
compiler team has opted to disable incremental compilation in the stable channel
twice in the past year. This meeting will discuss the pervasive issues suffered
by the current design, and possible strategies to validate the incremental
compilation subsystem going forward. mw and Aaron Hill will prepare a document
to drive the meeting.&lt;/p&gt;
&lt;p&gt;The two meetings in March will run from 2pm to 3pm GMT.&lt;/p&gt;
&lt;p&gt;The meeting on April 1st has a different time than normal; it will run from 4pm
to 5pm GMT.&lt;/p&gt;
&lt;p&gt;All of the meetings will take place on the &lt;a href&#x3D;&quot;https://rust-lang.zulipchat.com/#narrow/stream/238009-t-compiler.2Fmeetings&quot;&gt;T-compiler/meetings zulip stream&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;You can find a public link to the &lt;a href&#x3D;&quot;https://rust-lang.github.io/compiler-team/#meeting-calendar&quot;&gt;compiler team calendar&lt;/a&gt; here; it lists
these meetings as well as a number of other meetings for the compiler team and
various projects and working groups.&lt;/p&gt;
</content>

        <author>
            <name>Felix Klock</name>
        </author>
    </entry>
    
    <entry>
        <title>Lang team March update</title>
        <link rel="alternate" href="https://blog.rust-lang.org/inside-rust/2022/03/09/lang-team-mar-update.html" type="text/html" title="Lang team March update" />
        <published>2022-03-09T00:00:00+00:00</published>
        <updated>2022-03-09T00:00:00+00:00</updated>
        <id>https://blog.rust-lang.org/inside-rust/2022/03/09/lang-team-mar-update.html</id>
        <content type="html" xml:base="https://blog.rust-lang.org/inside-rust/2022/03/09/lang-team-mar-update.html">&lt;p&gt;Two weeks ago, the lang team held its March planning meeting (&lt;a href&#x3D;&quot;https://github.com/rust-lang/lang-team/blob/master/design-meeting-minutes/2022-03-02-planning-meeting.md&quot;&gt;minutes&lt;/a&gt;). We hold these meetings on the first Wednesday of every month and we use them to schedule &lt;a href&#x3D;&quot;https://lang-team.rust-lang.org/meetings/design.html&quot;&gt;design meetings&lt;/a&gt; for the remainder of the month.&lt;/p&gt;
&lt;h2&gt;&lt;a href&#x3D;&quot;#upcoming-design-meetings&quot; aria-hidden&#x3D;&quot;true&quot; class&#x3D;&quot;anchor&quot; id&#x3D;&quot;upcoming-design-meetings&quot;&gt;&lt;/a&gt;Upcoming design meetings&lt;/h2&gt;
&lt;p&gt;We have planned the following design meetings:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;March 9: Draft lang team roadmap (this already happened! &lt;a href&#x3D;&quot;https://github.com/rust-lang/lang-team/blob/master/design-meeting-minutes/2022-03-09-lang-roadmap.md&quot;&gt;minutes&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;March 16: &lt;a href&#x3D;&quot;https://lang-team.rust-lang.org/meetings/backlog-bonanza.html&quot;&gt;Backlog bonanza&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;March 23: Return Position Impl Trait in Dyn Trait (RPITIDT) &lt;a href&#x3D;&quot;https://github.com/rust-lang/lang-team/issues/144&quot;&gt;lang-team#144&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;March 30: Lint policy &lt;a href&#x3D;&quot;https://github.com/rust-lang/lang-team/issues/132&quot;&gt;lang-team#132&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href&#x3D;&quot;#design-meeting-expectations&quot; aria-hidden&#x3D;&quot;true&quot; class&#x3D;&quot;anchor&quot; id&#x3D;&quot;design-meeting-expectations&quot;&gt;&lt;/a&gt;Design meeting expectations&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;The document for the meeting must be prepared by the triage meeting on Tuesday and posted to the tracking issue.
&lt;ul&gt;
&lt;li&gt;If it is not sent out by then, the meeting will be canceled. This gives folks 24 hour notice.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;There is no expectation that people will read the document before the meeting. The meeting will begin with a recap of the document.
&lt;ul&gt;
&lt;li&gt;However, there is no rule &lt;strong&gt;against&lt;/strong&gt; reading the document beforehand and providing feedback or advice on how to improve it.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
</content>

        <author>
            <name>Niko Matsakis</name>
        </author>
    </entry>
    
    <entry>
        <title>Rust Compiler Ambitions for 2022</title>
        <link rel="alternate" href="https://blog.rust-lang.org/inside-rust/2022/02/22/compiler-team-ambitions-2022.html" type="text/html" title="Rust Compiler Ambitions for 2022" />
        <published>2022-02-22T00:00:00+00:00</published>
        <updated>2022-02-22T00:00:00+00:00</updated>
        <id>https://blog.rust-lang.org/inside-rust/2022/02/22/compiler-team-ambitions-2022.html</id>
        <content type="html" xml:base="https://blog.rust-lang.org/inside-rust/2022/02/22/compiler-team-ambitions-2022.html">&lt;h1&gt;&lt;a href&#x3D;&quot;#rust-compiler-ambitions-for-2022&quot; aria-hidden&#x3D;&quot;true&quot; class&#x3D;&quot;anchor&quot; id&#x3D;&quot;rust-compiler-ambitions-for-2022&quot;&gt;&lt;/a&gt;Rust Compiler Ambitions for 2022&lt;/h1&gt;
&lt;p&gt;Some people have been wondering about what the Rust Compiler Team has planned for 2022. This note is to let you all know what activities the team plans to focus on this year.&lt;/p&gt;
&lt;p&gt;This document is structured into three parts: our &lt;a href&#x3D;&quot;#overall-themes&quot;&gt;Overall Themes&lt;/a&gt; for this year, the &lt;a href&#x3D;&quot;#concrete-initiatives&quot;&gt;Concrete Initiatives&lt;/a&gt; we have resources to drive, and &lt;a href&#x3D;&quot;#aspirations&quot;&gt;Aspirations&lt;/a&gt; for what we could do if given more help.&lt;/p&gt;
&lt;h2&gt;&lt;a href&#x3D;&quot;#introduction&quot; aria-hidden&#x3D;&quot;true&quot; class&#x3D;&quot;anchor&quot; id&#x3D;&quot;introduction&quot;&gt;&lt;/a&gt;Introduction&lt;/h2&gt;
&lt;p&gt;Part of the motivation for this note is to encourage new contributors to get involved. We have a lot of newcomers, from individuals to large organizations, who are very excited about Rust&#x27;s potential, and we want to show all of them what they can do to help.&lt;/p&gt;
&lt;p&gt;This is a list of items, divided into a &lt;a href&#x3D;&quot;#concrete-initiatives&quot;&gt;Concrete Initiatives&lt;/a&gt; section and an &lt;a href&#x3D;&quot;#aspirations&quot;&gt;Aspirations&lt;/a&gt; section. We accumulated these items during discussions with the Compiler Team and the Compiler Contributors.
The &lt;a href&#x3D;&quot;#concrete-initiatives&quot;&gt;Concrete Initiatives&lt;/a&gt; have owners assigned; each has allocated time this year to attack the problem. The &lt;a href&#x3D;&quot;#aspirations&quot;&gt;Aspirations&lt;/a&gt;, on the other hand, are items that the team agrees would be great areas for investment but where we currently lack sufficient resources or experienced developers to make progress this year.&lt;/p&gt;
&lt;p&gt;This is &lt;em&gt;not&lt;/em&gt; a list of everything we will do this year; at least, not without help.&lt;/p&gt;
&lt;p&gt;You can think of the &lt;a href&#x3D;&quot;#aspirations&quot;&gt;Aspirations&lt;/a&gt; part of the doc as an explicit call to arms: If you see something there that interests you, please reach out to the owners listed in that section to find out how you might be able to help.&lt;/p&gt;
&lt;p&gt;As you read the document, it is useful to keep in mind that &lt;a href&#x3D;&quot;https://blog.m-ou.se/rust-is-not-a-company/&quot;&gt;Rust is not a company&lt;/a&gt;: The teams, and the leaders of the teams, do not establish goals in a top-down manner, nor do they hand out tasks in a round-robin fashion. Instead, we collectively (and iteratively) refine our a shared vision for the future, and take steps that hopefully move towards that future. Each contributor decides for themself how much time they can afford to contribute, and that can vary wildly between contributors. The goals that we set for the project must be aligned with the goals of our current and future contributors; otherwise, they just won&#x27;t get done. We have processes (e.g. &lt;a href&#x3D;&quot;https://github.com/rust-lang/rfcs#readme&quot;&gt;RFCs&lt;/a&gt;, &lt;a href&#x3D;&quot;https://forge.rust-lang.org/compiler/mcp.html&quot;&gt;MCPs&lt;/a&gt;) that try to ensure alignment; in some ways, a document like this one is just another tool for recalibrating alignment.&lt;/p&gt;
&lt;!--
But the flip side of this is: if something really is important, then there almost certainly exists a contributor willing to work on it. The real hurdle then is *enabling* that contributor to succeed.
(Note: this is hard! Its not just about mentorship/education; its just as much about achieving *alignment* amongst the whole group!)
--&gt;
&lt;!-- [antoyo zulip PM]: https://rust-lang.zulipchat.com/#narrow/pm-with/404242-user404242 --&gt; &lt;!-- @**antoyo** --&gt;
&lt;!-- antoyo sponsorship: https://github.com/sponsors/antoyo --&gt;
&lt;!-- [Aaron Hill zulip PM]: https://rust-lang.zulipchat.com/#narrow/pm-with/116083-user116083 --&gt; &lt;!-- @**Aaron Hill** --&gt;
&lt;!-- Aaron1011: no affiliation --&gt;
&lt;!-- [bjorn3 zulip PM]: https://rust-lang.zulipchat.com/#narrow/pm-with/133247-user133247 --&gt; &lt;!-- @**bjorn3**  --&gt;
&lt;!-- bjorn3 donation page: https://liberapay.com/bjorn3 --&gt;
&lt;!-- [cjgillot zulip PM]: https://rust-lang.zulipchat.com/#narrow/pm-with/248906-user248906 --&gt; &lt;!-- @**cjgillot**  --&gt;
&lt;!-- no response from cjgillot re affiliation yet --&gt;
&lt;!-- [davidtwco zulip PM]: https://rust-lang.zulipchat.com/#narrow/pm-with/248906-user248906 --&gt; &lt;!-- @**davidtwco**  --&gt;
&lt;!-- davidtwco affiliation: &quot;Huawei R&amp;D UK&quot;--&gt;
&lt;!-- [estebank zulip PM]: https://rust-lang.zulipchat.com/#narrow/pm-with/119031-user119031 --&gt; &lt;!-- @**Esteban Küber** --&gt;
&lt;!-- estebank affiliation: AWS --&gt;
&lt;!-- [lcnr zulip PM]: https://rust-lang.zulipchat.com/#narrow/pm-with/216206-user216206 --&gt; &lt;!-- @**lcnr** --&gt;
&lt;!-- lcnr sponsorship: https://lcnr.de/funding/ --&gt;
&lt;!-- [michaelwoerister zulip PM]: https://rust-lang.zulipchat.com/#narrow/pm-with/124287-user124287 --&gt; &lt;!-- @**mw** --&gt;
&lt;!-- michaelwoerister affiliation: MS --&gt;
&lt;!-- [nikomatsakis zulip PM]: https://rust-lang.zulipchat.com/#narrow/pm-with/116009-user116009 --&gt; &lt;!-- @**nikomatsakis** --&gt;
&lt;!-- nikomatsakis affiliation: AWS --&gt;
&lt;!-- [oli-obk zulip PM]: https://rust-lang.zulipchat.com/#narrow/pm-with/124288-user124288 --&gt; &lt;!-- @**oli** --&gt;
&lt;!-- oli affiliation: AWS --&gt;
&lt;!-- [jackh726 zulip PM]: https://rust-lang.zulipchat.com/#narrow/pm-with/232957-user232957 --&gt; &lt;!-- @**Jack Huey** --&gt;
&lt;!-- jackh726: no affiliation --&gt;
&lt;!-- [lqd zulip PM]: https://rust-lang.zulipchat.com/#narrow/pm-with/116113-user116113 --&gt; &lt;!-- @**lqd**  --&gt;
&lt;!-- lqd affiliation: ISRG --&gt;
&lt;!-- [nnethercote zulip PM]: https://rust-lang.zulipchat.com/#narrow/pm-with/120989-user120989 --&gt; &lt;!-- @**nnethercote**  --&gt;
&lt;!-- nnethercote affiliation: Futurewei --&gt;
&lt;!-- [tmandry zulip PM]: https://rust-lang.zulipchat.com/#narrow/pm-with/116883-user116883 --&gt; &lt;!-- @**tmandry**  --&gt;
&lt;!-- tmandry affiliation: Google (TBD) --&gt;
&lt;!-- [scottmcm zulip PM]: https://rust-lang.zulipchat.com/#narrow/pm-with/125270-user125270 --&gt; &lt;!-- @**scottmcm**  --&gt;
&lt;!-- scottmcm: no affiliation --&gt;
&lt;!-- [pnkfelix zulip PM]: https://rust-lang.zulipchat.com/#narrow/pm-with/116083-user116083  --&gt; &lt;!-- @**pnkfelix**  --&gt;
&lt;!-- pnkfelix affiliation: AWS --&gt;
&lt;!-- [wesleywiser zulip PM]: https://rust-lang.zulipchat.com/#narrow/pm-with/125250-user125250 --&gt; &lt;!-- @**Wesley Wiser**  --&gt;
&lt;!-- wesleywiser affiliation: MS --&gt;
&lt;!-- [jswrenn zulip PM]: https://rust-lang.zulipchat.com/#narrow/pm-with/219211-user219211 --&gt; &lt;!-- @**Jack Wrenn** --&gt;
&lt;!-- jswrenn affiliation: AWS --&gt;
&lt;!-- [apiraino zulip PM]: https://rust-lang.zulipchat.com/#narrow/pm-with/250987-user250987 --&gt; &lt;!-- @**apiraino**  --&gt;
&lt;!-- apiraino: no affiliation --&gt;
&lt;!-- [simulacrum zulip PM]: https://rust-lang.zulipchat.com/#narrow/pm-with/116122-user116122 --&gt; &lt;!-- @**simulacrum**  --&gt;
&lt;!-- simulacrum sponsorship: https://github.com/sponsors/Mark-Simulacrum --&gt;
&lt;!-- [rylev zulip PM]: https://rust-lang.zulipchat.com/#narrow/pm-with/224872-user224872 --&gt; &lt;!-- @**rylev**  --&gt;
&lt;!-- rylev affiliation: MS --&gt;
&lt;!-- [xldenis zulip PM]: https://rust-lang.zulipchat.com/#narrow/pm-with/312719-user312719 --&gt; &lt;!-- @**Xavier Denis**  --&gt;
&lt;h2&gt;&lt;a href&#x3D;&quot;#overall-themes&quot; aria-hidden&#x3D;&quot;true&quot; class&#x3D;&quot;anchor&quot; id&#x3D;&quot;overall-themes&quot;&gt;&lt;/a&gt;Overall Themes&lt;/h2&gt;
&lt;p&gt;There are three themes associated with the work we are planning; this section describes those themes, and attaches an
emoji to each one which may help you when looking at the &lt;a href&#x3D;&quot;#work-items&quot;&gt;tabular overview&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;&lt;a href&#x3D;&quot;#fulfill-rusts-promise-&quot; aria-hidden&#x3D;&quot;true&quot; class&#x3D;&quot;anchor&quot; id&#x3D;&quot;fulfill-rusts-promise-&quot;&gt;&lt;/a&gt;Fulfill Rust&#x27;s Promise (🦀)&lt;/h3&gt;
&lt;p&gt;Fulfilling Rust&#x27;s Promise is a cross-cutting theme; it means identifying the gaps between expectation and reality for each of our three pillars: &lt;a href&#x3D;&quot;https://www.rust-lang.org&quot;&gt;Performance, Reliability, and Productivity&lt;/a&gt;, and then addressing those gaps.&lt;/p&gt;
&lt;h3&gt;&lt;a href&#x3D;&quot;#developer-delight-&quot; aria-hidden&#x3D;&quot;true&quot; class&#x3D;&quot;anchor&quot; id&#x3D;&quot;developer-delight-&quot;&gt;&lt;/a&gt;Developer Delight (👩‍💻)&lt;/h3&gt;
&lt;p&gt;We have opportunities to improve the experience of writing, of compiling, and of running Rust code. We want answers to the question, &amp;quot;what would delight Rust developers?&amp;quot; This is not about meeting their expectations: It&#x27;s about &lt;em&gt;surpassing&lt;/em&gt; them.&lt;/p&gt;
&lt;h3&gt;&lt;a href&#x3D;&quot;#contributor-workflow-️&quot; aria-hidden&#x3D;&quot;true&quot; class&#x3D;&quot;anchor&quot; id&#x3D;&quot;contributor-workflow-️&quot;&gt;&lt;/a&gt;Contributor Workflow (🛠️)&lt;/h3&gt;
&lt;p&gt;Finally, improving the Compiler Contributor Workflow means technology enhancements that benefit people maintaining and extending the Rust compiler itself.&lt;/p&gt;
&lt;p&gt;(We also make non-technical enhancements, such as changes to our social processes, but this document focuses on technology.)&lt;/p&gt;
&lt;h2&gt;&lt;a href&#x3D;&quot;#work-items&quot; aria-hidden&#x3D;&quot;true&quot; class&#x3D;&quot;anchor&quot; id&#x3D;&quot;work-items&quot;&gt;&lt;/a&gt;Work Items&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Category&lt;/th&gt;
&lt;th&gt;&lt;a href&#x3D;&quot;#concrete-initiatives&quot;&gt;Concrete Initiatives&lt;/a&gt;&lt;/th&gt;
&lt;th&gt;&lt;a href&#x3D;&quot;#aspirations&quot;&gt;Aspirations&lt;/a&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;I-unsound (🦀)&lt;/td&gt;
&lt;td&gt;&lt;a href&#x3D;&quot;#i-unsound-issues-&quot;&gt;Initiatives&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Async Rust (🦀, 👩‍💻)&lt;/td&gt;
&lt;td&gt;&lt;a href&#x3D;&quot;#async-rust-initiatives--&quot;&gt;Initiatives&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Debugging (🦀, 👩‍💻)&lt;/td&gt;
&lt;td&gt;&lt;a href&#x3D;&quot;#debugging-initiatives-&quot;&gt;Initiatives&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href&#x3D;&quot;#debugging-aspirations-&quot;&gt;Aspirations&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Faster Builds (👩‍💻, 🛠️)&lt;/td&gt;
&lt;td&gt;&lt;a href&#x3D;&quot;#faster-builds-initiatives--%EF%B8%8F&quot;&gt;Initiatives&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href&#x3D;&quot;#faster-builds-aspirations--%EF%B8%8F&quot;&gt;Aspirations&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Expressiveness (👩‍💻, 🦀)&lt;/td&gt;
&lt;td&gt;&lt;a href&#x3D;&quot;#expressiveness-initiatives--&quot;&gt;Initiatives&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href&#x3D;&quot;#expressiveness-aspirations--&quot;&gt;Aspirations&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Librarification (🛠️)&lt;/td&gt;
&lt;td&gt;&lt;a href&#x3D;&quot;#librarification-initiatives-%EF%B8%8F&quot;&gt;Initiatives&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href&#x3D;&quot;#librarification-aspirations-%EF%B8%8F&quot;&gt;Aspirations&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;P-high Backlog (🦀)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href&#x3D;&quot;#p-high-aspirations-&quot;&gt;Aspirations&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Team Operations (🛠️)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href&#x3D;&quot;#compiler-team-operations-aspirations-%EF%B8%8F&quot;&gt;Aspirations&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Backend (🛠️, 👩‍💻)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href&#x3D;&quot;#compiler-backend-aspirations-%EF%B8%8F-&quot;&gt;Aspirations&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Diagnostics  (👩‍💻)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href&#x3D;&quot;#diagnostics-aspirations-&quot;&gt;Aspirations&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;!-- end of manually made [toc] --&gt;
&lt;h2&gt;&lt;a href&#x3D;&quot;#concrete-initiatives&quot; aria-hidden&#x3D;&quot;true&quot; class&#x3D;&quot;anchor&quot; id&#x3D;&quot;concrete-initiatives&quot;&gt;&lt;/a&gt;Concrete Initiatives&lt;/h2&gt;
&lt;p&gt;This section is the closest thing to a &amp;quot;roadmap&amp;quot; we have for 2022. It is a list of important items with dedicated owners that have time allocated to make significant progress on the problem this year.&lt;/p&gt;
&lt;h3&gt;&lt;a href&#x3D;&quot;#i-unsound-issues-&quot; aria-hidden&#x3D;&quot;true&quot; class&#x3D;&quot;anchor&quot; id&#x3D;&quot;i-unsound-issues-&quot;&gt;&lt;/a&gt;I-unsound issues (🦀)&lt;/h3&gt;
&lt;p&gt;As of this writing, we have 69 &lt;a href&#x3D;&quot;https://github.com/rust-lang/rust/issues?q&#x3D;is%3Aopen+is%3Aissue+label%3AI-unsound&quot;&gt;open issues tagged I-unsound&lt;/a&gt;, and 44 of those are &lt;a href&#x3D;&quot;https://github.com/rust-lang/rust/issues?q&#x3D;is%3Aopen+is%3Aissue+label%3AI-unsound++label%3AT-compiler&quot;&gt;also tagged T-compiler&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;In theory, any unsoundness issue potentially undermines Rust&#x27;s promise of reliability. We want, by the end of this year, to have a clear understanding of how each of those I-unsound issues came to be. We are looking into systematically detecting such issues and whether we can deploy mitigations or fixes for entire classes of issues, instead of addressing them on a case by case basis.&lt;/p&gt;
&lt;p&gt;&lt;a href&#x3D;&quot;https://github.com/oli-obk&quot;&gt;oli-obk&lt;/a&gt; will be the primary owner of work in this space. Please reach out to &lt;a href&#x3D;&quot;https://github.com/oli-obk&quot;&gt;oli-obk&lt;/a&gt; and &lt;a href&#x3D;&quot;https://github.com/pnkfelix&quot;&gt;pnkfelix&lt;/a&gt; if you are interested in helping resolve these issues!&lt;/p&gt;
&lt;h3&gt;&lt;a href&#x3D;&quot;#async-rust-initiatives--&quot; aria-hidden&#x3D;&quot;true&quot; class&#x3D;&quot;anchor&quot; id&#x3D;&quot;async-rust-initiatives--&quot;&gt;&lt;/a&gt;Async Rust Initiatives (🦀, 👩‍💻)&lt;/h3&gt;
&lt;p&gt;There is significant overlap between async rust and other areas of this document, such as debugging and language expressiveness.&lt;/p&gt;
&lt;h4&gt;&lt;a href&#x3D;&quot;#async-traits&quot; aria-hidden&#x3D;&quot;true&quot; class&#x3D;&quot;anchor&quot; id&#x3D;&quot;async-traits&quot;&gt;&lt;/a&gt;async traits&lt;/h4&gt;
&lt;p&gt;Rust today does not allow &lt;code&gt;async fn&lt;/code&gt; in a trait, so Async Rust code usually ends up with components that are too tightly coupled; one cannot write reusable, general-purpose libraries without using workarounds like &lt;code&gt;#[async_trait]&lt;/code&gt; that impose hidden costs. &lt;a href&#x3D;&quot;https://github.com/nikomatsakis&quot;&gt;nikomatsakis&lt;/a&gt; and &lt;a href&#x3D;&quot;https://github.com/tmandry&quot;&gt;tmandry&lt;/a&gt; are driving the &lt;a href&#x3D;&quot;https://github.com/rust-lang/async-fundamentals-initiative/issues/5&quot;&gt;async fn in traits initiative&lt;/a&gt;, which will unlock the ability to write &lt;code&gt;async&lt;/code&gt; methods in traits, natively.&lt;/p&gt;
&lt;h4&gt;&lt;a href&#x3D;&quot;#async-crashdump-dissection&quot; aria-hidden&#x3D;&quot;true&quot; class&#x3D;&quot;anchor&quot; id&#x3D;&quot;async-crashdump-dissection&quot;&gt;&lt;/a&gt;async crashdump dissection&lt;/h4&gt;
&lt;p&gt;&lt;a href&#x3D;&quot;https://github.com/michaelwoerister&quot;&gt;michaelwoerister&lt;/a&gt; is driving the &lt;a href&#x3D;&quot;https://rust-lang.github.io/async-crashdump-debugging-initiative/&quot;&gt;async crashdump initiative&lt;/a&gt;, which will enable developers to understand the control-flow stacks encoded in crashdumps for their async Rust programs.&lt;/p&gt;
&lt;p&gt;There is a ton of other work being done in the Async Rust space. Check out the &lt;a href&#x3D;&quot;https://rust-lang.github.io/wg-async/welcome.html&quot;&gt;Async Vision web site&lt;/a&gt; for more information.&lt;/p&gt;
&lt;h3&gt;&lt;a href&#x3D;&quot;#debugging-initiatives-&quot; aria-hidden&#x3D;&quot;true&quot; class&#x3D;&quot;anchor&quot; id&#x3D;&quot;debugging-initiatives-&quot;&gt;&lt;/a&gt;Debugging Initiatives (🦀)&lt;/h3&gt;
&lt;p&gt;&lt;a href&#x3D;&quot;https://github.com/wesleywiser&quot;&gt;wesleywiser&lt;/a&gt; and &lt;a href&#x3D;&quot;https://github.com/pnkfelix&quot;&gt;pnkfelix&lt;/a&gt; are spinning up a wg-debugging working group. It will cover at least the following sub-items: improving Rust&#x27;s debuginfo quality (&lt;a href&#x3D;&quot;https://github.com/michaelwoerister&quot;&gt;michaelwoerister&lt;/a&gt;, &lt;a href&#x3D;&quot;https://github.com/wesleywiser&quot;&gt;wesleywiser&lt;/a&gt;), supporting split debuginfo (&lt;a href&#x3D;&quot;https://github.com/davidtwco&quot;&gt;davidtwco&lt;/a&gt;), and better integration with trace-based debuggers like &lt;code&gt;rr&lt;/code&gt; (&lt;a href&#x3D;&quot;https://github.com/pnkfelix&quot;&gt;pnkfelix&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;The immediate goals for this initiative: establish the working group, determine priorities for the backlog of debugging issues, and find out what active users of debuggers miss most when they operate on Rust code.&lt;/p&gt;
&lt;h3&gt;&lt;a href&#x3D;&quot;#faster-builds-initiatives--️&quot; aria-hidden&#x3D;&quot;true&quot; class&#x3D;&quot;anchor&quot; id&#x3D;&quot;faster-builds-initiatives--️&quot;&gt;&lt;/a&gt;Faster Builds Initiatives (👩‍💻, 🛠️)&lt;/h3&gt;
&lt;p&gt;The Rust compiler&#x27;s end-to-end latency is known to be a problem.&lt;/p&gt;
&lt;p&gt;&lt;a href&#x3D;&quot;https://github.com/lqd&quot;&gt;lqd&lt;/a&gt; is dedicating the majority of 2022 to working on this, partnering with Rust&#x27;s compiler-performance working group as well as performance experts like &lt;a href&#x3D;&quot;https://github.com/nnethercote&quot;&gt;nnethercote&lt;/a&gt;. &lt;a href&#x3D;&quot;https://github.com/lqd&quot;&gt;lqd&lt;/a&gt; has their own &lt;a href&#x3D;&quot;https://hackmd.io/3Dp68rTDSpWvRDfWF6lbMw?view&quot;&gt;living document&lt;/a&gt; that lists areas under investigation, and &lt;a href&#x3D;&quot;https://github.com/nnethercote&quot;&gt;nnethercote&lt;/a&gt; has a &lt;a href&#x3D;&quot;https://hackmd.io/YJQSj_nLSZWl2sbI84R1qA&quot;&gt;roadmap under development&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;&lt;a href&#x3D;&quot;#expressiveness-initiatives--&quot; aria-hidden&#x3D;&quot;true&quot; class&#x3D;&quot;anchor&quot; id&#x3D;&quot;expressiveness-initiatives--&quot;&gt;&lt;/a&gt;Expressiveness Initiatives (👩‍💻, 🦀)&lt;/h3&gt;
&lt;p&gt;A common refrain we hear is: &amp;quot;I need feature X, but it&#x27;s not implemented in rustc or stable.&amp;quot;
In Rust, we use an open Request-for-Comment (RFC) process for designing new features. Currently, we have &lt;a href&#x3D;&quot;https://github.com/rust-lang/rust/issues?q&#x3D;is%3Aopen+is%3Aissue+label%3AC-tracking-issue++label%3AB-RFC-approved+&quot;&gt;this set of RFCs approved&lt;/a&gt;; here are some imporant features with dedicated owners that we expect forward movement on.&lt;/p&gt;
&lt;p&gt;Generic Associated Types, or &lt;a href&#x3D;&quot;https://github.com/rust-lang/generic-associated-types-initiative/issues/4&quot;&gt;GATs&lt;/a&gt;, are an ongoing effort owned by &lt;a href&#x3D;&quot;https://github.com/jackh726&quot;&gt;jackh726&lt;/a&gt;. GATs have many applications, such as traits whose associated types have lifetimes tied to the local borrowing of the receiver type (&lt;a href&#x3D;&quot;https://github.com/rust-lang/rfcs/blob/master/text/1598-generic_associated_types.md#motivation&quot;&gt;e.g. &lt;code&gt;LendingIterator&lt;/code&gt;&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;&lt;a href&#x3D;&quot;https://github.com/rust-lang/async-fundamentals-initiative/issues/5&quot;&gt;&lt;code&gt;async fn&lt;/code&gt; in traits&lt;/a&gt; is an ongoing effort (already mentioned above) owned by &lt;a href&#x3D;&quot;https://github.com/tmandry&quot;&gt;tmandry&lt;/a&gt;. This is one of the most frequently requested features for async rust: supplying first class support for traits like &lt;code&gt;trait Foo { async fn bar(&amp;amp;self); }&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;The &lt;a href&#x3D;&quot;https://github.com/rust-lang/lang-team/issues/21&quot;&gt;safe transmute&lt;/a&gt; project, led by &lt;a href&#x3D;&quot;https://github.com/jswrenn&quot;&gt;jswrenn&lt;/a&gt;, is expected to be feature-complete in summer 2022. It will enable a large class of types to be transmuted (i.e. zero-cost type conversion) without any risk of injecting undefined behavior.&lt;/p&gt;
&lt;h3&gt;&lt;a href&#x3D;&quot;#librarification-initiatives-️&quot; aria-hidden&#x3D;&quot;true&quot; class&#x3D;&quot;anchor&quot; id&#x3D;&quot;librarification-initiatives-️&quot;&gt;&lt;/a&gt;Librarification Initiatives (🛠️)&lt;/h3&gt;
&lt;p&gt;These are initiatives dedicated to the &amp;quot;librarification&amp;quot; of the compiler: breaking the monolithic code base of &lt;code&gt;rustc&lt;/code&gt; into a set of decoupled parts that can be independently developed, and, ideally, repurposed for other kinds of tools besides &lt;code&gt;rustc&lt;/code&gt; such as &lt;code&gt;rust-analyzer&lt;/code&gt;.&lt;/p&gt;
&lt;h4&gt;&lt;a href&#x3D;&quot;#chalk&quot; aria-hidden&#x3D;&quot;true&quot; class&#x3D;&quot;anchor&quot; id&#x3D;&quot;chalk&quot;&gt;&lt;/a&gt;Chalk&lt;/h4&gt;
&lt;p&gt;&lt;a href&#x3D;&quot;https://github.com/rust-lang/chalk&quot;&gt;Chalk&lt;/a&gt; is a reimplementation of Rust&#x27;s trait system using declarative logic rules, a la Prolog.&lt;/p&gt;
&lt;p&gt;Chalk has been years in development, and has been experimentally integrated into rustc in the past. This year, &lt;a href&#x3D;&quot;https://github.com/jackh726&quot;&gt;jackh726&lt;/a&gt; and &lt;a href&#x3D;&quot;https://github.com/nikomatsakis&quot;&gt;nikomatsakis&lt;/a&gt; own the task of improving the chalk integration, to drive it to the point where the team can consider migrating to chalk as the implementation of the trait system. This will unlock many features that up until now have been too difficult to implement in the old trait system implementation, and its declarative structure will provide a proper foundation for people to reason about the &lt;em&gt;correctness&lt;/em&gt; of the trait system.&lt;/p&gt;
&lt;p&gt;If you want to help out with this, reach out to &lt;a href&#x3D;&quot;https://github.com/jackh726&quot;&gt;jackh726&lt;/a&gt; and &lt;a href&#x3D;&quot;https://github.com/nikomatsakis&quot;&gt;nikomatsakis&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;&lt;a href&#x3D;&quot;#aspirations&quot; aria-hidden&#x3D;&quot;true&quot; class&#x3D;&quot;anchor&quot; id&#x3D;&quot;aspirations&quot;&gt;&lt;/a&gt;Aspirations&lt;/h2&gt;
&lt;p&gt;We would love help with any of the areas listed on this document, but this section specifically lists areas where we know we lack resources today.&lt;/p&gt;
&lt;p&gt;If you are interested in helping with any items here, please do reach out to the owner listed; they will be thrilled to talk to you.&lt;/p&gt;
&lt;h3&gt;&lt;a href&#x3D;&quot;#p-high-aspirations-&quot; aria-hidden&#x3D;&quot;true&quot; class&#x3D;&quot;anchor&quot; id&#x3D;&quot;p-high-aspirations-&quot;&gt;&lt;/a&gt;P-high Aspirations (🦀)&lt;/h3&gt;
&lt;p&gt;&lt;a href&#x3D;&quot;https://github.com/pnkfelix&quot;&gt;pnkfelix&lt;/a&gt; and &lt;a href&#x3D;&quot;https://github.com/wesleywiser&quot;&gt;wesleywiser&lt;/a&gt;, as Compiler Team leads, are deploying processes to help us get a handle on the &amp;quot;high priority, but &lt;em&gt;not critical&lt;/em&gt;&amp;quot; issues that the compiler has accumulated. We will be gradually identifying owners for each who will move progress forward, and in general working to keep better track of the set overall.&lt;/p&gt;
&lt;p&gt;If you would like to help with the task of reviewing or resolving such issues, reach out to &lt;a href&#x3D;&quot;https://github.com/wesleywiser&quot;&gt;wesleywiser&lt;/a&gt; and &lt;a href&#x3D;&quot;https://github.com/apiraino&quot;&gt;apiraino&lt;/a&gt;, who are co-leads of WG-prioritization.&lt;/p&gt;
&lt;h3&gt;&lt;a href&#x3D;&quot;#debugging-aspirations-&quot; aria-hidden&#x3D;&quot;true&quot; class&#x3D;&quot;anchor&quot; id&#x3D;&quot;debugging-aspirations-&quot;&gt;&lt;/a&gt;Debugging Aspirations (👩‍💻)&lt;/h3&gt;
&lt;p&gt;We want better integration, at least with the popular debuggers. The command sequence to set up an idealized debugging experience is too obscure and therefore goes unused.&lt;/p&gt;
&lt;p&gt;We want to improve expression evaluation support: Today, most forms of method invocation do not work, because the debuggers do not know about Rust&#x27;s method resolution rules.&lt;/p&gt;
&lt;p&gt;We want to revisit our debugger extension architecture for rendering Rust data structures, which is currently mostly independent sets of Python scripts.&lt;/p&gt;
&lt;p&gt;If you want to help out here, please reach out to &lt;a href&#x3D;&quot;https://github.com/pnkfelix&quot;&gt;pnkfelix&lt;/a&gt; and &lt;a href&#x3D;&quot;https://github.com/wesleywiser&quot;&gt;wesleywiser&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;&lt;a href&#x3D;&quot;#faster-builds-aspirations--️&quot; aria-hidden&#x3D;&quot;true&quot; class&#x3D;&quot;anchor&quot; id&#x3D;&quot;faster-builds-aspirations--️&quot;&gt;&lt;/a&gt;Faster Builds Aspirations (👩‍💻, 🛠️)&lt;/h3&gt;
&lt;h4&gt;&lt;a href&#x3D;&quot;#parallel-compilation&quot; aria-hidden&#x3D;&quot;true&quot; class&#x3D;&quot;anchor&quot; id&#x3D;&quot;parallel-compilation&quot;&gt;&lt;/a&gt;Parallel Compilation&lt;/h4&gt;
&lt;p&gt;Parallel Compilation is one avenue for improving compiler performance. It is also a very complex area, especially when it comes to the tradeoff of how much of a hit one is willing to take on single core builds in order to enable more parallel computation. We already parallelize our LLVM invocations, but the parallelization of the rest of the compiler remains in an experimental state. This is an area we think needs long-term collaborative effort with the compiler team. We do not expect to deliver a solution here this year.&lt;/p&gt;
&lt;p&gt;If you want to discuss more with us about past attempts and ideas for the future, please reach out to &lt;a href&#x3D;&quot;https://github.com/pnkfelix&quot;&gt;pnkfelix&lt;/a&gt; and &lt;a href&#x3D;&quot;https://github.com/wesleywiser&quot;&gt;wesleywiser&lt;/a&gt;.&lt;/p&gt;
&lt;h4&gt;&lt;a href&#x3D;&quot;#incremental-compilation-aspirations&quot; aria-hidden&#x3D;&quot;true&quot; class&#x3D;&quot;anchor&quot; id&#x3D;&quot;incremental-compilation-aspirations&quot;&gt;&lt;/a&gt;Incremental Compilation Aspirations&lt;/h4&gt;
&lt;p&gt;Incremental compilation performance and stability are both ongoing concerns to the team. We &lt;em&gt;know&lt;/em&gt; there is significant room to improve the effectiveness of incremental compilation, in terms of reducing the amount of redundant work done by successive &lt;code&gt;rustc&lt;/code&gt; invocations.&lt;/p&gt;
&lt;p&gt;In addition, there is a significant amount of work that could be done to improve our testing infrastructure for incremental compilation which does not require deep knowledge of the compiler. We have had to disable and subsequently reenable incremental compilation on the stable release; we want to expand our validation strategies so that we get alerted to problems in incremental compilation well before they come close to the stable channel.&lt;/p&gt;
&lt;p&gt;If you want to learn more, reach out to &lt;a href&#x3D;&quot;https://github.com/cjgillot&quot;&gt;cjgillot&lt;/a&gt; and &lt;a href&#x3D;&quot;https://github.com/Aaron1011&quot;&gt;Aaron Hill&lt;/a&gt;.&lt;/p&gt;
&lt;h4&gt;&lt;a href&#x3D;&quot;#inter-crate-sharing-aspirations&quot; aria-hidden&#x3D;&quot;true&quot; class&#x3D;&quot;anchor&quot; id&#x3D;&quot;inter-crate-sharing-aspirations&quot;&gt;&lt;/a&gt;Inter-crate Sharing Aspirations&lt;/h4&gt;
&lt;p&gt;nnethercote has noted that there may be opportunities
to improve end-to-end compilation time for multi-crate builds by identifying redundant activity that can be shared between builds of distinct crates. (For example, the metadata from libstd is read and decoded on every single crate compile.)&lt;/p&gt;
&lt;p&gt;If you are interested in exploring this idea further, reach out to &lt;a href&#x3D;&quot;https://github.com/nnethercote&quot;&gt;nnethercote&lt;/a&gt; and &lt;a href&#x3D;&quot;https://github.com/lqd&quot;&gt;lqd&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;&lt;a href&#x3D;&quot;#expressiveness-aspirations--&quot; aria-hidden&#x3D;&quot;true&quot; class&#x3D;&quot;anchor&quot; id&#x3D;&quot;expressiveness-aspirations--&quot;&gt;&lt;/a&gt;Expressiveness Aspirations (🦀, 👩‍💻)&lt;/h3&gt;
&lt;p&gt;const generics and const eval are making steady progress. There are a &lt;em&gt;lot&lt;/em&gt; of feature flags, which implies there&#x27;s a lot of knobs that could be turned on and off.&lt;/p&gt;
&lt;p&gt;What we can probably use the most help with is in identifying what subset of the features we should be striving to stabilize in order to unlock specific use cases for Rust developers.&lt;/p&gt;
&lt;p&gt;So, if you or your team is enthusiastically awaiting const generics or const eval, reach out to &lt;a href&#x3D;&quot;https://github.com/lcnr&quot;&gt;lcnr&lt;/a&gt; and &lt;a href&#x3D;&quot;https://github.com/oli-obk&quot;&gt;oli-obk&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;&lt;a href&#x3D;&quot;#librarification-aspirations-️&quot; aria-hidden&#x3D;&quot;true&quot; class&#x3D;&quot;anchor&quot; id&#x3D;&quot;librarification-aspirations-️&quot;&gt;&lt;/a&gt;Librarification Aspirations (🛠️)&lt;/h3&gt;
&lt;h4&gt;&lt;a href&#x3D;&quot;#mir-tooling&quot; aria-hidden&#x3D;&quot;true&quot; class&#x3D;&quot;anchor&quot; id&#x3D;&quot;mir-tooling&quot;&gt;&lt;/a&gt;MIR tooling&lt;/h4&gt;
&lt;p&gt;Various stakeholders, especially in the formal methods space, are making extensions to Rust that are based on analyzing MIR, the intermediate representation used by the compiler. Should we be trying to stabilize that as an interop format of some kind?&lt;/p&gt;
&lt;p&gt;For example, &lt;a href&#x3D;&quot;https://github.com/model-checking/kani&quot;&gt;Kani&lt;/a&gt; is a bit-precise model-checker for Rust under development at Amazon Web Services. It is implemented as another backend on &lt;code&gt;rustc&lt;/code&gt;; but it would be cleaner if rustc could just generate MIR and their compiler could consume MIR. &lt;a href&#x3D;&quot;https://github.com/viperproject/prusti-dev#prusti&quot;&gt;Prusti&lt;/a&gt; and &lt;a href&#x3D;&quot;https://github.com/xldenis/creusot#about&quot;&gt;Creusot&lt;/a&gt; could likewise benefit from a stable MIR interop.&lt;/p&gt;
&lt;p&gt;Reach out to &lt;a href&#x3D;&quot;https://github.com/xldenis&quot;&gt;xldenis&lt;/a&gt;, from the LMF at the University of Paris-Saclay (and co-lead of the Rust Formal Methods working group), and &lt;a href&#x3D;&quot;https://github.com/pnkfelix&quot;&gt;pnkfelix&lt;/a&gt; if you are interested in helping us here.&lt;/p&gt;
&lt;h3&gt;&lt;a href&#x3D;&quot;#compiler-team-operations-aspirations-️&quot; aria-hidden&#x3D;&quot;true&quot; class&#x3D;&quot;anchor&quot; id&#x3D;&quot;compiler-team-operations-aspirations-️&quot;&gt;&lt;/a&gt;Compiler Team Operations Aspirations (🛠️)&lt;/h3&gt;
&lt;h4&gt;&lt;a href&#x3D;&quot;#mcve-reduction-tooling&quot; aria-hidden&#x3D;&quot;true&quot; class&#x3D;&quot;anchor&quot; id&#x3D;&quot;mcve-reduction-tooling&quot;&gt;&lt;/a&gt;MCVE reduction tooling&lt;/h4&gt;
&lt;p&gt;One common task for compiler developers is to create a &lt;a href&#x3D;&quot;https://github.com/rust-lang/rust/issues?q&#x3D;is%3Aopen+is%3Aissue+label%3AE-needs-mcve+&quot;&gt;minimal complete verifiable example&lt;/a&gt;. This task is largely mechanical; pnkfelix has a &lt;a href&#x3D;&quot;https://blog.pnkfx.org/blog/2019/11/18/rust-bug-minimization-patterns/&quot;&gt;blog post&lt;/a&gt; about Rust source-to-source tranformations that accomplish this. But despite its mechanical nature, the current state of the art in automating this task is in tools like &lt;a href&#x3D;&quot;https://github.com/csmith-project/creduce&quot;&gt;creduce&lt;/a&gt;, which have some big limitations (such as only working on a single file at a time).&lt;/p&gt;
&lt;p&gt;This is an area where you do not need any knowledge of the &lt;code&gt;rustc&lt;/code&gt; source code at all. Anyone with an interest in programming language technology can get involved; e.g. one might consider adding IDE commands for certain code reducing transformations.&lt;/p&gt;
&lt;p&gt;If you are interested in helping in this area, please reach out to &lt;a href&#x3D;&quot;https://github.com/pnkfelix&quot;&gt;pnkfelix&lt;/a&gt;.&lt;/p&gt;
&lt;h4&gt;&lt;a href&#x3D;&quot;#performance-dashboard&quot; aria-hidden&#x3D;&quot;true&quot; class&#x3D;&quot;anchor&quot; id&#x3D;&quot;performance-dashboard&quot;&gt;&lt;/a&gt;Performance Dashboard&lt;/h4&gt;
&lt;p&gt;&lt;a href&#x3D;&quot;https://perf.rust-lang.org/&quot;&gt;perf.rust-lang.org&lt;/a&gt; is a dashboard that measures the performance of &lt;code&gt;rustc&lt;/code&gt;, in terms of resources (time and memory) consumed during compilation. &lt;a href&#x3D;&quot;https://github.com/rust-timer&quot;&gt;@rust-timer&lt;/a&gt; is a bot that summarizes whether a given Pull Request regressed or improved performance.&lt;/p&gt;
&lt;p&gt;The performance working group has many ideas for things to improve in these tools, but limited resources. This is an area where you don&#x27;t need any compiler expertise to make a huge impact; for example, our Web Front-end could use work. And Data Scientists might have useful insights into our problems. Beyond just measuring the compiler&#x27;s own performance, we&#x27;re also interested in measuring the runtime performance of produced binaries.&lt;/p&gt;
&lt;p&gt;Reach out to &lt;a href&#x3D;&quot;https://github.com/rylev&quot;&gt;rylev&lt;/a&gt; and &lt;a href&#x3D;&quot;https://github.com/Mark-Simulacrum&quot;&gt;Mark-Simulacrum&lt;/a&gt;, performance working group lead, if you want to help.&lt;/p&gt;
&lt;h3&gt;&lt;a href&#x3D;&quot;#compiler-backend-aspirations-️-&quot; aria-hidden&#x3D;&quot;true&quot; class&#x3D;&quot;anchor&quot; id&#x3D;&quot;compiler-backend-aspirations-️-&quot;&gt;&lt;/a&gt;Compiler Backend Aspirations (🛠️, 👩‍💻)&lt;/h3&gt;
&lt;h4&gt;&lt;a href&#x3D;&quot;#ease-writing-new-backends&quot; aria-hidden&#x3D;&quot;true&quot; class&#x3D;&quot;anchor&quot; id&#x3D;&quot;ease-writing-new-backends&quot;&gt;&lt;/a&gt;Ease writing new backends&lt;/h4&gt;
&lt;p&gt;One source of tedium when defining a new Rust compiler backend is implementing the intrinsics that each backend must provide. But a small change to the intrinsic system: namely, allowing intrinsics to define a &lt;a href&#x3D;&quot;https://github.com/rust-lang/rust/issues/93145&quot;&gt;fallback MIR implementation&lt;/a&gt;, could ease that burden. Reach out to &lt;a href&#x3D;&quot;https://github.com/scottmcm&quot;&gt;scottmcm&lt;/a&gt; if you are interested in helping out here.&lt;/p&gt;
&lt;h4&gt;&lt;a href&#x3D;&quot;#cranelift&quot; aria-hidden&#x3D;&quot;true&quot; class&#x3D;&quot;anchor&quot; id&#x3D;&quot;cranelift&quot;&gt;&lt;/a&gt;Cranelift&lt;/h4&gt;
&lt;p&gt;The &lt;a href&#x3D;&quot;https://github.com/bytecodealliance/wasmtime/tree/main/cranelift&quot;&gt;Cranelift Code Generator&lt;/a&gt; is getting a lot of attention from various parties. rustc has a &lt;a href&#x3D;&quot;https://github.com/bjorn3/rustc_codegen_cranelift&quot;&gt;Cranelift backend&lt;/a&gt;. If you are interested in helping out with it, reach out to &lt;a href&#x3D;&quot;https://github.com/bjorn3&quot;&gt;bjorn3&lt;/a&gt;.&lt;/p&gt;
&lt;h4&gt;&lt;a href&#x3D;&quot;#gcc-backend&quot; aria-hidden&#x3D;&quot;true&quot; class&#x3D;&quot;anchor&quot; id&#x3D;&quot;gcc-backend&quot;&gt;&lt;/a&gt;GCC backend&lt;/h4&gt;
&lt;p&gt;In addition to the LLVM and Cranelift backends, there is also a new backend under development that uses &lt;code&gt;libgccjit&lt;/code&gt; from GCC (which, as many have clarified, is usable for ahead-of-time as well as just-in-time compilation). This backend enables Rust to target more platforms that are not supported by LLVM.&lt;/p&gt;
&lt;p&gt;If you are interested in helping out with this project, reach out to &lt;a href&#x3D;&quot;https://github.com/antoyo&quot;&gt;antoyo&lt;/a&gt; and &lt;a href&#x3D;&quot;https://github.com/bjorn3&quot;&gt;bjorn3&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;&lt;a href&#x3D;&quot;#diagnostics-aspirations-&quot; aria-hidden&#x3D;&quot;true&quot; class&#x3D;&quot;anchor&quot; id&#x3D;&quot;diagnostics-aspirations-&quot;&gt;&lt;/a&gt;Diagnostics Aspirations (👩‍💻)&lt;/h3&gt;
&lt;p&gt;The Rust compiler has pretty good diagnotics. But the good news is, there&#x27;s a &lt;a href&#x3D;&quot;https://en.wikipedia.org/wiki/Full_employment_theorem&quot;&gt;full employment theorem&lt;/a&gt; for diagnostics engineers which is supported by the 1,500+ &lt;a href&#x3D;&quot;https://github.com/rust-lang/rust/issues?q&#x3D;is%3Aopen+is%3Aissue+label%3AA-diagnostics&quot;&gt;open diagnostics issues&lt;/a&gt; we have.&lt;/p&gt;
&lt;p&gt;Diagnostics improvements are an &lt;em&gt;excellent&lt;/em&gt; first step for learning about how to contribute to the Rust compiler. If you&#x27;re interested in helping out but don&#x27;t have any idea where to start, fixing diagnostic bugs is a great jumping off point, and you can reach out to &lt;a href&#x3D;&quot;https://github.com/estebank&quot;&gt;estebank&lt;/a&gt; to find out more about how to help.&lt;/p&gt;
&lt;h2&gt;&lt;a href&#x3D;&quot;#conclusion&quot; aria-hidden&#x3D;&quot;true&quot; class&#x3D;&quot;anchor&quot; id&#x3D;&quot;conclusion&quot;&gt;&lt;/a&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Reading over this list, the number of items on it seems quite daunting! We believe these initiatives will provide the highest impact to the Rust community by helping to fulfill Rust&#x27;s promise, delighting Rust developers and improving our contributor workflows and aligns well with the results of the &lt;a href&#x3D;&quot;https://blog.rust-lang.org/2022/02/15/Rust-Survey-2021.html&quot;&gt;2021 Rust Survey&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;While we think we will be able to make signficant progress on these initiatives this year, project estimation is a difficult and inexact science, especially for open source projects. What we will achieve is ultimately a result of who decides to contribute. Our aspirational goals are currently just that: aspirations.&lt;/p&gt;
&lt;p&gt;This is where you all, the Rust community (including &lt;em&gt;future members&lt;/em&gt; of that community) come into the picture. Each item has one or two people listed with it; if you&#x27;re feeling inspired, please do contact us!&lt;/p&gt;
&lt;h2&gt;&lt;a href&#x3D;&quot;#faq&quot; aria-hidden&#x3D;&quot;true&quot; class&#x3D;&quot;anchor&quot; id&#x3D;&quot;faq&quot;&gt;&lt;/a&gt;FAQ&lt;/h2&gt;
&lt;h4&gt;&lt;a href&#x3D;&quot;#how-can-i-learn-about-progress-on-all-this-stuff-will-we-see-another-post-like-this-soon&quot; aria-hidden&#x3D;&quot;true&quot; class&#x3D;&quot;anchor&quot; id&#x3D;&quot;how-can-i-learn-about-progress-on-all-this-stuff-will-we-see-another-post-like-this-soon&quot;&gt;&lt;/a&gt;How can I learn about progress on all this stuff? Will we see another post like this soon?&lt;/h4&gt;
&lt;p&gt;The Rust project constantly  experiments with different ways to track progress on its on-going initiatives. We do not yet have a single place that summarizes the status of everything, though there is some effort towards making better use of Github Projects for this; see e.g. what the lang team is doing with its &lt;a href&#x3D;&quot;https://github.com/orgs/rust-lang/projects/16&quot;&gt;initiatives&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The compiler team leadership plans to put out a post in June summarizing the progress so far on the items listed here, and another post in November with a retrospective on how the year went.&lt;/p&gt;
&lt;h4&gt;&lt;a href&#x3D;&quot;#i-did-not-see-any-mention-of-monadic-burritos-or-other-non-rust-language-feature-why-is-that-not-part-of-your-plan&quot; aria-hidden&#x3D;&quot;true&quot; class&#x3D;&quot;anchor&quot; id&#x3D;&quot;i-did-not-see-any-mention-of-monadic-burritos-or-other-non-rust-language-feature-why-is-that-not-part-of-your-plan&quot;&gt;&lt;/a&gt;I did not see any mention of monadic burritos (or other non-Rust language feature); why is that not part of your plan?&lt;/h4&gt;
&lt;p&gt;The scope of this doc is largely restricted to Compiler Team issues. The Language Team is planning to write more about their initiatives for this year and beyond in another post. Stay tuned for that!&lt;/p&gt;
&lt;h4&gt;&lt;a href&#x3D;&quot;#what-do-i-do-if-im-interested-in-learning-more-about-a-specific-item-on-this-list&quot; aria-hidden&#x3D;&quot;true&quot; class&#x3D;&quot;anchor&quot; id&#x3D;&quot;what-do-i-do-if-im-interested-in-learning-more-about-a-specific-item-on-this-list&quot;&gt;&lt;/a&gt;What do I do if I&#x27;m interested in learning more about a specific item on this list?&lt;/h4&gt;
&lt;p&gt;Each item in this list has one or more owners listed with it. The Rust Compiler team largely communicates via the &lt;a href&#x3D;&quot;https://rust-lang.zulipchat.com/&quot;&gt;Zulip&lt;/a&gt; chat platform.&lt;/p&gt;
&lt;p&gt;So: set up a Zulip account, sign into Zulip, and join the &lt;a href&#x3D;&quot;https://rust-lang.zulipchat.com/#narrow/stream/122652-new-members/topic/compiler.202022&quot;&gt;#&lt;strong&gt;new members&amp;gt;compiler 2022&lt;/strong&gt;&lt;/a&gt; topic. Tell the group which item you&#x27;re interested in, and also mention the owners listed with that topic so that they know to join you in that conversation channel. We will help you get started from there.&lt;/p&gt;
&lt;h4&gt;&lt;a href&#x3D;&quot;#what-do-i-do-if-im-interested-in-compiler-development-but-have-no-experience-in-compilers&quot; aria-hidden&#x3D;&quot;true&quot; class&#x3D;&quot;anchor&quot; id&#x3D;&quot;what-do-i-do-if-im-interested-in-compiler-development-but-have-no-experience-in-compilers&quot;&gt;&lt;/a&gt;What do I do if I&#x27;m interested in compiler development but have no experience in compilers?&lt;/h4&gt;
&lt;p&gt;This is not a problem! Many members of our community learned about compilers by working on rustc, and we encourage others to do so as well. You can start by reading the &lt;a href&#x3D;&quot;https://rustc-dev-guide.rust-lang.org/&quot;&gt;Rustc Dev Guide&lt;/a&gt; and by joining us on &lt;a href&#x3D;&quot;https://rust-lang.zulipchat.com/&quot;&gt;Zulip&lt;/a&gt;. You may also benefit from watching the RustConf 2021 presentation on &lt;a href&#x3D;&quot;https://www.youtube.com/watch?v&#x3D;vCODCbUSA_w&quot;&gt;Contributing to the Compiler&lt;/a&gt; by &lt;a href&#x3D;&quot;https://github.com/estebank&quot;&gt;estebank&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;In addition, there are areas in this project where people without compiler expertise can have impact. For example, as mentioned in the &lt;a href&#x3D;&quot;#Performance-Dashboard&quot;&gt;Performance Dashboard&lt;/a&gt; section, some of our internal tools could use some web front-end work.&lt;/p&gt;
&lt;h4&gt;&lt;a href&#x3D;&quot;#how-can-i-contact-an-items-owners-or-sponsor-their-work-on-rust&quot; aria-hidden&#x3D;&quot;true&quot; class&#x3D;&quot;anchor&quot; id&#x3D;&quot;how-can-i-contact-an-items-owners-or-sponsor-their-work-on-rust&quot;&gt;&lt;/a&gt;How can I contact an item&#x27;s owners or sponsor their work on Rust?&lt;/h4&gt;
&lt;p&gt;This table lists the item owners mentioned above, their &lt;a href&#x3D;&quot;https://rust-lang.zulipchat.com/&quot;&gt;Zulip&lt;/a&gt; username and if they are accepting sponsorships to help them work on Rust:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Owner&lt;/th&gt;
&lt;th&gt;Zulip Username&lt;/th&gt;
&lt;th&gt;Accepting sponsorships?&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href&#x3D;&quot;https://github.com/Aaron1011&quot;&gt;Aaron Hill&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;@Aaron Hill&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;No&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href&#x3D;&quot;https://github.com/antoyo&quot;&gt;antoyo&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;@antoyo&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Yes: &lt;a href&#x3D;&quot;https://github.com/sponsors/antoyo&quot;&gt;GitHub Sponsors&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href&#x3D;&quot;https://github.com/apiraino&quot;&gt;apiraino&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;@apiraino&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;No&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href&#x3D;&quot;https://github.com/bjorn3&quot;&gt;bjorn3&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;@bjorn3&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Yes: &lt;a href&#x3D;&quot;https://liberapay.com/bjorn3&quot;&gt;Liberapay&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href&#x3D;&quot;https://github.com/cjgillot&quot;&gt;cjgillot&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;@cjgillot&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;No&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href&#x3D;&quot;https://github.com/davidtwco&quot;&gt;davidtwco&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;@davidtwco&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;No: works on Rust at Huawei R&amp;amp;D UK&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href&#x3D;&quot;https://github.com/estebank&quot;&gt;estebank&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;@Esteban Küber&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;No: works on Rust at Amazon Web Services&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href&#x3D;&quot;https://github.com/jackh726&quot;&gt;jackh726&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;@Jack Huey&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;No&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href&#x3D;&quot;https://github.com/jswrenn&quot;&gt;jswrenn&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;@Jack Wrenn&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;No: works on Rust at Amazon Web Services&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href&#x3D;&quot;https://github.com/lcnr&quot;&gt;lcnr&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;@lcnr&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Yes: &lt;a href&#x3D;&quot;https://lcnr.de/funding/&quot;&gt;https://lcnr.de/funding/&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href&#x3D;&quot;https://github.com/lqd&quot;&gt;lqd&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;@lqd&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;No: sponsored by the Internet Security Research Group&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href&#x3D;&quot;https://github.com/Mark-Simulacrum&quot;&gt;Mark-Simulacrum&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;@simulacrum&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Yes, &lt;a href&#x3D;&quot;https://github.com/sponsors/Mark-Simulacrum&quot;&gt;GitHub Sponsors&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href&#x3D;&quot;https://github.com/michaelwoerister&quot;&gt;michaelwoerister&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;@mw&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;No: works on Rust at Microsoft&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href&#x3D;&quot;https://github.com/nikomatsakis&quot;&gt;nikomatsakis&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;@nikomatsakis&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;No: works on Rust at Amazon Web Services&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href&#x3D;&quot;https://github.com/nnethercote&quot;&gt;nnethercote&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;@nnethercote&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;No: works on Rust at Futurewei&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href&#x3D;&quot;https://github.com/oli-obk&quot;&gt;oli-obk&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;@oli&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;No: works on Rust at Amazon Web Services&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href&#x3D;&quot;https://github.com/pnkfelix&quot;&gt;pnkfelix&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;@pnkfelix&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;No: works on Rust at Amazon Web Services&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href&#x3D;&quot;https://github.com/rylev&quot;&gt;rylev&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;@rylev&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;No: works on Rust at Microsoft&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href&#x3D;&quot;https://github.com/scottmcm&quot;&gt;scottmcm&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;@scottmcm&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;No&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href&#x3D;&quot;https://github.com/tmandry&quot;&gt;tmandry&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;@tmandry&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;No: works on Rust at Google&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href&#x3D;&quot;https://github.com/wesleywiser&quot;&gt;wesleywiser&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;@Wesley Wiser&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;No: works on Rust at Microsoft&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href&#x3D;&quot;https://github.com/xldenis&quot;&gt;xldenis&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;@Xavier Denis&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;No&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
</content>

        <author>
            <name>Felix Klock, Wesley Wiser</name>
        </author>
    </entry>
    
    <entry>
        <title>1.59.0 pre-release testing</title>
        <link rel="alternate" href="https://blog.rust-lang.org/inside-rust/2022/02/22/1.59.0-prerelease.html" type="text/html" title="1.59.0 pre-release testing" />
        <published>2022-02-22T00:00:00+00:00</published>
        <updated>2022-02-22T00:00:01+00:00</updated>
        <id>https://blog.rust-lang.org/inside-rust/2022/02/22/1.59.0-prerelease.html</id>
        <content type="html" xml:base="https://blog.rust-lang.org/inside-rust/2022/02/22/1.59.0-prerelease.html">&lt;p&gt;The 1.59.0 pre-release is ready for testing. The release is scheduled for this
Thursday, February 24th. &lt;a href&#x3D;&quot;https://github.com/rust-lang/rust/blob/stable/RELEASES.md#version-1590-2022-02-22&quot;&gt;Release notes can be found here.&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;You can try it out locally by running:&lt;/p&gt;
&lt;pre&gt;&lt;code class&#x3D;&quot;language-plain&quot;&gt;RUSTUP_DIST_SERVER&#x3D;https://dev-static.rust-lang.org rustup update stable
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The index is &lt;a href&#x3D;&quot;https://dev-static.rust-lang.org/dist/2022-02-22/index.html&quot;&gt;https://dev-static.rust-lang.org/dist/2022-02-22/index.html&lt;/a&gt;. You
can leave feedback on the &lt;a href&#x3D;&quot;https://internals.rust-lang.org/t/rust-1-59-0-prerelease-testing/&quot;&gt;internals thread&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The release team is also thinking about changes to our pre-release process:
we&#x27;d love your feedback &lt;a href&#x3D;&quot;https://github.com/rust-lang/release-team/issues/16&quot;&gt;on this GitHub issue&lt;/a&gt;.&lt;/p&gt;
</content>

        <author>
            <name>Mark Rousskov</name>
        </author>
    </entry>
    
</feed>

<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
    <generator uri="https://blog.rust-lang.org/inside-rust/" version="0.1.0">Inside Rust Blog</generator>
    <link href="https://blog.rust-lang.org/inside-rust/feed.xml" rel="self" type="application/atom+xml" />
    <link href="https://blog.rust-lang.org/inside-rust/" rel="alternate" type="text/html" />
    <id>https://blog.rust-lang.org/inside-rust/</id>
    <title>Inside Rust Blog</title>
    <subtitle>Want to follow along with Rust development? Curious how you might get involved? Take a look!</subtitle>
    <author>
        <name>Maintained by the Rust Teams.</name>
        <uri>https://github.com/rust-lang/blog.rust-lang.org/</uri>
    </author>
    <updated>2021-07-01T21:16:49+00:00</updated>

    
    <entry>
        <title>Rust Compiler June Steering Cycle</title>
        <link rel="alternate" href="https://blog.rust-lang.org/inside-rust/2021/06/23/compiler-team-june-steering-cycle.html" type="text/html" title="Rust Compiler June Steering Cycle" />
        <published>2021-06-23T00:00:00+00:00</published>
        <updated>2021-06-23T00:00:00+00:00</updated>
        <id>https://blog.rust-lang.org/inside-rust/2021/06/23/compiler-team-june-steering-cycle.html</id>
        <content type="html" xml:base="https://blog.rust-lang.org/inside-rust/2021/06/23/compiler-team-june-steering-cycle.html">&lt;p&gt;On &lt;a href&#x3D;&quot;https://zulip-archive.rust-lang.org/238009tcompilermeetings/93506planningmeeting20210604.html&quot;&gt;Friday, June 4th&lt;/a&gt;, the Rust Compiler team had a planning meeting for the June steering cycle.&lt;/p&gt;
&lt;p&gt;Every fourth Friday, the Rust compiler team decides how
it is going to use its scheduled steering and design meeting time over the next
three Fridays.&lt;/p&gt;
&lt;p&gt;On &lt;a href&#x3D;&quot;https://github.com/rust-lang/compiler-team/issues/435&quot;&gt;Friday, 25 June&lt;/a&gt;, we will be having a meeting to review a
document discussing the incremental compilation fingerprint issue that led to
the emergency 1.52.1 release, and the steps the project is taking to prevent
future occurrences of similar scenarios. (This date is a change in schedule from
its original date that had been discussed in the planning meeting.)&lt;/p&gt;
&lt;p&gt;The meeting will run from 2pm to 3pm GMT, and will take place on the
&lt;a href&#x3D;&quot;https://rust-lang.zulipchat.com/#narrow/stream/238009-t-compiler.2Fmeetings&quot;&gt;T-compiler/meetings zulip stream&lt;/a&gt;.&lt;/p&gt;
</content>

        <author>
            <name>Felix Klock</name>
        </author>
    </entry>
    
    <entry>
        <title>Please welcome Boxy, Léo Lanteri Thauvin and the8472 to compiler-contributors</title>
        <link rel="alternate" href="https://blog.rust-lang.org/inside-rust/2021/06/15/boxyuwu-leseulartichaut-the8472-compiler-contributors.html" type="text/html" title="Please welcome Boxy, Léo Lanteri Thauvin and the8472 to compiler-contributors" />
        <published>2021-06-15T00:00:00+00:00</published>
        <updated>2021-06-15T00:00:00+00:00</updated>
        <id>https://blog.rust-lang.org/inside-rust/2021/06/15/boxyuwu-leseulartichaut-the8472-compiler-contributors.html</id>
        <content type="html" xml:base="https://blog.rust-lang.org/inside-rust/2021/06/15/boxyuwu-leseulartichaut-the8472-compiler-contributors.html">&lt;p&gt;Please welcome &lt;a href&#x3D;&quot;https://github.com/BoxyUwU&quot;&gt;Boxy&lt;/a&gt;, &lt;a href&#x3D;&quot;https://github.com/LeSeulArtichaut&quot;&gt;Léo Lanteri Thauvin&lt;/a&gt; and &lt;a href&#x3D;&quot;https://github.com/the8472&quot;&gt;the8472&lt;/a&gt; to the &lt;a href&#x3D;&quot;https://rust-lang.github.io/rfcs/2689-compiler-team-contributors.html&quot;&gt;compiler-contributors&lt;/a&gt; group!&lt;/p&gt;
&lt;p&gt;&lt;a href&#x3D;&quot;https://github.com/BoxyUwU&quot;&gt;Boxy&lt;/a&gt; has been working on pushing const generics forward by &lt;a href&#x3D;&quot;https://github.com/rust-lang/rust/pull/81577&quot;&gt;implementing parts&lt;/a&gt; of the &lt;code&gt;const_evaluatable_checked&lt;/code&gt; feature, &lt;a href&#x3D;&quot;https://github.com/rust-lang/rust/pull/82067&quot;&gt;fixing bugs&lt;/a&gt; and &lt;a href&#x3D;&quot;https://github.com/rust-lang/rust/pull/85957&quot;&gt;making rustdoc work with const generics&lt;/a&gt;.
Boxy is also a frequent contributor to &lt;a href&#x3D;&quot;https://rust-lang.zulipchat.com/#narrow/stream/260443-project-const-generics&quot;&gt;#project-const-generics&lt;/a&gt; discussions and meetings.&lt;/p&gt;
&lt;p&gt;&lt;a href&#x3D;&quot;https://github.com/LeSeulArtichaut&quot;&gt;Léo Lanteri Thauvin&lt;/a&gt; has been a consistent contributor of &lt;a href&#x3D;&quot;https://github.com/rust-lang/rust/pull/78182&quot;&gt;refactorings and improvements&lt;/a&gt; to rustc.
Recently, Léo has been &lt;a href&#x3D;&quot;https://github.com/rust-lang/rust/pull/83129&quot;&gt;implementing&lt;/a&gt; a &lt;a href&#x3D;&quot;https://github.com/rust-lang/compiler-team/issues/402&quot;&gt;Major Change Proposal&lt;/a&gt; to migrate the &lt;code&gt;unsafe&lt;/code&gt; checker to operate on THIR instead of MIR.&lt;/p&gt;
&lt;p&gt;&lt;a href&#x3D;&quot;https://github.com/the8472&quot;&gt;the8472&lt;/a&gt; has been a frequent contributor of performance improvements to both the &lt;a href&#x3D;&quot;https://github.com/rust-lang/rust/pull/84965&quot;&gt;compiler itself&lt;/a&gt; as well as the &lt;a href&#x3D;&quot;https://github.com/rust-lang/rust/pull/83245&quot;&gt;standard library&lt;/a&gt;.
&lt;a href&#x3D;&quot;https://github.com/the8472&quot;&gt;the8472&lt;/a&gt; can also be frequently found on Zulip offering advice and help.&lt;/p&gt;
&lt;p&gt;Congratulations &lt;a href&#x3D;&quot;https://github.com/BoxyUwU&quot;&gt;Boxy&lt;/a&gt;, &lt;a href&#x3D;&quot;https://github.com/LeSeulArtichaut&quot;&gt;Léo Lanteri Thauvin&lt;/a&gt; and &lt;a href&#x3D;&quot;https://github.com/the8472&quot;&gt;the8472&lt;/a&gt; and thanks!&lt;/p&gt;
</content>

        <author>
            <name>Wesley Wiser</name>
        </author>
    </entry>
    
    <entry>
        <title>1.53.0 pre-release testing</title>
        <link rel="alternate" href="https://blog.rust-lang.org/inside-rust/2021/06/15/1.53.0-prelease.html" type="text/html" title="1.53.0 pre-release testing" />
        <published>2021-06-15T00:00:00+00:00</published>
        <updated>2021-06-15T00:00:01+00:00</updated>
        <id>https://blog.rust-lang.org/inside-rust/2021/06/15/1.53.0-prelease.html</id>
        <content type="html" xml:base="https://blog.rust-lang.org/inside-rust/2021/06/15/1.53.0-prelease.html">&lt;p&gt;The 1.53.0 pre-release is ready for testing. The release is scheduled for this
Thursday, June 17th. &lt;a href&#x3D;&quot;https://github.com/rust-lang/rust/blob/master/RELEASES.md#version-1530-2021-06-17&quot;&gt;Release notes can be found here.&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;You can try it out locally by running:&lt;/p&gt;
&lt;pre&gt;&lt;code class&#x3D;&quot;language-plain&quot;&gt;RUSTUP_DIST_SERVER&#x3D;https://dev-static.rust-lang.org rustup update stable
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The index is &lt;a href&#x3D;&quot;https://dev-static.rust-lang.org/dist/2021-06-15/index.html&quot;&gt;https://dev-static.rust-lang.org/dist/2021-06-15/index.html&lt;/a&gt;. You
can leave feedback on the &lt;a href&#x3D;&quot;https://internals.rust-lang.org/t/1-53-0-prerelease-testing/14884&quot;&gt;internals thread&lt;/a&gt;.&lt;/p&gt;
</content>

        <author>
            <name>Mark Rousskov</name>
        </author>
    </entry>
    
    <entry>
        <title>What the Error Handling Project Group is Working Towards</title>
        <link rel="alternate" href="https://blog.rust-lang.org/inside-rust/2021/05/15/What-the-error-handling-project-group-is-working-towards.html" type="text/html" title="What the Error Handling Project Group is Working Towards" />
        <published>2021-05-15T00:00:00+00:00</published>
        <updated>2021-05-15T00:00:00+00:00</updated>
        <id>https://blog.rust-lang.org/inside-rust/2021/05/15/What-the-error-handling-project-group-is-working-towards.html</id>
        <content type="html" xml:base="https://blog.rust-lang.org/inside-rust/2021/05/15/What-the-error-handling-project-group-is-working-towards.html">&lt;p&gt;This blog post is a follow up of our &lt;a href&#x3D;&quot;https://blog.rust-lang.org/inside-rust/2020/11/23/What-the-error-handling-project-group-is-working-on.html&quot;&gt;previous&lt;/a&gt; post detailing what we&#x27;re working on now. We&#x27;ve been iterating for a while now on some of the challenges that we see with error handling today and have reached the point where we want to describe some of the new changes we&#x27;re working towards. But first we need to describe the main challenges we&#x27;ve identified.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Disclaimer: &lt;em&gt;This post is equal parts plan and aspiration. There are technical challenges here to sort out so the final outcome may look rather different from our initial vision, so please don&#x27;t assume any of this is final.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;&lt;a href&#x3D;&quot;#error-handling-today&quot; aria-hidden&#x3D;&quot;true&quot; class&#x3D;&quot;anchor&quot; id&#x3D;&quot;error-handling-today&quot;&gt;&lt;/a&gt;Error Handling Today&lt;/h2&gt;
&lt;p&gt;The first challenge we&#x27;d like to solve is that it&#x27;s easy to lose context accidentally when reporting errors. There are a couple of places this can happen, either when printing an error and forgetting to print sources, when returning an error from main, or when converting a recoverable error into a non recoverable error.&lt;/p&gt;
&lt;p&gt;Consider this example:&lt;/p&gt;
&lt;pre&gt;&lt;code class&#x3D;&quot;language-rust&quot;&gt;use std::fmt;

// We have a program that loads a config and expects that
// loading the config will always succeed.
fn main() {
    let _config &#x3D; load_config()
        .expect(&amp;quot;config is always valid and exists&amp;quot;);
}

// We have a dummy implementation of load_config which
// always errors, since we&#x27;re just focusing on diagnostics
// here.
fn load_config() -&amp;gt; Result&amp;lt;(), Error&amp;gt; {
    Err(Error(SourceError))
}

// And we have an error type that just prints &amp;quot;invalid
// config&amp;quot; and has a source error which just prints &amp;quot;config
// file does not exist&amp;quot;
#[derive(Debug)]
struct Error(SourceError);

impl fmt::Display for Error {
    fn fmt(&amp;amp;self, f: &amp;amp;mut fmt::Formatter&amp;lt;&#x27;_&amp;gt;) -&amp;gt; fmt::Result {
        f.write_str(&amp;quot;invalid config&amp;quot;)
    }
}

impl std::error::Error for Error {
    fn source(&amp;amp;self) -&amp;gt; Option&amp;lt;&amp;amp;(dyn std::error::Error + &#x27;static)&amp;gt; {
        Some(&amp;amp;self.0)
    }
}

#[derive(Debug)]
struct SourceError;

impl fmt::Display for SourceError {
    fn fmt(&amp;amp;self, f: &amp;amp;mut fmt::Formatter&amp;lt;&#x27;_&amp;gt;) -&amp;gt; fmt::Result {
        f.write_str(&amp;quot;config file does not exist&amp;quot;)
    }
}

impl std::error::Error for SourceError {}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;When we run this we would like to see output somewhat like this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ cargo run
thread &#x27;main&#x27; panicked at &#x27;config is always valid and exists&#x27;, src/main.rs:4:33

Error:
    0: invalid config
    1: config file does not exist

note: run with &#x60;RUST_BACKTRACE&#x3D;1&#x60; environment variable to display a backtrace
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In this error message we can see that we exited because of a panic. We can see what invariant we violated that was supposed to prevent this panic from happening. We can see the location where the panic was produced. And we can see the error message of each error in the chain of errors accessible via &lt;code&gt;source&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;That&#x27;s what we would like, at least in the version of Rust that the error handling project group wants to see, but what we actually get is this...&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ cargo run
thread &#x27;main&#x27; panicked at &#x27;config is always valid and exists: Error(SourceError)&#x27;, main.rs:4:33
note: run with &#x60;RUST_BACKTRACE&#x3D;1&#x60; environment variable to display a backtrace
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now, I definitely don&#x27;t think this is what we want as a default when promoting recoverable errors to non-recoverable errors! &lt;code&gt;unwrap&lt;/code&gt; and &lt;code&gt;expect&lt;/code&gt; work by stringifying the error variant using it&#x27;s &lt;code&gt;Debug&lt;/code&gt; impl, but this is often the wrong operation for types that implement the &lt;code&gt;Error&lt;/code&gt; trait. By converting the &lt;code&gt;Error&lt;/code&gt; to a &lt;code&gt;String&lt;/code&gt; we lose access to the pieces of context we carefully split up via the &lt;code&gt;Error&lt;/code&gt; trait, and in all likelihood the &lt;code&gt;derive(Debug)&lt;/code&gt; output of our error types won&#x27;t even include the error messages in our &lt;code&gt;Display&lt;/code&gt; impls.&lt;/p&gt;
&lt;p&gt;Rust&#x27;s panic infrastructure doesn&#x27;t provide a method for converting an &lt;code&gt;Error&lt;/code&gt; type into a panic, it only supports converting &lt;code&gt;Debug&lt;/code&gt; types into panics, and we feel that this is a major issue. Similarly, there&#x27;s no convenient tools provided by the language for printing an error and all of its source&#x27;s error messages.&lt;/p&gt;
&lt;pre&gt;&lt;code class&#x3D;&quot;language-rust&quot;&gt;fn main() {
    let result &#x3D; load_config();
    let _config &#x3D; match result {
        Ok(config) &#x3D;&amp;gt; config,
        Err(error) &#x3D;&amp;gt; {
            println!(&amp;quot;Error: {}&amp;quot;, error);
            return;
        }
    };
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;When we run this program we&#x27;d like to see output that looks something like this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ cargo run
Error: invalid config: config file does not exist
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here we can see the header we provided to indicate we&#x27;re printing an error, followed by each error message in the chain of sources separated by colons.&lt;/p&gt;
&lt;p&gt;But instead all we get is this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ cargo run
Error: invalid config
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;By default all of the source&#x27;s error messages are lost. This arises from the fact that we used &lt;code&gt;Display&lt;/code&gt; as the interface to an individual error message. If we could go back we&#x27;d currently propose instead adding &lt;code&gt;fn message(&amp;amp;self, f: &amp;amp;mut fmt::Formatter&amp;lt;&#x27;_&amp;gt;) -&amp;gt; fmt::Result&lt;/code&gt; to the &lt;code&gt;Error&lt;/code&gt; trait, but that ship has sailed.&lt;/p&gt;
&lt;p&gt;The way that libraries work around this today is by abusing the &lt;code&gt;Debug&lt;/code&gt; trait. Types like &lt;a href&#x3D;&quot;https://docs.rs/eyre/0.6.5/eyre/trait.EyreHandler.html#tymethod.debug&quot;&gt;&lt;code&gt;eyre&lt;/code&gt;&lt;/a&gt;, &lt;a href&#x3D;&quot;https://docs.rs/anyhow/1.0.40/src/anyhow/fmt.rs.html#19&quot;&gt;&lt;code&gt;anyhow&lt;/code&gt;&lt;/a&gt;, and even sometimes &lt;a href&#x3D;&quot;https://www.lpalmieri.com/posts/error-handling-rust/#error_chain_fmt&quot;&gt;&lt;code&gt;custom error enums&lt;/code&gt;&lt;/a&gt; use their &lt;code&gt;Debug&lt;/code&gt; output to print the full chain of errors in a human readable report.&lt;/p&gt;
&lt;p&gt;This has the advantage of making it easy to print a full error report and makes it so &lt;code&gt;unwrap&lt;/code&gt;, &lt;code&gt;expect&lt;/code&gt;, and return from main all print the full error report. But doing so prevents us from accessing the derived &lt;code&gt;Debug&lt;/code&gt; format of our errors, potentially hiding internal details that might be needed for debugging but which aren&#x27;t part of the error messages intended for users to read.&lt;/p&gt;
&lt;h2&gt;&lt;a href&#x3D;&quot;#error-handling-tomorrow&quot; aria-hidden&#x3D;&quot;true&quot; class&#x3D;&quot;anchor&quot; id&#x3D;&quot;error-handling-tomorrow&quot;&gt;&lt;/a&gt;Error Handling Tomorrow&lt;/h2&gt;
&lt;p&gt;Eventually we&#x27;d like to get to a place where the default tools you reach for when error handling in Rust all do the right thing and fully leverage the &lt;code&gt;Error&lt;/code&gt; trait&#x27;s design. Unwrapping a type that implements the &lt;code&gt;Error&lt;/code&gt; trait will preserve the original error as a &lt;code&gt;dyn Error&lt;/code&gt; which is then available in the panic hook. Printing a full error report will be easy to do and obvious. With these changes in place it will hopefully be quite difficult to accidentally discard information when reporting errors.&lt;/p&gt;
&lt;p&gt;Our plan to fix these issues is two-fold:&lt;/p&gt;
&lt;h3&gt;&lt;a href&#x3D;&quot;#1-error-traits--panic-runtime-integration&quot; aria-hidden&#x3D;&quot;true&quot; class&#x3D;&quot;anchor&quot; id&#x3D;&quot;1-error-traits--panic-runtime-integration&quot;&gt;&lt;/a&gt;1. Error Traits + Panic Runtime Integration&lt;/h3&gt;
&lt;p&gt;First we need to integrate the Error trait and the panic runtime, and the first step to doing so will be moving the &lt;code&gt;Error&lt;/code&gt; trait into &lt;code&gt;core&lt;/code&gt;. This is necessary because the panic runtime is part of &lt;code&gt;core&lt;/code&gt; and the language itself, where as the &lt;code&gt;Error&lt;/code&gt; trait currently resides in &lt;code&gt;std&lt;/code&gt;. We&#x27;re pretty excited about this change which we hope will have other positive downstream effects, particularly in the embedded ecosystem.&lt;/p&gt;
&lt;p&gt;Once we&#x27;ve gotten to the point where the &lt;code&gt;Error&lt;/code&gt; trait is usable in &lt;code&gt;core&lt;/code&gt; APIs the next step will be to add an interface for creating a panic from an &lt;code&gt;Error&lt;/code&gt; type. We&#x27;re currently planning on adding a &lt;code&gt;panic_error&lt;/code&gt; function, similar to the &lt;code&gt;panic_any&lt;/code&gt; function that is already available in &lt;code&gt;std&lt;/code&gt;. This function will give the panic handler access to errors via a &lt;code&gt;dyn Error&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Once panic handlers are able to process &lt;code&gt;Error&lt;/code&gt; types the next step will be to update the default panic hook provided by &lt;code&gt;std&lt;/code&gt; to actually report panics via the &lt;code&gt;Error&lt;/code&gt; trait if they&#x27;re exposed as such. It should iterate over sources and print the backtrace captured by the error itself if one is available, or possibly capture one itself otherwise.&lt;/p&gt;
&lt;p&gt;Finally, we need to specialize &lt;code&gt;expect&lt;/code&gt; and &lt;code&gt;unwrap&lt;/code&gt; to use these new &lt;code&gt;Error&lt;/code&gt; aware panic interfaces when unwrapping types that implement the &lt;code&gt;Error&lt;/code&gt; trait. To do this we first need to work around a &lt;a href&#x3D;&quot;https://smallcultfollowing.com/babysteps/blog/2018/02/09/maximally-minimal-specialization-always-applicable-impls/#the-soundness-problem&quot;&gt;soundness issue&lt;/a&gt; with specialization for trait impls that are conditional based on lifetimes, though thankfully we already have a good idea of &lt;a href&#x3D;&quot;https://smallcultfollowing.com/babysteps/blog/2018/02/09/maximally-minimal-specialization-always-applicable-impls&quot;&gt;how to fix this&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;&lt;a href&#x3D;&quot;#2-error-reporter&quot; aria-hidden&#x3D;&quot;true&quot; class&#x3D;&quot;anchor&quot; id&#x3D;&quot;2-error-reporter&quot;&gt;&lt;/a&gt;2. Error Reporter&lt;/h3&gt;
&lt;p&gt;We would also like to provide a basic error reporter in &lt;code&gt;std&lt;/code&gt;, and some facilities for making it easy to use, or easy to replace with your own preferred error reporter. Printing an error and its sources is a fundamental operation in Rust, so we want the language to provide a pit of success for reporting, where the easiest thing to do is the right thing. We can&#x27;t get there completely because we use &lt;code&gt;Display&lt;/code&gt; for individual error messages, and we can&#x27;t change that in a backwards compatible fashion, but we hope that adding a convenient method for printing a full chain of errors and some clever lints will relieve most of the pressure.&lt;/p&gt;
&lt;p&gt;We plan on fixing this by first adding a &lt;code&gt;Report&lt;/code&gt; type to the standard library that wraps a &lt;code&gt;&amp;amp;dyn Error&lt;/code&gt; and implements &lt;code&gt;Display&lt;/code&gt; such that it prints each source as desired. We would like the output of &lt;code&gt;Report&lt;/code&gt;&#x27;s display method to support the styles of error concatenation that are most common in the Rust ecosystem.&lt;/p&gt;
&lt;p&gt;Either one line with each error message concatenated with colons:&lt;/p&gt;
&lt;pre&gt;&lt;code class&#x3D;&quot;language-rust&quot;&gt;println!(&amp;quot;Error: {}&amp;quot;, Report::from(error));

// Outputs:
// Error: outermost error: second error: root error
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Or multiple lines with each error message on it&#x27;s own line :&lt;/p&gt;
&lt;pre&gt;&lt;code class&#x3D;&quot;language-rust&quot;&gt;println!(&amp;quot;Error: {:#}&amp;quot;, Report::from(error))

// Outputs:
// Error: outermost error
//
// Caused by:
//    0: second error
//    1: root error
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The first single line format is useful for log output or inlined error messages, whereas the alternate multi line format is useful for user facing output such as a CLI interface or a GUI popup.&lt;/p&gt;
&lt;p&gt;We also want to add a method to the error trait for conveniently wrapping up any error in the &lt;code&gt;Report&lt;/code&gt; type so that reporting an error is as simple as &lt;code&gt;println!(&amp;quot;Error: {}&amp;quot;, error.report());&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;We expect the report method will look something like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class&#x3D;&quot;language-rust&quot;&gt;fn report(&amp;amp;self) -&amp;gt; impl Display + &#x27;_
where
    Self: Sized,
{
    Report::from(self)
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We want the return type here to be generic rather than hard coded to &lt;code&gt;Report&lt;/code&gt; so that individual error types can provide their own report format if desired. We expect that derive macros may leverage this to customize error reporting format defaults. This will work well with composition because the reporter from the outermost type will be used to format the full chain of errors.&lt;/p&gt;
&lt;p&gt;For now we can&#x27;t implement this method as described because &lt;code&gt;impl Trait&lt;/code&gt; isn&#x27;t allowed in return types on trait methods, but we&#x27;re working to find a way to add this to the error trait backwards compatibly.&lt;/p&gt;
&lt;h2&gt;&lt;a href&#x3D;&quot;#duplicate-information-issue&quot; aria-hidden&#x3D;&quot;true&quot; class&#x3D;&quot;anchor&quot; id&#x3D;&quot;duplicate-information-issue&quot;&gt;&lt;/a&gt;Duplicate Information Issue&lt;/h2&gt;
&lt;p&gt;With these fixes in place it will become easy to chain errors and report them completely and consistently. However there is a hazard that &lt;code&gt;Error&lt;/code&gt; implementors need to be aware of in this system: duplicate information.&lt;/p&gt;
&lt;p&gt;Imagine an error like the one in the previous example, except instead of each error printing its own message and returning the next error via &lt;code&gt;source&lt;/code&gt;, they also include their source&#x27;s error message after their own. That way when we print the outer error&#x27;s &lt;code&gt;Display&lt;/code&gt; output we see all of the error messages, not just the first in the chain.&lt;/p&gt;
&lt;pre&gt;&lt;code class&#x3D;&quot;language-rust&quot;&gt;println!(&amp;quot;Error: {}&amp;quot;, error);

// Outputs:
// Error: outermost error: second error: root error
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now, what happens we then print this same error type with &lt;code&gt;Report&lt;/code&gt; expecting that we need to iterate over the sources and print them too?&lt;/p&gt;
&lt;pre&gt;&lt;code class&#x3D;&quot;language-rust&quot;&gt;println!(&amp;quot;Error: {:#}&amp;quot;, error.report());

// Outputs
// Error: outermost error: second error: root error
//
// Caused by:
//    0: second error: root error
//    1: root error
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The source error messages get duplicated! With the multi-line output of &lt;code&gt;anyhow&lt;/code&gt; and &lt;code&gt;eyre&lt;/code&gt; we get this nice little triangle shape to the error report, which you&#x27;ve probably encountered if you&#x27;ve ever used these libraries before. We can no longer separate the error messages of the individual errors in the chain of errors because this error type concatenates the sources manually and returns them via the &lt;code&gt;source&lt;/code&gt; function. This also restricts how we can format our error reports. If we want a consistent report format and we have a dependency that concatenates errors in a single line we are forced to do so as well ourselves throughout our entire application. If, on the other hand, we have two dependencies that concatenate errors in different ways, well, we&#x27;re out of luck.&lt;/p&gt;
&lt;p&gt;So how do we avoid this? We adopt a consistent separation for &lt;code&gt;Display&lt;/code&gt; and &lt;code&gt;source&lt;/code&gt; implementations.&lt;/p&gt;
&lt;h2&gt;&lt;a href&#x3D;&quot;#guidelines-for-implementing-displayfmt-and-errorsource&quot; aria-hidden&#x3D;&quot;true&quot; class&#x3D;&quot;anchor&quot; id&#x3D;&quot;guidelines-for-implementing-displayfmt-and-errorsource&quot;&gt;&lt;/a&gt;Guidelines for implementing &lt;code&gt;Display::fmt&lt;/code&gt; and &lt;code&gt;Error::source&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;To resolve this issue, project error handling recently created a guideline for &lt;a href&#x3D;&quot;https://github.com/rust-lang/project-error-handling/issues/27#issuecomment-763950178&quot;&gt;how to implement &lt;code&gt;Display::fmt&lt;/code&gt; and &lt;code&gt;Error::source&lt;/code&gt;&lt;/a&gt;. In it we make the following recommendation:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;An error type with a source error should either return that error via &lt;code&gt;source&lt;/code&gt; or include that source&#x27;s error message in it&#x27;s own &lt;code&gt;Display&lt;/code&gt; output, but never both.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;We figure the default will be to return errors via source. That way source errors can be reacted to via &lt;code&gt;downcast&lt;/code&gt; when appropriate. This is particularly important for libraries that are changing existing public error types. For these libraries removing an error from &lt;code&gt;source&lt;/code&gt; is a breaking change that isn&#x27;t detected at compile time, making a major version bump likely insufficient. Changing the &lt;code&gt;Display&lt;/code&gt; output is also a breaking change, though a less dangerous one. To help with this we&#x27;ve drafted a suggested migration plan: &lt;a href&#x3D;&quot;https://github.com/rust-lang/project-error-handling/issues/44&quot;&gt;rust-lang/project-error-handling#44&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;In coming up with this recommendation we had to figure out what the &lt;code&gt;Error&lt;/code&gt; trait&#x27;s primary role is in Rust. After discussing it with the library team we concluded that reporting should be treated as the primary role, and that reacting via &lt;code&gt;downcast&lt;/code&gt; should come second when designing error types. Generally these needs are not in conflict, but it is possible for issues to come up. For example, when working with transparent error types that forward all methods to an inner error type. When these types follow this guideline the inner error type is skipped over and is never made available for &lt;code&gt;downcast&lt;/code&gt;ing.&lt;/p&gt;
&lt;p&gt;This recommendation only applies for error types that are exposed as part of library APIs. Internal errors in libraries or and applications can do whatever they want, but as soon as they need to be integrated into other crates by 3rd party users it&#x27;s important that errors follow a consistent style. If you&#x27;re interested in our rationale or have any comments please check out our github issue on the topic: &lt;a href&#x3D;&quot;https://github.com/rust-lang/project-error-handling/issues/27&quot;&gt;rust-lang/project-error-handling#27&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;&lt;a href&#x3D;&quot;#conclusion&quot; aria-hidden&#x3D;&quot;true&quot; class&#x3D;&quot;anchor&quot; id&#x3D;&quot;conclusion&quot;&gt;&lt;/a&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;We hope that these changes will significantly improve error handling experience provided by Rust. Error reporting will be more consistent and flexible and let the final application developer define how to format error reports for their specific use-case. It will be a lot harder to accidentally lose information when reporting errors. The tools for reporting errors will be more tightly integrated into the standard library and the language itself and we hope this will have extra benefits to the embedded ecosystem by more universally standardizing on the &lt;code&gt;Error&lt;/code&gt; trait.&lt;/p&gt;
&lt;p&gt;So that&#x27;s the plan for now, it&#x27;s not the full plan of all the changes we&#x27;d like to make, but we think its the best first step. However, this is by no means set in stone and we&#x27;re interested in getting feedback from the rest of the community so we can refine our design. So if you have thoughts please let us know, our project group repo is https://github.com/rust-lang/project-error-handling. Please feel free to &lt;a href&#x3D;&quot;https://github.com/rust-lang/project-error-handling/issues&quot;&gt;open an issue&lt;/a&gt; or hop in our &lt;a href&#x3D;&quot;https://rust-lang.zulipchat.com/#narrow/stream/257204-project-error-handling&quot;&gt;zulip stream&lt;/a&gt; and create a new topic to let us know what you think of this plan.&lt;/p&gt;
</content>

        <author>
            <name>Jane Lusby</name>
        </author>
    </entry>
    
    <entry>
        <title>Core Team Update: May 2021</title>
        <link rel="alternate" href="https://blog.rust-lang.org/inside-rust/2021/05/04/core-team-update.html" type="text/html" title="Core Team Update: May 2021" />
        <published>2021-05-04T00:00:00+00:00</published>
        <updated>2021-05-04T00:00:00+00:00</updated>
        <id>https://blog.rust-lang.org/inside-rust/2021/05/04/core-team-update.html</id>
        <content type="html" xml:base="https://blog.rust-lang.org/inside-rust/2021/05/04/core-team-update.html">&lt;p&gt;Hey everyone!  Back in August of last year, the core team wrote a blog post
titled &amp;quot;&lt;a href&#x3D;&quot;https://blog.rust-lang.org/2020/08/18/laying-the-foundation-for-rusts-future.html&quot;&gt;Laying the foundation for Rust&#x27;s Future&lt;/a&gt;.&amp;quot; Ever since then,
the Core Team has been doing a tremendous amount of work to help get the
foundation going, and prepare the project for the changes that have now
occurred because of these events.&lt;/p&gt;
&lt;p&gt;But that also means we&#x27;ve been very quiet!  This sort of work has largely
been focused inward, and not really something that&#x27;s visible from the
outside, even if you are on a Rust team.  However, thanks to these efforts,
the Foundation now exists, and is starting to work on its mission.  That also
means it&#x27;s time for the core team to shift the focus of its work.&lt;/p&gt;
&lt;p&gt;Beyond the Foundation efforts, we&#x27;ve also had several initiatives underway
that you may or may not know about:&lt;/p&gt;
&lt;h2&gt;&lt;a href&#x3D;&quot;#the-2021-roadmap&quot; aria-hidden&#x3D;&quot;true&quot; class&#x3D;&quot;anchor&quot; id&#x3D;&quot;the-2021-roadmap&quot;&gt;&lt;/a&gt;The 2021 Roadmap&lt;/h2&gt;
&lt;p&gt;The &lt;a href&#x3D;&quot;https://github.com/rust-lang/rfcs/pull/3037&quot;&gt;2021 Roadmap&lt;/a&gt; RFC was merged back in January.  This set the goals for
the core team for this year.  This is a bit different from previous years,
where we laid out goals for the entire project.  We decided this year to
focus on Core, and give the teams the leeway to set their own goals, while we
focused on overall organizational health.&lt;/p&gt;
&lt;p&gt;Later in the year, we&#x27;ll be starting the process for next year as well. We&#x27;re
not actively thinking about this yet, but ideally, a yearly roadmap would be
merged in December, rather than in January, so we want to make sure and begin
early enough to get this shipped on time for 2022.&lt;/p&gt;
&lt;h2&gt;&lt;a href&#x3D;&quot;#team-charters&quot; aria-hidden&#x3D;&quot;true&quot; class&#x3D;&quot;anchor&quot; id&#x3D;&quot;team-charters&quot;&gt;&lt;/a&gt;Team Charters&lt;/h2&gt;
&lt;p&gt;As part of that work, we&#x27;ve begun the first steps of a process to give each
team a formal charter.  Way back in &lt;a href&#x3D;&quot;https://github.com/rust-lang/rfcs/blob/master/text/1068-rust-governance.md&quot;&gt;RFC 1068&lt;/a&gt;, the scope of the initial
teams was laid out.  While that has served us well over the years, as teams
were spun up, shut down, and changed, we haven&#x27;t always done a good job of
making it clear where the boundaries of responsibility lie in each team.
Part of the magic in Rust&#x27;s governance structure is that individual teams are
given significant authority to do as they see fit, but that also means that
we have to be concious about scope. We&#x27;ll have more to report on this process
as it continues to unfold, but the end goal is stated in the roadmap:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The Rust teams, in concert with the core team, will work to establish a
charter for each of the Rust teams over the course of the year, with an aim
for defining, particularly, the purpose and membership requirements.  Our
goal is that going into 2022, all active groups within the Rust project will
have well-defined charters and membership.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Now is the time to redouble efforts here, and we are excited to work with all
of the teams on nailing these charters down. As a start, we&#x27;ve been working with
the Libs, Release, and Cargo teams for an initial pass at their charters. We&#x27;ve
structured this to be largely team-driven; we&#x27;re setting expectations and framing
what charters should look like, but the teams work on what goes in them. As this
progresses, we hope to learn more about the challenges involved so that we can
improve our process and bring in more teams.&lt;/p&gt;
&lt;p&gt;It&#x27;s worth pointing out explicitly that this work also includes the Core Team; we&#x27;ll
be creating a charter for ourselves as well.&lt;/p&gt;
&lt;h2&gt;&lt;a href&#x3D;&quot;#audit-of-packages-owned-by-the-project&quot; aria-hidden&#x3D;&quot;true&quot; class&#x3D;&quot;anchor&quot; id&#x3D;&quot;audit-of-packages-owned-by-the-project&quot;&gt;&lt;/a&gt;Audit of packages owned by the project&lt;/h2&gt;
&lt;p&gt;As another example of something the core team has been working on, we&#x27;ve been
doing work to clarify the status of a number of packages owned by the Rust team
on crates.io. We are conducting a full audit of these packages, making sure that
they&#x27;re things that should be owned by the project, making sure that they have
appropriate permissions, making sure that they have people taking care of them,
all of that kind of thing. Historically, we&#x27;ve been fairly ad-hoc about this sort
of thing, but as we grow, it is very imporant to be deliberate. An
&lt;a href&#x3D;&quot;https://github.com/rust-lang/rfcs/pull/3119&quot;&gt;RFC&lt;/a&gt; was just opened to create a policy here.&lt;/p&gt;
&lt;h2&gt;&lt;a href&#x3D;&quot;#thanks&quot; aria-hidden&#x3D;&quot;true&quot; class&#x3D;&quot;anchor&quot; id&#x3D;&quot;thanks&quot;&gt;&lt;/a&gt;Thanks!&lt;/h2&gt;
&lt;p&gt;So that&#x27;s a quick summary of what we&#x27;ve been up to, and some of what we&#x27;ll be
doing in the immediate future. We plan on trying to communicate what Core is working
on more often in the future; 2020 was an extremely complex year for a variety of
reasons, but we&#x27;re feeling really positive about the future of Core and the
Rust project generally. Thank you to the teams for all you&#x27;ve done for Rust.&lt;/p&gt;
</content>

        <author>
            <name>Steve Klabnik</name>
        </author>
    </entry>
    
    <entry>
        <title>1.52.0 pre-release testing</title>
        <link rel="alternate" href="https://blog.rust-lang.org/inside-rust/2021/05/04/1.52.0-prerelease.html" type="text/html" title="1.52.0 pre-release testing" />
        <published>2021-05-04T00:00:00+00:00</published>
        <updated>2021-05-04T00:00:01+00:00</updated>
        <id>https://blog.rust-lang.org/inside-rust/2021/05/04/1.52.0-prerelease.html</id>
        <content type="html" xml:base="https://blog.rust-lang.org/inside-rust/2021/05/04/1.52.0-prerelease.html">&lt;p&gt;The 1.52.0 pre-release is ready for testing. The release is scheduled for this
Thursday, May 6th. &lt;a href&#x3D;&quot;https://github.com/rust-lang/rust/blob/stable/RELEASES.md#version-1520-2021-05-06&quot;&gt;Release notes can be found here.&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;You can try it out locally by running:&lt;/p&gt;
&lt;pre&gt;&lt;code class&#x3D;&quot;language-plain&quot;&gt;RUSTUP_DIST_SERVER&#x3D;https://dev-static.rust-lang.org rustup update stable
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The index is &lt;a href&#x3D;&quot;https://dev-static.rust-lang.org/dist/2021-05-04/index.html&quot;&gt;https://dev-static.rust-lang.org/dist/2021-05-04/index.html&lt;/a&gt;. You
can leave feedback on the &lt;a href&#x3D;&quot;https://internals.rust-lang.org/t/1-52-0-prerelease-testing&quot;&gt;internals thread&lt;/a&gt;.&lt;/p&gt;
</content>

        <author>
            <name>Pietro Albini</name>
        </author>
    </entry>
    
    <entry>
        <title>Rustup 1.24.0 release incident report for 2021-04-27</title>
        <link rel="alternate" href="https://blog.rust-lang.org/inside-rust/2021/04/28/rustup-1.24.0-incident-report.html" type="text/html" title="Rustup 1.24.0 release incident report for 2021-04-27" />
        <published>2021-04-28T00:00:00+00:00</published>
        <updated>2021-04-28T00:00:00+00:00</updated>
        <id>https://blog.rust-lang.org/inside-rust/2021/04/28/rustup-1.24.0-incident-report.html</id>
        <content type="html" xml:base="https://blog.rust-lang.org/inside-rust/2021/04/28/rustup-1.24.0-incident-report.html">&lt;p&gt;On 2021-04-27 at 15:09 UTC we released a new version of Rustup (1.24.0). At
15:23 UTC we received a report that we had introduced a regression in the part
of the code which is responsible for proxying the &lt;code&gt;rustfmt&lt;/code&gt; and &lt;code&gt;cargo-fmt&lt;/code&gt;
portions of Rust toolchains. At 15:27 UTC we had confirmed and identified the
cause of the problem, and while we worked on a fix, we reverted the released
Rustup to version 1.23.1 - an action completed by 15:56 UTC.&lt;/p&gt;
&lt;p&gt;This means that for approximately 47 minutes, CI jobs which used the code
formatting features of Rust toolchains may have had spurious failures, and users
who upgraded will have had to revert to 1.23.1. The revert process is designed
to be as easy as upgrading was, meaning that users should not have had lingering
issues.&lt;/p&gt;
&lt;h2&gt;&lt;a href&#x3D;&quot;#root-cause-of-the-issue&quot; aria-hidden&#x3D;&quot;true&quot; class&#x3D;&quot;anchor&quot; id&#x3D;&quot;root-cause-of-the-issue&quot;&gt;&lt;/a&gt;Root cause of the issue&lt;/h2&gt;
&lt;p&gt;In an effort to
&lt;a href&#x3D;&quot;https://github.com/rust-lang/rustup/issues/2286&quot;&gt;reduce confusion when downloaded copies of &lt;code&gt;rustup-init.exe&lt;/code&gt;are renamed&lt;/a&gt;
we merged a change which causes Rustup to report an error if an unknown name is
used when invoking the binary.&lt;/p&gt;
&lt;p&gt;Due to past complexities with &lt;code&gt;rustfmt&lt;/code&gt; and &lt;code&gt;cargo-fmt&lt;/code&gt; being binaries which
tended to be distributed by &lt;code&gt;cargo install&lt;/code&gt; rather than via
&lt;code&gt;rustup component add&lt;/code&gt; there is some intricate handling in Rustup&#x27;s proxy
management for those specific binaries. The fix for the above issue failed to
include these corner case proxies in the check it undertook to ensure the caller
hadn&#x27;t used an unexpected binary name.&lt;/p&gt;
&lt;p&gt;The 1.24.0 release had been staged at this point, however there was a problem
with the low-memory installation pathways which required a fix, and at the time
we incorrectly assessed that it was low-impact to rebase the release onto the
new master branch which had not only the fix for the low-memory installation
pathway but also the &amp;quot;refuse bad names&amp;quot; change for the above issue.&lt;/p&gt;
&lt;p&gt;Subsequent testing of the release focussed almost entirely on the installation
pathways, omitting to validate the proxy name verification code we had also
acquired into the release. As a result, this regression slipped in.&lt;/p&gt;
&lt;h2&gt;&lt;a href&#x3D;&quot;#resolution&quot; aria-hidden&#x3D;&quot;true&quot; class&#x3D;&quot;anchor&quot; id&#x3D;&quot;resolution&quot;&gt;&lt;/a&gt;Resolution&lt;/h2&gt;
&lt;p&gt;The author of the validation PR correctly identified it as the root-cause of
the regression, and the team discussed and decided that it was better to fix
the problem properly than to simply revert the change out of the release.&lt;/p&gt;
&lt;p&gt;The release team member who was helping with the release process began the
revert to Rustup 1.23.1 while the fixes were developed. In addition an issue
was filed around adding some tests around all the proxies (we currently test a
subset which we believed to be representative). We subsequently staged a
proposed 1.24.1 release to Rust&#x27;s development stage and we have issued a &lt;a href&#x3D;&quot;https://internals.rust-lang.org/t/seeking-beta-testers-for-rustup-1-24-1/14582&quot;&gt;call
for beta testers&lt;/a&gt; to confirm that we have not introduced any other
regressions.&lt;/p&gt;
&lt;h2&gt;&lt;a href&#x3D;&quot;#lessons-learned&quot; aria-hidden&#x3D;&quot;true&quot; class&#x3D;&quot;anchor&quot; id&#x3D;&quot;lessons-learned&quot;&gt;&lt;/a&gt;Lessons learned&lt;/h2&gt;
&lt;p&gt;The big lesson here is that while we&#x27;ve taken similar notes away from past
releases of Rustup and other tooling, we&#x27;ve not yet managed to set up a proper
beta-testing process for Rustup. As such we will be making changes to the
Rustup release process to codify testing phases with the wider community.&lt;/p&gt;
&lt;h2&gt;&lt;a href&#x3D;&quot;#long-term-changes-to-rustup-releases&quot; aria-hidden&#x3D;&quot;true&quot; class&#x3D;&quot;anchor&quot; id&#x3D;&quot;long-term-changes-to-rustup-releases&quot;&gt;&lt;/a&gt;Long term changes to Rustup releases&lt;/h2&gt;
&lt;p&gt;In order to try and reduce the chance of this happening again, the &lt;a href&#x3D;&quot;https://github.com/rust-lang/rustup/blob/master/CONTRIBUTING.md#making-a-release&quot;&gt;release
process&lt;/a&gt; will be updated to include a public beta-testing phase for any non-
purely-bugfix release and we intend to look into the possibility of a &amp;quot;nightly&amp;quot;
Rustup release for a &lt;em&gt;small&lt;/em&gt; subset of platforms.&lt;/p&gt;
&lt;p&gt;Finally we are hoping to work with the &lt;a href&#x3D;&quot;https://www.rust-lang.org/governance/teams/release&quot;&gt;release team&lt;/a&gt; to do what we can to
unify the Rustup release process with the well oiled Rust release process
though, due to the historical differences in how Rustup has been released, this
will likely be a long term effort.&lt;/p&gt;
&lt;h2&gt;&lt;a href&#x3D;&quot;#action-items&quot; aria-hidden&#x3D;&quot;true&quot; class&#x3D;&quot;anchor&quot; id&#x3D;&quot;action-items&quot;&gt;&lt;/a&gt;Action items&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://github.com/rust-lang/rustup/issues/2739&quot;&gt;#2739&lt;/a&gt;: Testing for proxying, including TOOLS and DUP_TOOLS&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://github.com/rust-lang/rustup/issues/2741&quot;&gt;#2741&lt;/a&gt;: Release process should include explicit beta test period&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;And as mentioned above, longer term we shall look to see what unification we can
do between releasing Rustup and how the Rust release train runs.&lt;/p&gt;
</content>

        <author>
            <name>Daniel Silverstone</name>
        </author>
    </entry>
    
    <entry>
        <title>Congrats to compiler team member Aaron Hill</title>
        <link rel="alternate" href="https://blog.rust-lang.org/inside-rust/2021/04/26/aaron-hill-compiler-team.html" type="text/html" title="Congrats to compiler team member Aaron Hill" />
        <published>2021-04-26T00:00:00+00:00</published>
        <updated>2021-04-26T00:00:00+00:00</updated>
        <id>https://blog.rust-lang.org/inside-rust/2021/04/26/aaron-hill-compiler-team.html</id>
        <content type="html" xml:base="https://blog.rust-lang.org/inside-rust/2021/04/26/aaron-hill-compiler-team.html">&lt;p&gt;I am pleased to announce that &lt;a href&#x3D;&quot;https://github.com/aaron1011&quot;&gt;Aaron Hill&lt;/a&gt; has been made a full member of the &lt;a href&#x3D;&quot;https://www.rust-lang.org/governance/teams/compiler&quot;&gt;compiler team&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Aaron Hill (&lt;a href&#x3D;&quot;https://github.com/aaron1011&quot;&gt;@Aaron1011&lt;/a&gt;) has been contributing to many different parts of the compiler since his start in 2017.
Recently, Aaron has been working on finding and fixing bugs and correctness issues in the incremental system, cleanups and improvements to macro expansion and hygiene, as well as miscellaneous bug fixes.
Beyond the compiler, Aaron has also implemented support for &lt;a href&#x3D;&quot;https://github.com/rust-lang/rust/pull/60026&quot;&gt;unwinding in Miri&lt;/a&gt;, &lt;a href&#x3D;&quot;https://github.com/rust-lang/rust/pull/47833&quot;&gt;generating documentation for auto-traits&lt;/a&gt;, and &lt;a href&#x3D;&quot;https://github.com/rust-lang/cargo/pull/8825&quot;&gt;future incompatibility reporting in Cargo&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Congratulations Aaron and thanks for all of your contributions to the project!&lt;/p&gt;
</content>

        <author>
            <name>Wesley Wiser</name>
        </author>
    </entry>
    
    <entry>
        <title>Jacob Hoffman-Andrews joins the Rustdoc team</title>
        <link rel="alternate" href="https://blog.rust-lang.org/inside-rust/2021/04/20/jsha-rustdoc-member.html" type="text/html" title="Jacob Hoffman-Andrews joins the Rustdoc team" />
        <published>2021-04-20T00:00:00+00:00</published>
        <updated>2021-04-20T00:00:00+00:00</updated>
        <id>https://blog.rust-lang.org/inside-rust/2021/04/20/jsha-rustdoc-member.html</id>
        <content type="html" xml:base="https://blog.rust-lang.org/inside-rust/2021/04/20/jsha-rustdoc-member.html">&lt;p&gt;Hello everyone, please welcome &lt;a href&#x3D;&quot;https://github.com/jsha&quot;&gt;Jacob Hoffman-Andrews&lt;/a&gt; to the rustdoc team!&lt;/p&gt;
&lt;p&gt;Jacob Hoffman-Andrews (&lt;a href&#x3D;&quot;https://github.com/jsha&quot;&gt;@jsha&lt;/a&gt;) has been contributing a lot on rustdoc front-end. Thanks to him, the pageload of the rustdoc pages is much faster. Here is a non-exhaustive list of the stuff he&#x27;s done recently:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The huge search index is now only loaded &lt;a href&#x3D;&quot;https://github.com/rust-lang/rust/pull/82310&quot;&gt;when needed&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;The pageload has &lt;a href&#x3D;&quot;https://github.com/rust-lang/rust/pull/82315&quot;&gt;has been optimized a bunch&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Rustdoc&#x27;s show/hide toggles &lt;a href&#x3D;&quot;https://github.com/rust-lang/rust/issues/83332&quot;&gt;are being converted to pure HTML&lt;/a&gt;, reducing complexity and improving pageload performance.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;And this is just an overview!&lt;/p&gt;
&lt;p&gt;We are really happy to have Jacob joining us, so thanks a lot for your work and congratulations!&lt;/p&gt;
</content>

        <author>
            <name>Guillaume Gomez</name>
        </author>
    </entry>
    
    <entry>
        <title>Lang team April update</title>
        <link rel="alternate" href="https://blog.rust-lang.org/inside-rust/2021/04/17/lang-team-apr-update.html" type="text/html" title="Lang team April update" />
        <published>2021-04-17T00:00:00+00:00</published>
        <updated>2021-04-17T00:00:00+00:00</updated>
        <id>https://blog.rust-lang.org/inside-rust/2021/04/17/lang-team-apr-update.html</id>
        <content type="html" xml:base="https://blog.rust-lang.org/inside-rust/2021/04/17/lang-team-apr-update.html">&lt;p&gt;This week the lang team held its April planning meeting (&lt;a href&#x3D;&quot;https://github.com/rust-lang/lang-team/blob/master/design-meeting-minutes/2021-04-14-Planning-Meeting.md&quot;&gt;minutes&lt;/a&gt;). We normally hold these meetings on the first Wednesday of every month, but this month we were delayed by one week due to scheduling conflicts.&lt;/p&gt;
&lt;p&gt;The planning meeting is used for:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Checking in on the status of our active projects&lt;/li&gt;
&lt;li&gt;Planning the design meetings for the remainder of the month&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;After each meeting, we post an update (like this one!) with notes and meeting announcements.&lt;/p&gt;
&lt;h2&gt;&lt;a href&#x3D;&quot;#update-from-active-projects&quot; aria-hidden&#x3D;&quot;true&quot; class&#x3D;&quot;anchor&quot; id&#x3D;&quot;update-from-active-projects&quot;&gt;&lt;/a&gt;Update from active projects&lt;/h2&gt;
&lt;p&gt;Did you know that you can see the lang team&#x27;s active projects on our &lt;a href&#x3D;&quot;https://github.com/rust-lang/lang-team/projects/2&quot;&gt;project board&lt;/a&gt;? We&#x27;re still experimenting and evolving the setup, but the goal is that it should give you a quick overview of what kinds of things the lang team is focused on, and what stage they are in their development.&lt;/p&gt;
&lt;p&gt;The minutes contain &lt;a href&#x3D;&quot;https://github.com/rust-lang/lang-team/blob/master/design-meeting-minutes/2021-04-14-Planning-Meeting.md#updates-from-active-groups-and-projects&quot;&gt;links the tracking issues for each project&lt;/a&gt; and those issues contain status reports. Here are some interesting updates:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://github.com/rust-lang/lang-team/issues/60#issuecomment-814509681&quot;&gt;never type update&lt;/a&gt;:
&lt;ul&gt;
&lt;li&gt;we have a general plan for hybrid fallback that we think will allow us to stabilize &lt;code&gt;!&lt;/code&gt; at long last without breaking existing crates&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://github.com/rust-lang/lang-team/issues/50#issuecomment-814526085&quot;&gt;improved closure capture (RFC 2229)&lt;/a&gt;:
&lt;ul&gt;
&lt;li&gt;implementation is working quite well and migration is nearly implemented also&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://github.com/rust-lang/lang-team/issues/19#issuecomment-814581675&quot;&gt;ffi-unwind&lt;/a&gt;:
&lt;ul&gt;
&lt;li&gt;C-unwind implementation has landed&lt;/li&gt;
&lt;li&gt;there is some ongoing work to fix some bugs in the initial implementation&lt;/li&gt;
&lt;li&gt;looking at potentially moving to considering setjmp/longjmp&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://github.com/rust-lang/rust/pull/83386#issuecomment-819719603&quot;&gt;nested pattern stabilization&lt;/a&gt; has almost completed&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href&#x3D;&quot;#upcoming-design-meetings&quot; aria-hidden&#x3D;&quot;true&quot; class&#x3D;&quot;anchor&quot; id&#x3D;&quot;upcoming-design-meetings&quot;&gt;&lt;/a&gt;Upcoming design meetings&lt;/h2&gt;
&lt;p&gt;We planned two design meetings for April. Our meetings are open for anyone to join and observe. They are also typically recorded and posted to YouTube. Ping nikomatsakis or joshtriplett for info about attending.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;April 21 -- proposed &amp;quot;wasm&amp;quot; ABI (&lt;a href&#x3D;&quot;https://github.com/rust-lang/lang-team/issues/90&quot;&gt;lang-team#90&lt;/a&gt;), featuring special guest Alex Crichton&lt;/li&gt;
&lt;li&gt;April 28 -- generators (&lt;a href&#x3D;&quot;https://github.com/rust-lang/lang-team/issues/92&quot;&gt;lang-team#92&lt;/a&gt;), featuring special guest Esteban Küber&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href&#x3D;&quot;#design-meeting-expectations&quot; aria-hidden&#x3D;&quot;true&quot; class&#x3D;&quot;anchor&quot; id&#x3D;&quot;design-meeting-expectations&quot;&gt;&lt;/a&gt;Design meeting expectations&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;The document for the meeting must be prepared by the triage meeting on Tuesday and posted to the tracking issue.
&lt;ul&gt;
&lt;li&gt;If it is not sent out by then, the meeting will be canceled. This gives folks 24 hour notice.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;There is no expectation that people will read the document before the meeting. The meeting will begin with a recap of the document.
&lt;ul&gt;
&lt;li&gt;However, there is no rule &lt;strong&gt;against&lt;/strong&gt; reading the document beforehand and providing feedback or advice on how to improve it.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
</content>

        <author>
            <name>Niko Matsakis</name>
        </author>
    </entry>
    
</feed>

<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
    <generator uri="https://blog.rust-lang.org/inside-rust/" version="0.1.0">Inside Rust Blog</generator>
    <link href="https://blog.rust-lang.org/inside-rust/feed.xml" rel="self" type="application/atom+xml" />
    <link href="https://blog.rust-lang.org/inside-rust/" rel="alternate" type="text/html" />
    <id>https://blog.rust-lang.org/inside-rust/</id>
    <title>Inside Rust Blog</title>
    <subtitle>Want to follow along with Rust development? Curious how you might get involved? Take a look!</subtitle>
    <author>
        <name>Maintained by the Rust Teams.</name>
        <uri>https://github.com/rust-lang/blog.rust-lang.org/</uri>
    </author>
    <updated>2020-06-01T08:36:21+00:00</updated>

    
    <entry>
        <title>2020 Contributor Survey</title>
        <link rel="alternate" href="https://blog.rust-lang.org/inside-rust/2020/05/27/contributor-survey.html" type="text/html" title="2020 Contributor Survey" />
        <published>2020-05-27T00:00:00+00:00</published>
        <updated>2020-05-27T00:00:00+00:00</updated>
        <id>https://blog.rust-lang.org/inside-rust/2020/05/27/contributor-survey.html</id>
        <content type="html" xml:base="https://blog.rust-lang.org/inside-rust/2020/05/27/contributor-survey.html">&lt;p&gt;You may be aware that &lt;a href=&quot;https://blog.rust-lang.org/2020/05/15/five-years-of-rust.html&quot;&gt;Rust recently turned 5&lt;/a&gt;! If you read this blog,
then you probably already know that the Rust project thrives because of its
many contributors, and that we're always looking for ways to make it easier for
people to get involved.&lt;/p&gt;
&lt;p&gt;Today we are pleased to announce the &lt;a href=&quot;https://forms.gle/G1jKM1ppGunft6j29&quot;&gt;Rust contributor survey&lt;/a&gt;. This
short, anonymous survey should only take a few minutes to fill out, but it will
really help us in understanding what kinds of problems people experience when
contributing to Rust so that we can try to address them. We value many
different kinds of contributions, such as reporting problems, triaging issues,
organizing meetups, etc, but this survey's purpose is to identify and eliminate
barriers to entry for code contributions.&lt;/p&gt;
&lt;p&gt;The survey is targeting current, past, and future contributors to Rust. We're
particularly interested in hearing from &lt;em&gt;new or prospective code contributors&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;So whether you're a frequent contributor already or someone who has only
thought about contributing, please take a few minutes to &lt;a href=&quot;https://forms.gle/G1jKM1ppGunft6j29&quot;&gt;fill out the
survey&lt;/a&gt; before &lt;strong&gt;June 10, 2020&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;We plan to share and discuss summary data. We may quote free-form responses
unless you ask us not to. All information is collected anonymously. Only team
members or people specifically helping administer the survey will be able to
view full results.&lt;/p&gt;
</content>

        <author>
            <name>Niko Matsakis and @mark-i-m</name>
        </author>
    </entry>
    
    <entry>
        <title>A retrospective on the 2018 rust-lang.org redesign</title>
        <link rel="alternate" href="https://blog.rust-lang.org/inside-rust/2020/05/26/website-retrospective.html" type="text/html" title="A retrospective on the 2018 rust-lang.org redesign" />
        <published>2020-05-26T00:00:00+00:00</published>
        <updated>2020-05-26T00:00:00+00:00</updated>
        <id>https://blog.rust-lang.org/inside-rust/2020/05/26/website-retrospective.html</id>
        <content type="html" xml:base="https://blog.rust-lang.org/inside-rust/2020/05/26/website-retrospective.html">&lt;p&gt;We released our second 'edition' of Rust at the end of 2018. Part of that release was a revamp of the &lt;a href=&quot;https://www.rust-lang.org&quot;&gt;Rust website&lt;/a&gt;. That work was completed on time, but there was some controversy when it was released, and the project itself was difficult and draining for those involved. This retrospective is an attempt to record the lessons learned from the project, and to put the project into context for those interested but not directly involved.&lt;/p&gt;
&lt;p&gt;This retrospective aims to be &lt;a href=&quot;https://blog.newrelic.com/technology/blameless-retrospectives/&quot;&gt;blameless&lt;/a&gt; and forward-looking. There is no benefit in re-litigating what happened, and we are interested here in the planning, project management, and community aspects, rather than critiquing the design or implementation.&lt;/p&gt;
&lt;h2&gt;&lt;a href=&quot;#lessons-learned&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot; id=&quot;lessons-learned&quot;&gt;&lt;/a&gt;Lessons learned&lt;/h2&gt;
&lt;p&gt;What have we learned for the next time we take on a similar project?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;People first: people are more valuable than schedules; keeping people healthy, happy, and productive is the most important aspect of managing a project.&lt;/li&gt;
&lt;li&gt;Open communication: we should be as open as possible as early as possible with communication about projects, even when the nature of the project means we can't be open with all development.&lt;/li&gt;
&lt;li&gt;Get feedback early and set expectations about the kind of feedback which is useful. We have ongoing problems in the Rust community where (mostly) well-intentioned feedback from the community becomes overwhelming to the point of harassment; we do not have a solution to this.&lt;/li&gt;
&lt;li&gt;Be prepared to manage feedback, in particular by having enough people available to respond.&lt;/li&gt;
&lt;li&gt;Recognize the complexity of projects and ensure appropriate project management.&lt;/li&gt;
&lt;li&gt;Projects should have clear ownership.&lt;/li&gt;
&lt;li&gt;Large projects should not be scheduled to finish at the same time.&lt;/li&gt;
&lt;li&gt;Work iteratively, rather than going for 'big bang' releases.&lt;/li&gt;
&lt;li&gt;Consider ongoing maintenance: how much is there to do? Who will do it? Failing to consider this means there is more pressure on the initial release.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;A lot of these points seem obvious with hindsight. However, every decision is a trade-off, and despite best intentions, it is easy to mis-weight factors in these trade-offs. The above are factors that, with hindsight, should have had more weight.&lt;/p&gt;
&lt;p&gt;In the next sections, I'll expand on some lessons from the summary and then give some context by describing the project.&lt;/p&gt;
&lt;h3&gt;&lt;a href=&quot;#communication&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot; id=&quot;communication&quot;&gt;&lt;/a&gt;Communication&lt;/h3&gt;
&lt;p&gt;Projects which have a primary focus on design have different dynamics to most other software projects. For example, there is the risk of 'design by committee'. When trying to do open development, this risk is magnified since the 'committee' is effectively the entire world. However, in retrospect we overshot and were not open enough with the website project.&lt;/p&gt;
&lt;p&gt;We could have better communicated the motivation and constraints of the project. By the time of the beta release, the community did not share the project team's conceptualization of the website's requirements. In the future, we might create a pre-RFC to discuss and communicate requirements without starting design work. Once a high-level design is made, it should be actively evangelized to the community.&lt;/p&gt;
&lt;p&gt;As well as asking for feedback (see below), we should communicate project progress and share opportunities for contribution. When looking back at a repository on GitHub, it is not obvious how much iteration has taken place, or what issues have been discussed. But, if the repository is followed from the start, these things are clear.&lt;/p&gt;
&lt;p&gt;In general, communication should be a conversation. Unfortunately, due to other ongoing projects, we did not have enough people with enough time to have that conversation. We think an important lesson here is not to schedule large projects concurrently.&lt;/p&gt;
&lt;h3&gt;&lt;a href=&quot;#project-management&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot; id=&quot;project-management&quot;&gt;&lt;/a&gt;Project management&lt;/h3&gt;
&lt;p&gt;We underestimated the scale of the project, both in terms of the work to be done and the number of people who would need to be coordinated. As a result, several good people were burnt-out by the project. Errors in software estimation are common; we should have reacted by putting people first - no project is worth losing good people for. One reason that did not happen is that nobody felt empowered to step back and re-evaluate the project. In general, ownership of the project was unclear and this led to poor leadership. Furthermore, the ownership which did exist was not communicated well to the wider community.&lt;/p&gt;
&lt;p&gt;The project as a whole highlighted not just our relative inexperience (with this kind of project), but also our process debt. We had not (and to a great extent still have not) created processes and structures to support projects and people when things start to go wrong. This lets small issues snowball into large ones. For the website project this was compounded by not having enough people involved - they became over-worked and stressed, and that meant they did not have the bandwidth to implement good project management, even when we knew the right thing to do.&lt;/p&gt;
&lt;h3&gt;&lt;a href=&quot;#feedback&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot; id=&quot;feedback&quot;&gt;&lt;/a&gt;Feedback&lt;/h3&gt;
&lt;p&gt;As mentioned earlier, we think that community feedback would have been easier to manage if it had been collected during the whole project, rather than being compressed into the final two weeks. Beyond that, we needed much better staffing for the feedback period. Handling feedback was an extremely stressful and difficult experience. In the future, we should ensure there are more people and that we structure feedback as much as possible to ensure that it is useful rather than overwhelming.&lt;/p&gt;
&lt;p&gt;A minority of the community went beyond what was acceptable as feedback. Coupled with the 'pile on' effect of discussions on the internet, this became harassment of the website developers. This is unacceptable behavior, and we expect better from the community. Some of the effect was unintentional, and this is a problem that affects controversial RFC discussions too. It is not clear how to solve this, but is something we should investigate.&lt;/p&gt;
&lt;h2&gt;&lt;a href=&quot;#context&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot; id=&quot;context&quot;&gt;&lt;/a&gt;Context&lt;/h2&gt;
&lt;p&gt;The website revamp was part of the 2018 edition. The edition was an awesome achievement, but an incredible amount of work. The new website was planned from near the beginning of the year, in the early stages of edition planning. We considered it important for the new website to be ready in time for the edition for maximum impact and because the previous website was unfit for our goals (more below). Because of the timing, there were fewer people available to work on the website than might have been the case, there was less time and energy for leadership and oversight, and there were many competing projects for those involved.&lt;/p&gt;
&lt;p&gt;The previous website had been incrementally added to, but there had never been major work on either content or design (other than the initial release). Essentially, the website rewrite was a completely new project in a domain where we had no organizational experience (there were individuals who had experience in web development, but there had not been opportunity for that experience to become institutional knowledge).&lt;/p&gt;
&lt;p&gt;The initial website was well-suited to its purpose and audience: presenting a small research project to interested hackers. However, as the project and website have grown, the website became less and less appropriate.&lt;/p&gt;
&lt;p&gt;There was consensus among the core team that the old website needed replacing. Although many in the community have fond memories of it (after all, it was most people's very first contact with Rust), there were several ways in which the old website was objectively inadequate: it was difficult to find information, much of the content was out of date, pages were crowded and poorly organized, it was hard to update and to localize (which resulted in missing and out of date information), and it was missing many parts of the community and ecosystem (e.g., any mention of using Rust in embedded systems).&lt;/p&gt;
&lt;p&gt;Design-wise, the previous website was simple and tidy, but it had problems - it was hard to emphasize text, there was little contrast between sections (making it hard to read), and it lacked the vibrancy of Rust's ecosystem and community. It was designed for the audience which built it, and our ambitions for Rust, and the audience for the website, had since grown larger.&lt;/p&gt;
&lt;p&gt;One of the goals of the 2018 edition was to appeal to a wider audience. The website was a key tool for achieving that goal. However, it was clear the design and most of the content needed a complete overhaul.&lt;/p&gt;
&lt;p&gt;This sounded like a relatively standard website project to produce a relatively small website. However, in retrospect, the constraints were difficult - there is a lot of information that needed to be made accessible, without making the website overwhelming; we needed to serve newcomers with different backgrounds, as well as existing Rust users looking to find information; the previous 'small' website had grown large, and there was a lot of content to update or replace.&lt;/p&gt;
&lt;p&gt;Work was slow to start and progress was slow, in part due to staffing issues. Content was sought from the teams in mid-2018. We vastly underestimated the complexity of producing and collecting content. Content was slow to produce and slow to review; there were many unrecognized dependencies. We needed lots of iteration. Essentially, the website became a project with 50-ish people, but was managed as if it were a project with one or two people. We were building a website before most content was ready, which is a well-known web development anti-pattern.&lt;/p&gt;
&lt;p&gt;Despite this, and largely due to heroic efforts, the website was finished on time. All planned content was present and polished. We had a striking and vibrant new design, and an implementation that made the website much easier to keep up to date and to translate. Essential information was easy to find, and the website was accessible to a wider audience, in particular developers who knew nothing about Rust, engineering management, and a wider section of potential contributors.&lt;/p&gt;
&lt;p&gt;Unfortunately, it was only just in time. As well as meaning that the last phase of work was stressful and rushed, it meant we didn't have as much time as we should have had for testing and feedback: only two weeks to gather and address feedback on the beta release. Because of this and an earlier lack of communication, there was a flood of commentary, some of which was vocally negative and some which was trolling or harassment. The team did not have the resources or time to respond well.&lt;/p&gt;
&lt;p&gt;Of course, being a software project, there were some bugs (most of which were quickly resolved), and some missing features (notably, localization, which made the website a worse experience for many visitors who did not speak English natively).&lt;/p&gt;
&lt;p&gt;Post-release, content and design was polished, bugs were addressed, and we attempted to create a team to maintain the website. Unfortunately, some of the poor behavior from the community continued. Several people involved with the edition and specifically the website were left burnt out and left Rust or cut back work significantly.&lt;/p&gt;
&lt;h2&gt;&lt;a href=&quot;#conclusion&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot; id=&quot;conclusion&quot;&gt;&lt;/a&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;In summary, we regard the website as a successful (but imperfect) product, but delivered in a sub-optimal manner. A lot of the things that went wrong were fairly common project management issues. We believe the highest-level lesson to take away is that the Rust organization should improve its project and product management. (To be clear, we think this is an organizational issue, not a comment on any individuals' skills in the domain). Our usual development style is iterative and incremental; when working on larger, less incremental projects, we need to put in more resources, management, and coordination to ensure success. The project was under-staffed and, beyond the obvious problems, that meant that even when we knew the right thing to do, we did not have the people, time, or energy to do it.&lt;/p&gt;
&lt;p&gt;Finally, thank you to everyone who built the website and who helped with this retrospective.&lt;/p&gt;
</content>

        <author>
            <name>Nick Cameron</name>
        </author>
    </entry>
    
    <entry>
        <title>Traits working group 2020 sprint 2 summary</title>
        <link rel="alternate" href="https://blog.rust-lang.org/inside-rust/2020/05/18/traits-sprint-2.html" type="text/html" title="Traits working group 2020 sprint 2 summary" />
        <published>2020-05-18T00:00:00+00:00</published>
        <updated>2020-05-18T00:00:00+00:00</updated>
        <id>https://blog.rust-lang.org/inside-rust/2020/05/18/traits-sprint-2.html</id>
        <content type="html" xml:base="https://blog.rust-lang.org/inside-rust/2020/05/18/traits-sprint-2.html">&lt;p&gt;It's that time of year again: another traits working group sprint summary. And ohh boy, it was a busy sprint.&lt;/p&gt;
&lt;p&gt;If you're unfamiliar with the traits working group, we posted a short summary in the &lt;a href=&quot;https://blog.rust-lang.org/inside-rust/2020/03/28/traits-sprint-1.html&quot;&gt;sprint 1 post&lt;/a&gt;. In short, the overarching goal of the &lt;a href=&quot;https://rust-lang.github.io/wg-traits/&quot;&gt;traits working group&lt;/a&gt; is to create a performant, extensible, and clean implementation of Rust's trait system.&lt;/p&gt;
&lt;h2&gt;&lt;a href=&quot;#2020-sprint-2&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot; id=&quot;2020-sprint-2&quot;&gt;&lt;/a&gt;2020 sprint 2&lt;/h2&gt;
&lt;p&gt;While the first sprint of the year somewhat lacked direction and we very much &amp;quot;figured it out while we went&amp;quot;, this sprint was much smoother. This was in part because of the tools and procedures that we settled into in sprint 1, such as the &lt;a href=&quot;https://rust-lang.github.io/wg-traits/roadmap/skill-tree.html&quot;&gt;skill tree&lt;/a&gt; or a running &lt;a href=&quot;https://github.com/rust-lang/wg-traits/blob/master/sprints/2020-2.md&quot;&gt;sprint doc&lt;/a&gt; to track progress.&lt;/p&gt;
&lt;h3&gt;&lt;a href=&quot;#credit-where-credit-is-due&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot; id=&quot;credit-where-credit-is-due&quot;&gt;&lt;/a&gt;Credit where credit is due&lt;/h3&gt;
&lt;p&gt;We had tons of participation from many people, some new and some old. For that, a big thank you ❤:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/detrumi&quot;&gt;Wilco Kusee&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/marmeladema&quot;&gt;Élie Roudninski&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/flodiebold&quot;&gt;Florian Diebold&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/jackh726&quot;&gt;Jack Huey&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/crlf0710&quot;&gt;Charles Lew&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/nikomatsakis&quot;&gt;Niko Matsakis&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/nathanwhit&quot;&gt;Nathan Whitaker&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/adamrk&quot;&gt;Adam Bratschi-Kaye&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/super-tuple&quot;&gt;super-tuple&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/daboross&quot;&gt;David Ross&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/nolanderc&quot;&gt;Christofer Nolander&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/Michael-F-Bryan&quot;&gt;Michael Bryan&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/MarkMcCaskey&quot;&gt;Mark McCaskey&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/tirr-c&quot;&gt;Wonwoo Choi&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/zaharidichev&quot;&gt;Zahari Dichev&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/Areredify&quot;&gt;Mikhail Babenko&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/Mcat12&quot;&gt;Mark Drobnak&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;That's a lot!&lt;/p&gt;
&lt;h3&gt;&lt;a href=&quot;#rustc-integration-mvp&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot; id=&quot;rustc-integration-mvp&quot;&gt;&lt;/a&gt;Rustc integration MVP&lt;/h3&gt;
&lt;p&gt;As was mentioned in the &lt;a href=&quot;https://blog.rust-lang.org/inside-rust/2020/03/28/traits-sprint-1.html&quot;&gt;sprint 1 post&lt;/a&gt;, the previous experimental integration of &lt;a href=&quot;https://github.com/rust-lang/chalk&quot;&gt;Chalk&lt;/a&gt; into rustc was removed earlier this year. That integration was old and not based on the current Chalk codebase. At the end of the last sprint, we began reintegration. The plan was/is to start with a &amp;quot;minimum viable product&amp;quot; (MVP) using the new Chalk framework (for those curious, the new integration uses the &lt;code&gt;chalk-solve&lt;/code&gt; crate rather than &lt;code&gt;chalk-engine&lt;/code&gt;). This MVP had a few goals and limitations:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Rustc types and goals are deeply and eagerly converted to Chalk types&lt;/li&gt;
&lt;li&gt;Lifetimes are sometimes ignored&lt;/li&gt;
&lt;li&gt;No constants and some missing types and traits&lt;/li&gt;
&lt;li&gt;Some hacks to make things work&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;With that said, the &lt;a href=&quot;https://github.com/rust-lang/rust/pull/69406&quot;&gt;rustc integration PR&lt;/a&gt; has landed and the new experimental Chalk solver is available under the &lt;code&gt;-Z chalk&lt;/code&gt; flag. Just as a forewarning: don't use this (yet). It's still very early in its implementation and things &lt;em&gt;won't&lt;/em&gt; work more often than they &lt;em&gt;will&lt;/em&gt;. &lt;strong&gt;But&lt;/strong&gt; it is a start and it's only going to get better and more complete from here.&lt;/p&gt;
&lt;h3&gt;&lt;a href=&quot;#const-in-chalk-planning&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot; id=&quot;const-in-chalk-planning&quot;&gt;&lt;/a&gt;Const in Chalk planning&lt;/h3&gt;
&lt;p&gt;Before this sprint started we decided that we wanted to plan a design meeting for consts in Chalk. We had that meeting on April 7th. However, we didn't expect to start working on the implementation &lt;em&gt;this&lt;/em&gt; sprint. But alas, there is already a &lt;a href=&quot;https://github.com/rust-lang/chalk/pull/393&quot;&gt;PR open to implement consts in Chalk&lt;/a&gt;. This has been helpful to uncover some design decisions within Chalk. We expect that this might be landing fairly soon.&lt;/p&gt;
&lt;h3&gt;&lt;a href=&quot;#moving-towards-a-shared-type-library-for-rustc-and-chalk&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot; id=&quot;moving-towards-a-shared-type-library-for-rustc-and-chalk&quot;&gt;&lt;/a&gt;Moving towards a shared type library for rustc and Chalk&lt;/h3&gt;
&lt;p&gt;Currently, rustc and Chalk represent types in a slightly different manner. Also, Chalk is missing a few. In the current MVP implementation the conversion between rustc and Chalk types are &amp;quot;deep and eager&amp;quot;, which means we do a lot of work to use Chalk as a trait solver. The eventual goal is to make a shared type library. There was a compiler team meeting to mostly &amp;quot;green-light&amp;quot; this from the rustc side of things. Most of the work so far, though, has been on Chalk to adding missing builtin types and traits.&lt;/p&gt;
&lt;h3&gt;&lt;a href=&quot;#basic-support-for-impl-trait-in-chalk&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot; id=&quot;basic-support-for-impl-trait-in-chalk&quot;&gt;&lt;/a&gt;Basic support for &lt;code&gt;impl Trait&lt;/code&gt; in Chalk&lt;/h3&gt;
&lt;p&gt;We landed initial support for &lt;code&gt;impl Trait&lt;/code&gt; during this sprint. It doesn't yet support some features, such as generics. But there is an open PR to extend the functionality.&lt;/p&gt;
&lt;h3&gt;&lt;a href=&quot;#progress-towards-removing-the-leak-check-in-rustc&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot; id=&quot;progress-towards-removing-the-leak-check-in-rustc&quot;&gt;&lt;/a&gt;Progress towards removing the leak check in rustc&lt;/h3&gt;
&lt;p&gt;In the rustc trait solver, there is currently a special check done in regards to lifetimes called the &amp;quot;leak check&amp;quot;. Without going into the techinical details, there are some design flaws with this approach and it being there blocks features such lazy normalization (which is required for features such const generics and GATs). However, removing the leak check completely has some backward-compatiblity concerns. But &lt;a href=&quot;https://github.com/rust-lang/rust/pull/70950&quot;&gt;some progress&lt;/a&gt; was made.&lt;/p&gt;
&lt;h3&gt;&lt;a href=&quot;#adding-a-recursive-solver-to-chalk&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot; id=&quot;adding-a-recursive-solver-to-chalk&quot;&gt;&lt;/a&gt;Adding a recursive solver to Chalk&lt;/h3&gt;
&lt;p&gt;When Chalk was first written, it used a stateful recursive solver. It was then changed to use a prolog-solving approach called SLG. SLG uses a more stateless approach where answers to subgoals can be reused.&lt;/p&gt;
&lt;p&gt;While SLG is more complete, there are some design tradeoffs. One example in particular is related to how we handle associated types. It's completely possible that we can and will resolve these design problems in the future. In the meantime, however, we ressurected the old recursive solver. &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer&quot;&gt;Rust-analyzer&lt;/a&gt; has switched to using it and results have been positive.&lt;/p&gt;
&lt;p&gt;For now, we'll continue to work on resolving design problems with the SLG solver. Eventually, we expect that we'll evaluate the two and pick one to stick with.&lt;/p&gt;
&lt;h3&gt;&lt;a href=&quot;#creating-reproducable-chalk-test-files&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot; id=&quot;creating-reproducable-chalk-test-files&quot;&gt;&lt;/a&gt;Creating reproducable Chalk test files&lt;/h3&gt;
&lt;p&gt;Oftentimes we'll get a bug report where Chalk doesn't report the result one would expect. And as anyone who has maintained a piece of software knows, getting a minimal reproduction is difficult. What makes it even more difficult is that the goals and programs that Chalk understands are a &amp;quot;lowered&amp;quot; form of actual Rust code, which means not only do we have to make a minimal &lt;em&gt;Rust&lt;/em&gt; example, but also a minimal &lt;em&gt;Chalk&lt;/em&gt; example.&lt;/p&gt;
&lt;p&gt;In order to help make this process easier, we have started to make a logging shim for Chalk to generate programs that Chalk can run and reproduce the bug. Moreso, it should be able to be used seamlessly, regardless of the user of Chalk, whether it be rustc, rust-analyzer, or anything else.&lt;/p&gt;
&lt;h3&gt;&lt;a href=&quot;#documentation-in-the-chalk-book&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot; id=&quot;documentation-in-the-chalk-book&quot;&gt;&lt;/a&gt;Documentation in the Chalk book&lt;/h3&gt;
&lt;p&gt;We are committed to making the work that we do accessible to anyone interested, whether it be for those working on Chalk, on rustc, or just using Rust. As part of this effort, we previous started publishing a Chalk &lt;a href=&quot;http://rust-lang.github.io/chalk/book/&quot;&gt;book&lt;/a&gt;. During this sprint, we have added a little bit more documentation. Additionally, Chalk-related documentation that used to be in the &lt;a href=&quot;https://rustc-dev-guide.rust-lang.org/&quot;&gt;rustc-dev-guide&lt;/a&gt; has now been moved into the Chalk book.&lt;/p&gt;
&lt;h2&gt;&lt;a href=&quot;#2020-sprint-3&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot; id=&quot;2020-sprint-3&quot;&gt;&lt;/a&gt;2020 sprint 3&lt;/h2&gt;
&lt;p&gt;We haven't yet decided our goals for the next sprint. We are going to be doing our sprint planning in our weekly meeting on Tuesday, the 19th at 4:00 PM EST on &lt;a href=&quot;https://rust-lang.zulipchat.com/#narrow/stream/144729-wg-traits&quot;&gt;zulip&lt;/a&gt;. We then plan to officially start the sprint the week after. If you're interested in helping out or joining the discussion, feel free to stop by!&lt;/p&gt;
</content>

        <author>
            <name>Jack Huey</name>
        </author>
    </entry>
    
    <entry>
        <title>Lang Team meetings moving to new time slots</title>
        <link rel="alternate" href="https://blog.rust-lang.org/inside-rust/2020/05/08/lang-team-meetings-rescheduled.html" type="text/html" title="Lang Team meetings moving to new time slots" />
        <published>2020-05-08T00:00:00+00:00</published>
        <updated>2020-05-08T00:00:00+00:00</updated>
        <id>https://blog.rust-lang.org/inside-rust/2020/05/08/lang-team-meetings-rescheduled.html</id>
        <content type="html" xml:base="https://blog.rust-lang.org/inside-rust/2020/05/08/lang-team-meetings-rescheduled.html">&lt;p&gt;The Rust language team holds two weekly meetings:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The triage meeting, where we go through open items that need language team
review or guidance.&lt;/li&gt;
&lt;li&gt;The design meeting, where we do in-depth dives and explorations on a specific
proposal, issue, or idea.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;To better accommodate the schedules of lang team members and other regular
attendees, we've rescheduled the time slots for both of these meetings.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The triage meeting now takes place on Mondays from 12-1pm US/Pacific.&lt;/li&gt;
&lt;li&gt;The design meeting now takes place on Wednesdays from 10-11am US/Pacific.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;These meetings are open to the public; you can find the details on the lang
team calendar. For more information on how to subscribe to the lang team
calendar, see the README in the &lt;a href=&quot;https://github.com/rust-lang/lang-team&quot;&gt;lang team
repository&lt;/a&gt;.&lt;/p&gt;
</content>

        <author>
            <name>Josh Triplett</name>
        </author>
    </entry>
    
    <entry>
        <title>Governance Working Group Update: Meeting 23 April 2020</title>
        <link rel="alternate" href="https://blog.rust-lang.org/inside-rust/2020/04/23/Governance-wg.html" type="text/html" title="Governance Working Group Update: Meeting 23 April 2020" />
        <published>2020-04-23T00:00:00+00:00</published>
        <updated>2020-04-23T00:00:00+00:00</updated>
        <id>https://blog.rust-lang.org/inside-rust/2020/04/23/Governance-wg.html</id>
        <content type="html" xml:base="https://blog.rust-lang.org/inside-rust/2020/04/23/Governance-wg.html">&lt;p&gt;Greetings Rustaceans!&lt;/p&gt;
&lt;p&gt;The Rust Governance Working Group held another meeting on Zulip on 23 April.&lt;/p&gt;
&lt;p&gt;The agenda included:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Follow up on &lt;a href=&quot;https://github.com/rust-lang/rfcs/pull/2856&quot;&gt;the Project Group RFC&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Pre-RFC process&lt;/li&gt;
&lt;li&gt;Domain Working Group Retrospective&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;You can find the &lt;a href=&quot;https://github.com/rust-lang/wg-governance/blob/master/minutes/2020.04.23.md&quot;&gt;detailed minutes&lt;/a&gt; on the &lt;a href=&quot;https://github.com/rust-lang/wg-governance&quot;&gt;wg-governance&lt;/a&gt; repository, but here is a quick summary:&lt;/p&gt;
&lt;h1&gt;&lt;a href=&quot;#follow-up-on-the-project-group-rfc&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot; id=&quot;follow-up-on-the-project-group-rfc&quot;&gt;&lt;/a&gt;Follow up on the &lt;a href=&quot;https://github.com/rust-lang/rfcs/pull/2856&quot;&gt;Project Group RFC&lt;/a&gt;&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;Is in Final comment Period, on track to be merged by the rfcbot&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;&lt;a href=&quot;#pre-rfc-process&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot; id=&quot;pre-rfc-process&quot;&gt;&lt;/a&gt;Pre-RFC process&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;No update at present time&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;&lt;a href=&quot;#domain-working-group-retrospective&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot; id=&quot;domain-working-group-retrospective&quot;&gt;&lt;/a&gt;Domain Working Group Retrospective&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;There is lack of contextual clarity about how domain work relates to the Rust project in general&lt;/li&gt;
&lt;li&gt;First step: Created questionnaire to be shared with Domain WG leads via email to gain clarity on this&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&quot;#next-meeting&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot; id=&quot;next-meeting&quot;&gt;&lt;/a&gt;Next meeting&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Our next meeting will be 7 May 2020 via &lt;a href=&quot;https://rust-lang.zulipchat.com/#narrow/stream/223182-wg-governance&quot;&gt;Zulip&lt;/a&gt; 17:00 UTC.&lt;/li&gt;
&lt;/ul&gt;
</content>

        <author>
            <name>Val Grimm</name>
        </author>
    </entry>
    
    <entry>
        <title>Governance Working Group Update: Meeting 09 April 2020</title>
        <link rel="alternate" href="https://blog.rust-lang.org/inside-rust/2020/04/14/Governance-WG-updated.html" type="text/html" title="Governance Working Group Update: Meeting 09 April 2020" />
        <published>2020-04-14T00:00:00+00:00</published>
        <updated>2020-04-14T00:00:00+00:00</updated>
        <id>https://blog.rust-lang.org/inside-rust/2020/04/14/Governance-WG-updated.html</id>
        <content type="html" xml:base="https://blog.rust-lang.org/inside-rust/2020/04/14/Governance-WG-updated.html">&lt;p&gt;Greetings Rustaceans!&lt;/p&gt;
&lt;p&gt;The Rust Governance Working Group held another meeting on Zulip on 09 April.&lt;/p&gt;
&lt;p&gt;The agenda included:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Follow up on &lt;a href=&quot;https://github.com/rust-lang/rfcs/pull/2856&quot;&gt;the Project Group RFC&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Pre-RFC process&lt;/li&gt;
&lt;li&gt;Domain Working Group Retrospective&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;You can find the &lt;a href=&quot;https://github.com/rust-lang/wg-governance/blob/master/minutes/2020.04.09.md&quot;&gt;detailed minutes&lt;/a&gt; on the &lt;a href=&quot;https://github.com/rust-lang/wg-governance&quot;&gt;wg-governance&lt;/a&gt; repository, but here is a quick summary:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Follow up on the &lt;a href=&quot;https://github.com/rust-lang/rfcs/pull/2856&quot;&gt;Project Group RFC&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;Defined roles of &amp;quot;lead&amp;quot; and &amp;quot;liason&amp;quot;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Discussed the initial Pre-RFC process draft&lt;/li&gt;
&lt;li&gt;We ran out of time before getting to the Domain Working Group retrospective, but look forward to covering it at the next meeting!&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&quot;#next-meeting&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot; id=&quot;next-meeting&quot;&gt;&lt;/a&gt;Next meeting&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Our next meeting will be 23 April 2020 via &lt;a href=&quot;https://rust-lang.zulipchat.com/#narrow/stream/223182-wg-governance&quot;&gt;Zulip&lt;/a&gt; 18-19 CET / 1pm-2pm EST / 10-11am PST.&lt;/li&gt;
&lt;/ul&gt;
</content>

        <author>
            <name>Nell Shamrell-Harrington</name>
        </author>
    </entry>
    
    <entry>
        <title>Upcoming compiler-team design meetings</title>
        <link rel="alternate" href="https://blog.rust-lang.org/inside-rust/2020/04/10/upcoming-compiler-team-design-meeting.html" type="text/html" title="Upcoming compiler-team design meetings" />
        <published>2020-04-10T00:00:00+00:00</published>
        <updated>2020-04-10T00:00:00+00:00</updated>
        <id>https://blog.rust-lang.org/inside-rust/2020/04/10/upcoming-compiler-team-design-meeting.html</id>
        <content type="html" xml:base="https://blog.rust-lang.org/inside-rust/2020/04/10/upcoming-compiler-team-design-meeting.html">&lt;p&gt;In our &lt;a href=&quot;https://zulip-archive.rust-lang.org/131828tcompiler/95526planningmeeting20200410.html&quot;&gt;planning meeting today&lt;/a&gt;, the &lt;a href=&quot;https://www.rust-lang.org/governance/teams/compiler&quot;&gt;compiler team&lt;/a&gt; has scheduled our
next batch of upcoming design meetings. You can find the exact times
on the compiler team's &lt;a href=&quot;https://rust-lang.github.io/compiler-team/#meeting-calendar&quot;&gt;meeting calendar&lt;/a&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;On April 3rd (&lt;a href=&quot;https://calendar.google.com/event?action=TEMPLATE&amp;tmeid=M3I2N2tscWtjMnUxa2kxbmZoaGxqY2hqZmwgNnU1cnJ0Y2U2bHJ0djA3cGZpM2RhbWdqdXNAZw&amp;tmsrc=6u5rrtce6lrtv07pfi3damgjus%40group.calendar.google.com&quot;&gt;calendar event&lt;/a&gt;), we will discuss
&lt;a href=&quot;https://github.com/rust-lang/compiler-team/issues/267&quot;&gt;rust-lang/compiler-team#267&lt;/a&gt;, which is a proposal to move the
ownership over the standard library &lt;em&gt;implementation&lt;/em&gt; (but not
specification) to the compiler team.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a href=&quot;#did-you-know&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot; id=&quot;did-you-know&quot;&gt;&lt;/a&gt;Did you know?&lt;/h3&gt;
&lt;p&gt;Most weeks, the compiler team has some sort of design meeting. These
meetings take place on Zulip and are open to all. Every 4 weeks, we do
a planning meeting to pick the next few meetings from the list of open
proposals. You can find &lt;a href=&quot;https://rust-lang.github.io/compiler-team/about/steering-meeting/&quot;&gt;more details about how the compiler-team
steering meeting process here&lt;/a&gt;.&lt;/p&gt;
</content>

        <author>
            <name>Niko Matsakis</name>
        </author>
    </entry>
    
    <entry>
        <title>April Lang Team Design Meetings</title>
        <link rel="alternate" href="https://blog.rust-lang.org/inside-rust/2020/04/10/lang-team-design-meetings.html" type="text/html" title="April Lang Team Design Meetings" />
        <published>2020-04-10T00:00:00+00:00</published>
        <updated>2020-04-10T00:00:01+00:00</updated>
        <id>https://blog.rust-lang.org/inside-rust/2020/04/10/lang-team-design-meetings.html</id>
        <content type="html" xml:base="https://blog.rust-lang.org/inside-rust/2020/04/10/lang-team-design-meetings.html">&lt;p&gt;We've scheduled our &lt;strong&gt;language team design meetings&lt;/strong&gt; for April. We have plans
for three meetings:&lt;/p&gt;
&lt;h1&gt;&lt;a href=&quot;#try-blocks-try-traits-functions-that-try-oh-my&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot; id=&quot;try-blocks-try-traits-functions-that-try-oh-my&quot;&gt;&lt;/a&gt;try blocks, Try traits, functions that try, oh my!&lt;/h1&gt;
&lt;p&gt;(Update: tentatively moved to May 4.)&lt;/p&gt;
&lt;p&gt;Clear the path to stabilizing &lt;code&gt;try&lt;/code&gt; blocks and the &lt;code&gt;Try&lt;/code&gt; trait, and identify
some next steps for function-level try.&lt;/p&gt;
&lt;p&gt;Agenda:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/rust-lang/rust/issues/70941&quot;&gt;Resolving &lt;code&gt;Ok&lt;/code&gt;-wrapping for &lt;code&gt;try&lt;/code&gt;
blocks&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Discuss revisions to the &lt;code&gt;Try&lt;/code&gt; trait required for stabilization.&lt;/li&gt;
&lt;li&gt;Discuss syntax for early exit from a &lt;code&gt;try&lt;/code&gt; with an error (&lt;code&gt;Err(e)?&lt;/code&gt;): &lt;code&gt;fail&lt;/code&gt;,
&lt;code&gt;throw&lt;/code&gt;, &lt;code&gt;raise&lt;/code&gt;, &lt;code&gt;yeet&lt;/code&gt;, etc.&lt;/li&gt;
&lt;li&gt;If we have time, talk some about possibilities for function-level &lt;code&gt;try&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;&lt;a href=&quot;#april-20----edition-planning&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot; id=&quot;april-20----edition-planning&quot;&gt;&lt;/a&gt;April 20 -- Edition planning&lt;/h1&gt;
&lt;p&gt;Plan the 2021 edition, with a checklist of language features we will need to
land in 2020 if we want to ship them in Rust 2021. We hope to emerge from this
meeting with a checklist to guide our efforts, which we can adapt through the
process.&lt;/p&gt;
&lt;h1&gt;&lt;a href=&quot;#april-27----type-aliases-and-traits-enforcement&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot; id=&quot;april-27----type-aliases-and-traits-enforcement&quot;&gt;&lt;/a&gt;April 27 -- Type aliases and traits enforcement&lt;/h1&gt;
&lt;p&gt;Long-standing issue: &lt;code&gt;type Foo&amp;lt;T: Trait&amp;gt; = ...&lt;/code&gt; doesn't enforce &lt;code&gt;T: Trait&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Goal:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Discuss the situation with type aliases and decide what actions we may want
to take.&lt;/li&gt;
&lt;li&gt;Or, if we don't reach a decision, decide what measurements we might need to
reach one.&lt;/li&gt;
&lt;li&gt;Ideally, decide about &lt;a href=&quot;https://github.com/rust-lang/rust/pull/69741&quot;&gt;estebank's
PR&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&quot;#about-the-language-team-design-meetings&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot; id=&quot;about-the-language-team-design-meetings&quot;&gt;&lt;/a&gt;About the language team design meetings&lt;/h2&gt;
&lt;p&gt;The idea of the design meeting is that it's a time for us to have in-depth
discussions on some particular topic. This might be a burning problem that
we've discovered, an update on some existing design work, or a forward looking
proposal.&lt;/p&gt;
&lt;p&gt;The meetings are open for anyone to listen in and attend. They are typically
also recorded and posted online, along with minutes, after the fact. They
generally take place on Mondays at noon Eastern time, 9am Pacific time -- but
for the precise scheduling you should check the &lt;a href=&quot;https://github.com/rust-lang/lang-team/#meeting-calendar&quot;&gt;lang team calendar&lt;/a&gt;. Scheduled
meetings are subject to change and cancelation. In that case, the calendar
events will be updated.&lt;/p&gt;
</content>

        <author>
            <name>Josh Triplett</name>
        </author>
    </entry>
    
    <entry>
        <title>Update on the GitHub Actions evaluation</title>
        <link rel="alternate" href="https://blog.rust-lang.org/inside-rust/2020/04/07/update-on-the-github-actions-evaluation.html" type="text/html" title="Update on the GitHub Actions evaluation" />
        <published>2020-04-07T00:00:00+00:00</published>
        <updated>2020-04-07T00:00:00+00:00</updated>
        <id>https://blog.rust-lang.org/inside-rust/2020/04/07/update-on-the-github-actions-evaluation.html</id>
        <content type="html" xml:base="https://blog.rust-lang.org/inside-rust/2020/04/07/update-on-the-github-actions-evaluation.html">&lt;p&gt;The infrastructure team is happy to report that &lt;a href=&quot;https://blog.rust-lang.org/inside-rust/2019/11/14/evaluating-github-actions.html&quot;&gt;the evaluation we started last
year&lt;/a&gt; of &lt;a href=&quot;https://github.com/features/actions&quot;&gt;GitHub Actions&lt;/a&gt; as the new CI platform for the
&lt;a href=&quot;https://github.com/rust-lang/rust&quot;&gt;rust-lang/rust&lt;/a&gt; repository is making progress!&lt;/p&gt;
&lt;p&gt;On March 20th, 2020 we merged &lt;a href=&quot;https://github.com/rust-lang/rust/pull/70190&quot;&gt;PR #70190&lt;/a&gt;, adding the GitHub Actions
configuration to the compiler repository. We’re still gating merges on the
existing Azure Pipelines setup, but running the two providers side by side
allows us to find bugs in the GitHub Actions configuration without impacting
the work of our contributors.&lt;/p&gt;
&lt;p&gt;Once &lt;a href=&quot;https://github.com/rust-lang/rust/labels/A-github-actions&quot;&gt;all outstanding issues&lt;/a&gt; are fixed, the Infrastructure Team
will make the decision to either switch to GitHub Actions or stay on Azure
Pipelines. We expect the decision to happen in a couple of months.&lt;/p&gt;
&lt;h2&gt;&lt;a href=&quot;#whats-changing-with-github-actions&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot; id=&quot;whats-changing-with-github-actions&quot;&gt;&lt;/a&gt;What’s changing with GitHub Actions?&lt;/h2&gt;
&lt;p&gt;This change should have no visible effect to any user of Rust, but will greatly
improve the experience of our contributors.&lt;/p&gt;
&lt;p&gt;The main difference our contributors are going to notice is a big reduction of
our CI times. In the current Azure Pipelines setup builds regularly take more
than 3 hours to finish (with 60 parallel 2-core VMs), while we expect the new
GitHub Actions setup to take less than half the time to finish a build, thanks
to a dedicated pool of 8-core VMs GitHub generously prepared for us.&lt;/p&gt;
&lt;p&gt;Another technical change is that we’re now running most CI builds on the
&lt;a href=&quot;https://github.com/rust-lang-ci/rust&quot;&gt;rust-lang-ci/rust&lt;/a&gt; fork. This should only impact team members that want to get
a list of all the past builds, and should be completly transparent to everyone
else thanks to our integration bot &lt;a href=&quot;https://github.com/rust-lang/homu&quot;&gt;@bors&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;&lt;a href=&quot;#what-configuration-is-the-project-using&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot; id=&quot;what-configuration-is-the-project-using&quot;&gt;&lt;/a&gt;What configuration is the project using?&lt;/h2&gt;
&lt;p&gt;Our CI configuration is available at &lt;a href=&quot;https://github.com/rust-lang/rust/blob/master/src/ci/github-actions/ci.yml&quot;&gt;&lt;code&gt;src/ci/github-actions/ci.yml&lt;/code&gt;&lt;/a&gt;.
Note that our configuration is not using the standard GitHub Actions syntax,
but we’re relying on a preprocessor to expand YAML anchors to ease the
maintenance work on our end.&lt;/p&gt;
&lt;h2&gt;&lt;a href=&quot;#why-are-you-moving-away-from-azure-pipelines&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot; id=&quot;why-are-you-moving-away-from-azure-pipelines&quot;&gt;&lt;/a&gt;Why are you moving away from Azure Pipelines?&lt;/h2&gt;
&lt;p&gt;We're happy with Azure Pipelines as a product, but both Microsoft and GitHub
asked us to try GitHub Actions as it's more closely integrated into the GitHub
workflow we already use. After we used it for a while in other repositories we
were satisfied enough to start evaluating a migration for &lt;a href=&quot;https://github.com/rust-lang/rust&quot;&gt;rust-lang/rust&lt;/a&gt;.&lt;/p&gt;
</content>

        <author>
            <name>Pietro Albini</name>
        </author>
    </entry>
    
    <entry>
        <title>Traits working group 2020 sprint 1 summary</title>
        <link rel="alternate" href="https://blog.rust-lang.org/inside-rust/2020/03/28/traits-sprint-1.html" type="text/html" title="Traits working group 2020 sprint 1 summary" />
        <published>2020-03-28T00:00:00+00:00</published>
        <updated>2020-03-28T00:00:00+00:00</updated>
        <id>https://blog.rust-lang.org/inside-rust/2020/03/28/traits-sprint-1.html</id>
        <content type="html" xml:base="https://blog.rust-lang.org/inside-rust/2020/03/28/traits-sprint-1.html">&lt;p&gt;This Tuesday, the traits working group finished our first sprint of 2020, last 6 weeks from February 11th through March 24th. The last sprint was about a year ago, but we decided to resurrect the format in order to help push forward traits-related work in &lt;a href=&quot;https://github.com/rust-lang/chalk&quot;&gt;Chalk&lt;/a&gt; and rustc.&lt;/p&gt;
&lt;h2&gt;&lt;a href=&quot;#what-is-wg-traits-and-what-do-we-do&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot; id=&quot;what-is-wg-traits-and-what-do-we-do&quot;&gt;&lt;/a&gt;What is wg-traits and what do we do?&lt;/h2&gt;
&lt;h3&gt;&lt;a href=&quot;#goal-an-efficient-extensible-and-reusable-crate-for-the-rust-trait-system&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot; id=&quot;goal-an-efficient-extensible-and-reusable-crate-for-the-rust-trait-system&quot;&gt;&lt;/a&gt;Goal: An efficient, extensible, and reusable crate for the Rust trait system&lt;/h3&gt;
&lt;p&gt;The overarching goal of the &lt;a href=&quot;https://rust-lang.github.io/wg-traits/&quot;&gt;traits working group&lt;/a&gt; is to create a performant, extensible, and clean implementation of Rust's trait system. This implementation should scale not only to existing Rust features but also to new and upcoming features, such as:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Implied bounds (&lt;a href=&quot;https://rust-lang.github.io/rfcs/2089-implied-bounds.html&quot;&gt;RFC&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Const generics (&lt;a href=&quot;https://rust-lang.github.io/rfcs/2000-const-generics.html&quot;&gt;RFC&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Generic associated types (GATs) (&lt;a href=&quot;https://rust-lang.github.io/rfcs/1598-generic_associated_types.html&quot;&gt;RFC&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Inherent associated items (&lt;a href=&quot;https://github.com/rust-lang/rust/issues/8995&quot;&gt;tracking issue&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;As if that weren't enough, we'd like the implementaton to be &lt;strong&gt;reusable&lt;/strong&gt;, too -- meaning that it can be used by rustc, yes, but also rust-analyzer and potentially other contexts as well.&lt;/p&gt;
&lt;p&gt;This effort is part of one of the big, longer term goals for the compiler team: &lt;strong&gt;library-ification&lt;/strong&gt;. This refers to the idea of breaking apart the compiler into independent libraries that can be learned, tested, and developed independently.&lt;/p&gt;
&lt;p&gt;In order to achieve these and future features, our work is split into two parts: 1) Improving rustc's existing trait solver. 2) Design and implement the &lt;a href=&quot;https://github.com/rust-lang/chalk&quot;&gt;Chalk&lt;/a&gt; trait solver, work towards integration into rustc. The Chalk trait solver, briefly, is a logic-based trait solver, designed to be independent of rustc internals. In addition to it being more powerful than the current rustc trait solving implementation, Chalk can be used as a library for compiler-related work, such as IDE integration (e.g. &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer&quot;&gt;rust-analyzer&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;Coming into 2020, we — the traits working group — knew we wanted to get more organized and start to push more on getting Chalk fully integrated into rustc, by cleaning up the Chalk codebase itself, fixing bugs, implementing new features, and ultimately integrating Chalk into rustc itself. In addition, we are committed to documenting design considerations and decisions for better accesibility now and in the future. For example, we now publish a Chalk &lt;a href=&quot;http://rust-lang.github.io/chalk/book/&quot;&gt;book&lt;/a&gt; which, while incomplete, attempts to document the Chalk internals somewhat akin to the &lt;a href=&quot;https://rustc-dev-guide.rust-lang.org/&quot;&gt;rustc dev guide&lt;/a&gt;.&lt;/p&gt;
&lt;h4&gt;&lt;a href=&quot;#a-note-about-chalk-integration-in-rustc&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot; id=&quot;a-note-about-chalk-integration-in-rustc&quot;&gt;&lt;/a&gt;A note about Chalk integration in rustc&lt;/h4&gt;
&lt;p&gt;An experimental integration of Chalk was in rustc (under the &lt;code&gt;-Z chalk&lt;/code&gt; flag) for over a year, but since its initial implementation, little work had been done while much work had been done on Chalk itself. This ultimately meant that the initial implementation based on the older Chalk version looks very different from what an implementation based on the current Chalk would and should look like. Under this reasoning, that experimental implementation has been removed.&lt;/p&gt;
&lt;h2&gt;&lt;a href=&quot;#2020-sprint-1&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot; id=&quot;2020-sprint-1&quot;&gt;&lt;/a&gt;2020 sprint 1&lt;/h2&gt;
&lt;p&gt;Ok, with the background finished, that brings us to the actual 2020 sprint 1. Going into this, we didn't &lt;em&gt;quite&lt;/em&gt; know what our goals would be. In this post, we'll share an overview of each of the things that were accomplished during this sprint, which actually was quite a lot!&lt;/p&gt;
&lt;h3&gt;&lt;a href=&quot;#credit-where-credit-is-due&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot; id=&quot;credit-where-credit-is-due&quot;&gt;&lt;/a&gt;Credit where credit is due&lt;/h3&gt;
&lt;p&gt;A big thank you :hearts: to the folks who participated in this sprint:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/davidbarsky&quot;&gt;David Barsky&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/detrumi&quot;&gt;detrumi&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/flodiebold&quot;&gt;Florian Diebold&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/jackh726&quot;&gt;Jack Huey&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/crlf0710&quot;&gt;Charles Lew&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/yaahc&quot;&gt;Jane Lusby&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/nikomatsakis&quot;&gt;Niko Matsakis&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a href=&quot;#wg-traits-skill-tree&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot; id=&quot;wg-traits-skill-tree&quot;&gt;&lt;/a&gt;wg-traits skill tree&lt;/h3&gt;
&lt;p&gt;Our &amp;quot;&lt;a href=&quot;https://rust-lang.github.io/wg-traits/roadmap/skill-tree.html&quot;&gt;skill tree&lt;/a&gt;&amp;quot; is how we track our &lt;a href=&quot;https://rust-lang.github.io/wg-traits/roadmap.html&quot;&gt;development roadmap&lt;/a&gt;. It shows some of the major goals we are working towards (e.g., having chalk be usable as a standalone library) along with some of the major tasks that we have to complete along the way. You can click on the tasks to be taken to a github issue or other explanation. We try to update it after every meeting so that we have some idea of what we're doing and why.&lt;/p&gt;
&lt;p&gt;The skill tree structure was inspired by &lt;a href=&quot;https://hacks.mozilla.org/2018/10/webassemblys-post-mvp-future/&quot;&gt;this blog post about WebAssembly&lt;/a&gt;, which in turn borrowed the term from games. Sadly, the current tool that generates the skill tree doesn't yet make anything as beautiful as the hand-drawn art in the WASM post. If anybody is interested in improving the tool's output, that is on the list of 'stretch goals' for this coming sprint!&lt;/p&gt;
&lt;h3&gt;&lt;a href=&quot;#chalk-book-chalk-engine-chapter&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot; id=&quot;chalk-book-chalk-engine-chapter&quot;&gt;&lt;/a&gt;Chalk book &lt;code&gt;chalk-engine&lt;/code&gt; chapter&lt;/h3&gt;
&lt;p&gt;As mentioned before, in our effort to document Chalk internals, we started publishing a &lt;a href=&quot;http://rust-lang.github.io/chalk/book/&quot;&gt;book&lt;/a&gt; late last year. Near the beginning of this sprint, we added a whole chapter about &lt;a href=&quot;http://rust-lang.github.io/chalk/book/engine.html&quot;&gt;&lt;code&gt;chalk-engine&lt;/code&gt;&lt;/a&gt; itself. This is the core crate of Chalk that solves a given set of &lt;code&gt;Goal&lt;/code&gt;s. While there is always more that can be documented, we hope this at least is a start in helping people, potentially newcomers, to understand how Chalk works internally.&lt;/p&gt;
&lt;h3&gt;&lt;a href=&quot;#work-on-basic-support-for-impl-trait&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot; id=&quot;work-on-basic-support-for-impl-trait&quot;&gt;&lt;/a&gt;Work on basic support for &lt;code&gt;impl Trait&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;In Rust, there are a few places, currently and in the future, where you may specify &lt;code&gt;impl Trait&lt;/code&gt; instead of a specific struct. For example, the signature of a function may be &lt;code&gt;fn foo() -&amp;gt; impl Debug&lt;/code&gt;. Another place where you may use the &lt;code&gt;impl Trait&lt;/code&gt; syntax in the future is with &lt;code&gt;type Foo = impl Trait&lt;/code&gt; (currently under the &lt;a href=&quot;https://github.com/rust-lang/rust/issues/63063&quot;&gt;&lt;code&gt;type_alias_impl_trait&lt;/code&gt;&lt;/a&gt; feature). This would allow you to use &lt;code&gt;Foo&lt;/code&gt; as if it was a concrete type. During this sprint, we made significant progress in allowing both of these to work with Chalk. We'll be doing follow-up work on this in the upcoming sprint, and hopefully landing support.&lt;/p&gt;
&lt;h3&gt;&lt;a href=&quot;#creating-a-proposal-for-a-shared-type-library&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot; id=&quot;creating-a-proposal-for-a-shared-type-library&quot;&gt;&lt;/a&gt;Creating a proposal for a shared type library&lt;/h3&gt;
&lt;p&gt;Currently, rustc, rust-analyzer, and chalk each represent Rust types using a different set of structs. This means that when rustc or rust-analyzer wish to invoke chalk functions, we have to convert the representation of Rust types back and forth. This is fine for the time being, but eventually we would like to be having everyone use the same representation, so that no interconversion is required. This is a bit tricky, though, because the requirements of rustc (a batch compiler) and rust-analyzer (an IDE) are somewhat different. During this sprint, we wrote up a proposal for a shared type library, and led a design meeting on the topic. You can find the &lt;a href=&quot;https://rust-lang.github.io/compiler-team/minutes/design-meeting/2020-03-12-shared-library-for-types/&quot;&gt;record of that meeting here&lt;/a&gt;, which also includes the proposal.&lt;/p&gt;
&lt;p&gt;During this upcoming sprint, we'll be following up on this design by starting to do some of the preliminary refactorings in rustc.&lt;/p&gt;
&lt;h3&gt;&lt;a href=&quot;#refactoring-for-passing-interner-around&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot; id=&quot;refactoring-for-passing-interner-around&quot;&gt;&lt;/a&gt;Refactoring for passing &lt;code&gt;Interner&lt;/code&gt; around&lt;/h3&gt;
&lt;p&gt;One of the requirements for a shared type library is that it needs to support interning and arena allocation of types. &lt;em&gt;Interning&lt;/em&gt; a type means to re-use the same memory each time you have an equivalent type, rather than allocating multiples copies. &lt;em&gt;Arena allocation&lt;/em&gt; is a memory management strategy where you allocate all the memory in an ever-growing pool and then free the entire pool at once, rather than tracking and freeing individual allocations.&lt;/p&gt;
&lt;p&gt;Chalk's existing type library was implemented with simplicity in mind, however, and couldn't support either of these use-cases. The problem was that to support interning and arena allocation, you need to track around an &lt;em&gt;interner&lt;/em&gt; variable that contains the hash-maps, arenas, and other supporting data structures, and chalk's APIs didn't have any space for that. This sprint, we fixed that, so that we now pass along an &lt;code&gt;interner&lt;/code&gt; value throughout chalk, meaning we can bridge to rustc and rust-analyzer more easily.&lt;/p&gt;
&lt;h3&gt;&lt;a href=&quot;#refactoring-how-chalk-represents-bound-types-and-lifetimes&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot; id=&quot;refactoring-how-chalk-represents-bound-types-and-lifetimes&quot;&gt;&lt;/a&gt;Refactoring how chalk represents bound types and lifetimes&lt;/h3&gt;
&lt;p&gt;Some of the details of how chalk represented types with &lt;em&gt;bound variables&lt;/em&gt; (e.g., the &lt;code&gt;'a&lt;/code&gt; in &lt;code&gt;for&amp;lt;'a&amp;gt; fn(&amp;amp;'a u32)&lt;/code&gt;) differed from how rustc was handling such types. This made bridging from rustc to chalk much harder.  We found that the design we ultimately want was a hybrid of what rustc and and chalk have. During this sprint, we did most of the chalk refactoring, and in the upcoming sprint, we'll work on the rustc side of the work.&lt;/p&gt;
&lt;h3&gt;&lt;a href=&quot;#work-on-adding-tracing-support-to-chalk&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot; id=&quot;work-on-adding-tracing-support-to-chalk&quot;&gt;&lt;/a&gt;Work on adding &lt;code&gt;tracing&lt;/code&gt; support to Chalk&lt;/h3&gt;
&lt;p&gt;The &lt;a href=&quot;https://crates.io/crates/tracing&quot;&gt;&lt;code&gt;tracing&lt;/code&gt;&lt;/a&gt; crate provides a framework for collecting event-based diagnostic information. Currently, in Chalk, we only have basic logging support. By adding &lt;code&gt;tracing&lt;/code&gt; support, we expect to get more fine-grained control of Chalk diagnostics. Initial support is nearly finished and hopefully will get merged soon.&lt;/p&gt;
&lt;h3&gt;&lt;a href=&quot;#exploratory-rustc-integration-mvp&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot; id=&quot;exploratory-rustc-integration-mvp&quot;&gt;&lt;/a&gt;Exploratory rustc integration MVP&lt;/h3&gt;
&lt;p&gt;As mentioned before, the previous experimental Chalk integration was removed from rustc since it was outdated. Since there are quite a few design differences between Chalk and rustc's current trait solver, some subtle, it's not always clear what &lt;em&gt;exactly&lt;/em&gt; needs to be modified to makes things work correctly. We have &lt;a href=&quot;https://github.com/rust-lang/rust/pull/69406&quot;&gt;started&lt;/a&gt; writing the experimental Chalk integration. The goal, at least to start, is to create a minimal implementation as a basis for future work. While the pull request is not &lt;em&gt;quite&lt;/em&gt; there, it's close and has been tremendously helpful in uncovering blocking issues in Chalk that hold up progress.&lt;/p&gt;
&lt;h3&gt;&lt;a href=&quot;#exploratory-recursive-solver&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot; id=&quot;exploratory-recursive-solver&quot;&gt;&lt;/a&gt;Exploratory recursive solver&lt;/h3&gt;
&lt;p&gt;One of the interesting aspects of chalk's design is that it separates out the &lt;strong&gt;solver strategy&lt;/strong&gt; from other parts of the trait system implementation. In addition to our existing solver, the so-called &lt;a href=&quot;http://smallcultfollowing.com/babysteps/blog/2018/01/31/an-on-demand-slg-solver-for-chalk/&quot;&gt;&amp;quot;on demand slg solver&amp;quot;&lt;/a&gt;, we are exploring a &lt;a href=&quot;https://gist.github.com/nikomatsakis/bfbdbe588d6fc61ecb09e3b51847fb7c&quot;&gt;&amp;quot;recursive solver&amp;quot;&lt;/a&gt; design. We began by resurrecting an older version of this code that was removed and have been exploring adapting it to the newer ideas.&lt;/p&gt;
&lt;h3&gt;&lt;a href=&quot;#minor-chalk-cleanups&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot; id=&quot;minor-chalk-cleanups&quot;&gt;&lt;/a&gt;Minor Chalk cleanups&lt;/h3&gt;
&lt;p&gt;Over the last sprint, there have been a couple smaller cleanups to Chalk to mention. It can build rustc again, passing rustc's lints. We removed an unneeded dependency (well, it's technically there for tests). Finally, we also made Chalk a bit more panic-safe.&lt;/p&gt;
&lt;h2&gt;&lt;a href=&quot;#2020-sprint-2&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot; id=&quot;2020-sprint-2&quot;&gt;&lt;/a&gt;2020 sprint 2&lt;/h2&gt;
&lt;p&gt;We plan to begin the next sprint of 2020 next Tuesday, March 31st. We'll briefly cover a few goals:&lt;/p&gt;
&lt;h3&gt;&lt;a href=&quot;#how-to-get-involved&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot; id=&quot;how-to-get-involved&quot;&gt;&lt;/a&gt;How to get involved&lt;/h3&gt;
&lt;p&gt;If you'd like to get involved, please drop in on the &lt;a href=&quot;https://rust-lang.zulipchat.com/&quot;&gt;rust-lang Zulip&lt;/a&gt; in the &lt;code&gt;#wg-traits&lt;/code&gt; stream. We also have a &lt;a href=&quot;https://calendar.google.com/event?action=TEMPLATE&amp;tmeid=b2hhbXZ2YzcxNzhsMTZqNHFibGxpMmZubjRfMjAyMDAzMzFUMjAwMDAwWiA2dTVycnRjZTZscnR2MDdwZmkzZGFtZ2p1c0Bn&amp;tmsrc=6u5rrtce6lrtv07pfi3damgjus%40group.calendar.google.com&amp;scp=ALL&quot;&gt;weekly design meeting&lt;/a&gt; (held on Zulip) that we use to sync up on progress and discuss tricky issues.&lt;/p&gt;
&lt;h3&gt;&lt;a href=&quot;#chalk-rustc-integration-mvp&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot; id=&quot;chalk-rustc-integration-mvp&quot;&gt;&lt;/a&gt;Chalk rustc-integration MVP&lt;/h3&gt;
&lt;p&gt;It will be a bit of a stretch, but we hope that this sprint we can complete work on a &amp;quot;MVP&amp;quot; of chalk-rustc integration that we can use to drive further development. This MVP will be unsound and incomplete (for example, it will likely not enforce borrow checker rules correctly), but it will help us to uncover corner cases and to validate the design of the chalk solver. Towards this end, we have a number of concrete tasks:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/rust-lang/chalk/issues/363&quot;&gt;Extending chalk with support for builtin traits like &lt;code&gt;Sized&lt;/code&gt;, &lt;code&gt;Copy&lt;/code&gt;, and &lt;code&gt;Clone&lt;/code&gt;&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;There are several traits for which the precise rules are not expressed as ordinary impls, but rather require special integration in the library itself. Chalk doesn't currently have any support for these traits, so we need to extend it.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Land existing branch&lt;/li&gt;
&lt;li&gt;Converting rustc types into chalk types
&lt;ul&gt;
&lt;li&gt;Eventually, we hope to have rustc and chalk sharing the same type library, so that no bridging is needed between them. But creating such a library will take a while. So, in the interim, we will write code that converts rustc types into chalk types on demand. (Some of the other sprint goals, meanwhile, will be adapting rustc types so that we are also moving towards our eventual goal.)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a href=&quot;#design-meeting-for-const-integration&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot; id=&quot;design-meeting-for-const-integration&quot;&gt;&lt;/a&gt;Design meeting for &lt;code&gt;const&lt;/code&gt; integration&lt;/h3&gt;
&lt;p&gt;As mentioned in the previous section, our initial Chalk rustc-integration MVP won't have support for &lt;code&gt;const&lt;/code&gt;. During this sprint, we plan on &lt;a href=&quot;https://github.com/rust-lang/wg-traits/issues/15&quot;&gt;scheduling a design meeting&lt;/a&gt; to specifically flesh out some of the design about what &lt;code&gt;const&lt;/code&gt; &lt;em&gt;would&lt;/em&gt; look like. Actual implementation will be left for a later sprint.&lt;/p&gt;
&lt;h3&gt;&lt;a href=&quot;#move-towards-aligning-rustc-and-chalk-types&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot; id=&quot;move-towards-aligning-rustc-and-chalk-types&quot;&gt;&lt;/a&gt;Move towards aligning rustc and Chalk types&lt;/h3&gt;
&lt;p&gt;During this sprint, we plan to start working towards extracting a shared library for Rust types, as discussed in the &lt;a href=&quot;https://rust-lang.github.io/compiler-team/minutes/design-meeting/2020-03-12-shared-library-for-types/&quot;&gt;design meeting&lt;/a&gt; mentioned previously. This will involve work on refactoring rustc as well as changes to chalk. (&lt;a href=&quot;https://github.com/rust-lang/wg-traits/issues/16&quot;&gt;Tracking issue.&lt;/a&gt;)&lt;/p&gt;
&lt;h3&gt;&lt;a href=&quot;#land-basic-support-for-impl-trait&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot; id=&quot;land-basic-support-for-impl-trait&quot;&gt;&lt;/a&gt;Land basic support for &lt;code&gt;impl Trait&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;We expect to land basic support for &lt;code&gt;impl Trait&lt;/code&gt; fairly early in the next sprint. However, there is some &lt;a href=&quot;https://github.com/rust-lang/chalk/issues/335&quot;&gt;followup work&lt;/a&gt; to be done to further refine the implementation.&lt;/p&gt;
&lt;h3&gt;&lt;a href=&quot;#exploratory-implementations-and-research&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot; id=&quot;exploratory-implementations-and-research&quot;&gt;&lt;/a&gt;Exploratory implementations and research&lt;/h3&gt;
&lt;p&gt;In addition to the more concrete goals, there is also some exploratory work being done:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/rust-lang/chalk/issues/351&quot;&gt;Implementating a recursive solver&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/rust-lang/chalk/issues/364&quot;&gt;Converting semantic to syntactic equality&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/rust-lang/chalk/issues/365&quot;&gt;Outputting a file for reproducing bugs&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a href=&quot;#chalk-performance-work&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot; id=&quot;chalk-performance-work&quot;&gt;&lt;/a&gt;Chalk performance work&lt;/h3&gt;
&lt;p&gt;Most of the work on Chalk has been focused on design, and &lt;em&gt;not much&lt;/em&gt; has been done to optimize performance. While the particular &amp;quot;end goal&amp;quot; isn't clear here, we hope to start by createing a set of memory, cpu, and time benchmarks for Chalk. With this framework, we can diagnose specific performance issues and monitor future changes for regressions. Part of this will be to &lt;a href=&quot;https://github.com/rust-lang/chalk/issues/337&quot;&gt;land&lt;/a&gt; &lt;code&gt;tracing&lt;/code&gt; support.&lt;/p&gt;
&lt;h3&gt;&lt;a href=&quot;#improving-the-skill-tree&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot; id=&quot;improving-the-skill-tree&quot;&gt;&lt;/a&gt;Improving the skill tree&lt;/h3&gt;
&lt;p&gt;The skill tree has been a useful tool for helping us organize our work and track our status and overall plan. However, the current output is not exactly self explanatory, nor is it particularly attractive. The ultimate goal is to generate pictures similar to Lin's &lt;a href=&quot;https://hacks.mozilla.org/2018/10/webassemblys-post-mvp-future/&quot;&gt;hand drawn artwork&lt;/a&gt;. There are also some missing features. If there is someone out there interested in taking a stab at improving the quality of the output, or adding features, that would be great! skill-tree lives in its own &lt;a href=&quot;https://github.com/nikomatsakis/skill-tree&quot;&gt;github repo&lt;/a&gt;, but just drop by the &lt;code&gt;#wg-traits&lt;/code&gt; stream on Zulip to chat about it.&lt;/p&gt;
</content>

        <author>
            <name>Jack Huey</name>
        </author>
    </entry>
    
</feed>

<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
    <generator uri="https://blog.rust-lang.org/inside-rust/" version="0.1.0">Inside Rust Blog</generator>
    <link href="https://blog.rust-lang.org/inside-rust/feed.xml" rel="self" type="application/atom+xml" />
    <link href="https://blog.rust-lang.org/inside-rust/" rel="alternate" type="text/html" />
    <id>https://blog.rust-lang.org/inside-rust/</id>
    <title>Inside Rust Blog</title>
    <subtitle>Want to follow along with Rust development? Curious how you might get involved? Take a look!</subtitle>
    <author>
        <name>Maintained by the Rust Teams.</name>
        <uri>https://github.com/rust-lang/blog.rust-lang.org/</uri>
    </author>
    <updated>2021-12-17T15:03:55+00:00</updated>

    
    <entry>
        <title>Follow-up on the moderation issue</title>
        <link rel="alternate" href="https://blog.rust-lang.org/inside-rust/2021/12/17/follow-up-on-the-moderation-issue.html" type="text/html" title="Follow-up on the moderation issue" />
        <published>2021-12-17T00:00:00+00:00</published>
        <updated>2021-12-17T00:00:00+00:00</updated>
        <id>https://blog.rust-lang.org/inside-rust/2021/12/17/follow-up-on-the-moderation-issue.html</id>
        <content type="html" xml:base="https://blog.rust-lang.org/inside-rust/2021/12/17/follow-up-on-the-moderation-issue.html">&lt;p&gt;Last week, the following e-mail was sent to all members of the Rust project
(including all working groups) to follow up on the moderation issue.
The footnotes have been added to provide additional context to the wider Rust community,
and were not part of the original e-mail.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;strong&gt;From:&lt;/strong&gt; Mara Bos &lt;br /&gt;
&lt;strong&gt;To:&lt;/strong&gt; All members of the Rust project &lt;br /&gt;
&lt;strong&gt;Date:&lt;/strong&gt; Fri, 10 Dec 2021 18:12:06 UTC &lt;br /&gt;
&lt;strong&gt;Subject:&lt;/strong&gt; Follow-up on the moderation issue&lt;/p&gt;
&lt;p&gt;Hey all,&lt;/p&gt;
&lt;p&gt;On behalf of the top-level team leads, the new mods, the project directors to
the Foundation&lt;sup class&#x3D;&quot;footnote-ref&quot;&gt;&lt;a href&#x3D;&quot;#fn1&quot; id&#x3D;&quot;fnref1&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;, and the core team&lt;sup class&#x3D;&quot;footnote-ref&quot;&gt;&lt;a href&#x3D;&quot;#fn2&quot; id&#x3D;&quot;fnref2&quot;&gt;2&lt;/a&gt;&lt;/sup&gt;, I&#x27;d like to
apologize for the delay in getting back to all of you after the resignation of
the moderation team&lt;sup class&#x3D;&quot;footnote-ref&quot;&gt;&lt;a href&#x3D;&quot;#fn3&quot; id&#x3D;&quot;fnref3&quot;&gt;3&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;
&lt;p&gt;Over the past few weeks, it has been nearly the full time job of many involved
to collect all the context, understand the perspectives of those involved, find
common ground, and rebuild understanding and trust. This work is subtle, highly
context dependent, and sometimes extremely personal. Still, we owe it to all
project members to be as transparent as we can be. In this email, I&#x27;ll attempt
to update you on the shape of the issues and restate our collective commitment
to solving them together with the entire Rust project and eventually the wider
Rust community.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;What&#x27;s going on?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The most immediate cause of the current issue was a disagreement between the
former members of the moderation team and the core team about how to handle a
moderation issue in which the core team itself were interested parties.
I cannot share more context on that issue without violating the privacy of
those involved, including of those who reported the issue.
However, as frustrating as it might be for those without any context,
I am convinced it&#x27;s not in any way necessary to get more people involved in
that specific moderation issue itself.&lt;/p&gt;
&lt;p&gt;Historically, moderation actions involving Rust team members have been reviewed
in collaboration between the moderation team and the core team.
However, due to the involvement of the core team, there was no clear process to follow.
Both teams put in substantial effort to try to deal with this lack of process,
but over an eight month period involving miscommunication and disagreements,
this escalated into a trust issue between the moderation team and the core team.
Both the moderators and the core team ended up in an unworkable situation
where no one could have full context, making a path forward impossible.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Why are certain groups or people directly involved in solving this and others not?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Due to the resignation being unexpected and the complexity of the situation being high,
we both needed to act quickly and involve the most obvious stakeholders.
Since the concept of leadership of the Rust project is fluid and not well defined,
it is very hard to pick the right set of people to involve,
while making sure different perspectives are represented and heard.
Any set would likely leave out some person or group who needed to be involved,
but to get this unblocked, we started with all top-level team leads, project directors
to the Foundation, all core team members, and the new moderation team members,
to discuss next steps. This was chosen since it was easy to determine
objectively who fit this description and who did not.&lt;/p&gt;
&lt;p&gt;Over time, we will expand this group to include others in the project.
However, due to the highly context-dependent and sensitive nature of what&#x27;s
being discussed, opening all discussion to everyone in the project (which is
effectively making it open to the public) would be counterproductive and make
fact finding and context building impossible.&lt;/p&gt;
&lt;p&gt;Ryan Levick and I have stepped forward to coordinate the work here.
If you would like to be involved or provide input,
please contact either of us by e-mail or on Zulip.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;What are we going to do?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;With all this in mind, we are committed to the following high level goals:&lt;/p&gt;
&lt;p&gt;1. The recent events are one of several indicators that the Rust project has
underspecified policies for handling complex moderation issues. This must be
fixed with publicly documented procedures around moderation that ensure
privacy, fairness, accountability, and justice to all parties involved. We are
gathering input and experiences to try to find an outcome that will satisfy
everyone&#x27;s needs and takes into account past experiences. Decisions will not be
made without wider community involvement.&lt;/p&gt;
&lt;p&gt;2. More generally, the issue was another indicator to a fact that was already
clear to all involved in Rust project leadership, including all members of the
core team: the Rust project needs to adapt its structures for how it does
governance. What the future of Rust governance should look like is a big open
question, but from the input we&#x27;ve collected so far, there does seem to be
enough common ground to build on. We want to solve this problem with feedback
from all Rust project members.&lt;/p&gt;
&lt;p&gt;3. Most specifically, we need to resolve the specific moderation issue that
was at the center of the disagreement between core and the former moderation
team. This resolution needs to respect all the values listed in point 1:
privacy, fairness, accountability, and justice to all parties involved. This
will be handled with input from all involved parties.&lt;/p&gt;
&lt;p&gt;These issues are highly complex, require a large amount of context to
understand, and involve private and personal information which should not be
discussed publicly. However, at the center of the Rust project is a belief in
transparency and openness. We are committed to solving these issues with all
members of the Rust project and the wider Rust community, but we ask for your
patience while thoughts are organized and drafts are constructed. Details and
plans will be discussed publicly when we can ensure that doing so will not
cause more confusion.&lt;/p&gt;
&lt;p&gt;Needless to say, it is difficult to govern an open source project which has
reached a size larger than most companies&lt;sup class&#x3D;&quot;footnote-ref&quot;&gt;&lt;a href&#x3D;&quot;#fn4&quot; id&#x3D;&quot;fnref4&quot;&gt;4&lt;/a&gt;&lt;/sup&gt; and yet is composed of
volunteers. We have a lot of work ahead of us, but we are confident that the
Rust project will come out stronger from this. While these issues are serious
and require care to reach positive conclusions, we are confident that this will
not negatively impact our ability to continue to ship improvements to the Rust
language and its core tooling, documentation, and support.&lt;sup class&#x3D;&quot;footnote-ref&quot;&gt;&lt;a href&#x3D;&quot;#fn5&quot; id&#x3D;&quot;fnref5&quot;&gt;5&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;p&gt;If you have any concerns or thoughts, please reach out to me or Ryan with
questions, concerns, or comments.&lt;/p&gt;
&lt;p&gt;Thanks, &lt;br /&gt;
Mara Bos (Library team lead), &lt;br /&gt;
on behalf of top-level team leads, project directors to the Foundation, core
team members, and the new moderators.&lt;/p&gt;
&lt;hr /&gt;
&lt;section class&#x3D;&quot;footnotes&quot;&gt;
&lt;ol&gt;
&lt;li id&#x3D;&quot;fn1&quot;&gt;
&lt;p&gt;These are the members of the Rust project who represent the project on the board of the Rust Foundation. &lt;a href&#x3D;&quot;#fnref1&quot; class&#x3D;&quot;footnote-backref&quot;&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id&#x3D;&quot;fn2&quot;&gt;
&lt;p&gt;Unlike in many other projects, the Rust project is made up of many teams. The core team is one of them, and does not make decisions that fall under the scope of one of the other teams. &lt;a href&#x3D;&quot;#fnref2&quot; class&#x3D;&quot;footnote-backref&quot;&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id&#x3D;&quot;fn3&quot;&gt;
&lt;p&gt;&lt;a href&#x3D;&quot;https://github.com/rust-lang/team/pull/671&quot;&gt;https://github.com/rust-lang/team/pull/671&lt;/a&gt; &lt;a href&#x3D;&quot;#fnref3&quot; class&#x3D;&quot;footnote-backref&quot;&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id&#x3D;&quot;fn4&quot;&gt;
&lt;p&gt;For reference, the original email went out to approximately 300 people. &lt;a href&#x3D;&quot;#fnref4&quot; class&#x3D;&quot;footnote-backref&quot;&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id&#x3D;&quot;fn5&quot;&gt;
&lt;p&gt;Rust 1.57 was released two weeks ago, and we will continue to ship new releases of Rust on schedule. &lt;a href&#x3D;&quot;#fnref5&quot; class&#x3D;&quot;footnote-backref&quot;&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</content>

        <author>
            <name>Ryan Levick and Mara Bos</name>
        </author>
    </entry>
    
    <entry>
        <title>1.57.0 pre-release testing</title>
        <link rel="alternate" href="https://blog.rust-lang.org/inside-rust/2021/11/30/1.57.0-prerelease.html" type="text/html" title="1.57.0 pre-release testing" />
        <published>2021-11-30T00:00:00+00:00</published>
        <updated>2021-11-30T00:00:00+00:00</updated>
        <id>https://blog.rust-lang.org/inside-rust/2021/11/30/1.57.0-prerelease.html</id>
        <content type="html" xml:base="https://blog.rust-lang.org/inside-rust/2021/11/30/1.57.0-prerelease.html">&lt;p&gt;The 1.57.0 pre-release is ready for testing. The release is scheduled for this
Thursday, December 2nd. &lt;a href&#x3D;&quot;https://github.com/rust-lang/rust/blob/master/RELEASES.md#version-1570-2021-12-02&quot;&gt;Release notes can be found here.&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;You can try it out locally by running:&lt;/p&gt;
&lt;pre&gt;&lt;code class&#x3D;&quot;language-plain&quot;&gt;RUSTUP_DIST_SERVER&#x3D;https://dev-static.rust-lang.org rustup update stable
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The index is &lt;a href&#x3D;&quot;https://dev-static.rust-lang.org/dist/2021-11-30/index.html&quot;&gt;https://dev-static.rust-lang.org/dist/2021-11-30/index.html&lt;/a&gt;. You
can leave feedback on the &lt;a href&#x3D;&quot;https://internals.rust-lang.org/t/rust-1-57-0-prerelease-testing/15690&quot;&gt;internals thread&lt;/a&gt;.&lt;/p&gt;
</content>

        <author>
            <name>Mark Rousskov</name>
        </author>
    </entry>
    
    <entry>
        <title>In response to the moderation team resignation</title>
        <link rel="alternate" href="https://blog.rust-lang.org/inside-rust/2021/11/25/in-response-to-the-moderation-team-resignation.html" type="text/html" title="In response to the moderation team resignation" />
        <published>2021-11-25T00:00:00+00:00</published>
        <updated>2021-11-25T00:00:00+00:00</updated>
        <id>https://blog.rust-lang.org/inside-rust/2021/11/25/in-response-to-the-moderation-team-resignation.html</id>
        <content type="html" xml:base="https://blog.rust-lang.org/inside-rust/2021/11/25/in-response-to-the-moderation-team-resignation.html">&lt;p&gt;As top-level team leads, project directors to the Foundation, and core team
members, we are actively collaborating to establish next steps after the
statement from the Rust moderation team.&lt;/p&gt;
&lt;p&gt;While we are having ongoing conversations to share perspectives on the
situation, we&#x27;d like to collectively state that we are all committed to the
continuity and long term health of the project.&lt;/p&gt;
&lt;p&gt;Updates on next steps will be shared with the project and wider community over
the next few weeks. In the meantime, we are grateful to the interim moderators
who have stepped up to provide moderation continuity to the project.&lt;/p&gt;
&lt;p&gt;Signed, in alphabetical order, &lt;br /&gt;
  Aidan Hobson Sayers (Core team) &lt;br /&gt;
  Ashley Williams (Core team) &lt;br /&gt;
  Felix Klock (Compiler team co-lead) &lt;br /&gt;
  Florian Gilcher (Core team) &lt;br /&gt;
  Jan-Erik Rediger (Core team) &lt;br /&gt;
  Jane Lusby (Project Director for Collaboration) &lt;br /&gt;
  Josh Stone (Project Director for Reliability) &lt;br /&gt;
  Josh Triplett (Language team co-lead) &lt;br /&gt;
  Joshua Gould (Mod team) &lt;br /&gt;
  JT (Core team) &lt;br /&gt;
  Justin Geibel (crates.io team co-lead) &lt;br /&gt;
  Khionu Sybiern (Mod team) &lt;br /&gt;
  Manish Goregaokar (Devtools co-lead) &lt;br /&gt;
  Mara Bos (Library team lead) &lt;br /&gt;
  Mark Rousskov (Core team) &lt;br /&gt;
  Nicholas Matsakis (Language team co-lead) &lt;br /&gt;
  Pascal Hertleif (Devtools co-lead) &lt;br /&gt;
  Pietro Albini (Core team) &lt;br /&gt;
  Ryan Levick (Core team) &lt;br /&gt;
  Steve Klabnik (Core team) &lt;br /&gt;
  Tobias Bieniek (crates.io team co-lead) &lt;br /&gt;
  Tyler Mandry (Project Director for Quality) &lt;br /&gt;
  Wesley Wiser (Compiler team co-lead)&lt;/p&gt;
</content>

        <author>
            <name>The undersigned</name>
        </author>
    </entry>
    
    <entry>
        <title>Please welcome The 8472 and Ashley Mannix to Library Contributors</title>
        <link rel="alternate" href="https://blog.rust-lang.org/inside-rust/2021/11/15/libs-contributors-the8472-kodraus.html" type="text/html" title="Please welcome The 8472 and Ashley Mannix to Library Contributors" />
        <published>2021-11-15T00:00:00+00:00</published>
        <updated>2021-11-15T00:00:00+00:00</updated>
        <id>https://blog.rust-lang.org/inside-rust/2021/11/15/libs-contributors-the8472-kodraus.html</id>
        <content type="html" xml:base="https://blog.rust-lang.org/inside-rust/2021/11/15/libs-contributors-the8472-kodraus.html">&lt;p&gt;Please welcome The 8472 and Ashley Mannix to the
&lt;a href&#x3D;&quot;https://www.rust-lang.org/governance/teams/library#libs-contributors&quot;&gt;Library Contributors&lt;/a&gt; group!&lt;/p&gt;
&lt;p&gt;&lt;a href&#x3D;&quot;https://github.com/the8472&quot;&gt;The 8472&lt;/a&gt; has been working on
&lt;a href&#x3D;&quot;https://github.com/rust-lang/rust/pull/70793&quot;&gt;various&lt;/a&gt;
&lt;a href&#x3D;&quot;https://github.com/rust-lang/rust/pull/75272&quot;&gt;specializations&lt;/a&gt;
&lt;a href&#x3D;&quot;https://github.com/rust-lang/rust/pull/78641&quot;&gt;in the&lt;/a&gt;
&lt;a href&#x3D;&quot;https://github.com/rust-lang/rust/pull/83245&quot;&gt;standard library&lt;/a&gt;,
and has been involved in many library-related changes and discussions.&lt;/p&gt;
&lt;p&gt;&lt;a href&#x3D;&quot;https://github.com/KodrAus/&quot;&gt;Ashley Mannix&lt;/a&gt; maintains
&lt;a href&#x3D;&quot;https://crates.io/users/KodrAus?sort&#x3D;downloads&quot;&gt;several popular Rust crates&lt;/a&gt;
and used to be a part of the Library (API) Team.
Ashley is now getting back into Rust open source work,
and will be helping out with maintenance of the standard library
and some official &lt;code&gt;rust-lang&lt;/code&gt; crates such as &lt;a href&#x3D;&quot;https://crates.io/crates/log&quot;&gt;&lt;code&gt;log&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Congratulations The 8472 and Ashley, and thanks for everything you do!&lt;/p&gt;
</content>

        <author>
            <name>Mara Bos</name>
        </author>
    </entry>
    
    <entry>
        <title>1.56.0 pre-release testing</title>
        <link rel="alternate" href="https://blog.rust-lang.org/inside-rust/2021/10/18/1.56.0-prerelease.html" type="text/html" title="1.56.0 pre-release testing" />
        <published>2021-10-18T00:00:00+00:00</published>
        <updated>2021-10-18T00:00:00+00:00</updated>
        <id>https://blog.rust-lang.org/inside-rust/2021/10/18/1.56.0-prerelease.html</id>
        <content type="html" xml:base="https://blog.rust-lang.org/inside-rust/2021/10/18/1.56.0-prerelease.html">&lt;p&gt;The 1.56.0 pre-release is ready for testing. The release is scheduled for this
Thursday, October 21st. &lt;a href&#x3D;&quot;https://github.com/rust-lang/rust/blob/master/RELEASES.md#version-1560-2021-10-21&quot;&gt;Release notes can be found here.&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;You can try it out locally by running:&lt;/p&gt;
&lt;pre&gt;&lt;code class&#x3D;&quot;language-plain&quot;&gt;RUSTUP_DIST_SERVER&#x3D;https://dev-static.rust-lang.org rustup update stable
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The index is &lt;a href&#x3D;&quot;https://dev-static.rust-lang.org/dist/2021-10-18/index.html&quot;&gt;https://dev-static.rust-lang.org/dist/2021-10-18/index.html&lt;/a&gt;. You
can leave feedback on the &lt;a href&#x3D;&quot;https://internals.rust-lang.org/t/rust-1-56-0-pre-release-testing/15459&quot;&gt;internals thread&lt;/a&gt;.&lt;/p&gt;
</content>

        <author>
            <name>Pietro Albini</name>
        </author>
    </entry>
    
    <entry>
        <title>Lang team October update</title>
        <link rel="alternate" href="https://blog.rust-lang.org/inside-rust/2021/10/08/Lang-team-Oct-update.html" type="text/html" title="Lang team October update" />
        <published>2021-10-08T00:00:00+00:00</published>
        <updated>2021-10-08T00:00:00+00:00</updated>
        <id>https://blog.rust-lang.org/inside-rust/2021/10/08/Lang-team-Oct-update.html</id>
        <content type="html" xml:base="https://blog.rust-lang.org/inside-rust/2021/10/08/Lang-team-Oct-update.html">&lt;p&gt;This week the lang team held its October planning meeting (&lt;a href&#x3D;&quot;https://github.com/rust-lang/lang-team/blob/master/design-meeting-minutes/2021-10-06-Planning-meeting.md&quot;&gt;minutes&lt;/a&gt;). We hold these meetings on the first Wednesday of every month.&lt;/p&gt;
&lt;p&gt;The planning meeting is used for:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Checking in on the status of our &lt;a href&#x3D;&quot;https://lang-team.rust-lang.org/initiatives.html&quot;&gt;active initiatives&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Planning the design meetings for the remainder of the month&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;After each meeting, we post an update (like this one!) with notes and meeting announcements.&lt;/p&gt;
&lt;h2&gt;&lt;a href&#x3D;&quot;#update-from-active-initiatives&quot; aria-hidden&#x3D;&quot;true&quot; class&#x3D;&quot;anchor&quot; id&#x3D;&quot;update-from-active-initiatives&quot;&gt;&lt;/a&gt;Update from active initiatives&lt;/h2&gt;
&lt;p&gt;What follows are the updates that were submitted this month. Note that many of the more recent initiatives have dedicated repositories which contain other byproducts of the design process (e.g., evaluation documents, open design questions, etc). Take a look!&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://rust-lang.github.io/async-fundamentals-initiative/updates/2021-oct.html&quot;&gt;Async fundamentals update&lt;/a&gt;:
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;What is it?&lt;/strong&gt; Async fn in traits, async drop, async closures&lt;/li&gt;
&lt;li&gt;Have designated an &lt;a href&#x3D;&quot;https://rust-lang.github.io/async-fundamentals-initiative/roadmap/mvp.html&quot;&gt;MVP&lt;/a&gt; version of async functions in traits that we intend to stabilize first, and done a lot of exploration on next steps (read up on that in the ever evolving &lt;a href&#x3D;&quot;https://rust-lang.github.io/async-fundamentals-initiative/evaluation.html&quot;&gt;evaluation doc&lt;/a&gt;).&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://rust-lang.github.io/impl-trait-initiative/updates/2021-oct.html&quot;&gt;Impl trait initiative update&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;What is it?&lt;/strong&gt; &lt;code&gt;type Foo &#x3D; impl Trait&lt;/code&gt; at the module and impl level.&lt;/li&gt;
&lt;li&gt;oli-obk has completed a rewrite of the inference engine to better match the design proposed the RFC, and it is slowly being merged in&lt;/li&gt;
&lt;li&gt;We are working on explainer plus stabilization doc to &amp;quot;Type alias impl trait&amp;quot;.&lt;/li&gt;
&lt;li&gt;We would like to add syntax to give names for function types, which unblocks &amp;quot;impl trait in traits&amp;quot;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://rust-lang.github.io/dyn-upcasting-coercion-initiative/updates/2021-oct.html&quot;&gt;Dyn upcasting initiative update&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;What is it?&lt;/strong&gt; Ability to cast &lt;code&gt;dyn Foo&lt;/code&gt; to &lt;code&gt;dyn Bar&lt;/code&gt; if &lt;code&gt;trait Foo: Bar&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Made good progress, need to resolve a soundness question and then ready to merge.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://rust-lang.github.io/generic-associated-types-initiative/updates/2021-oct.html&quot;&gt;Generic associated type initiative update&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;What is it?&lt;/strong&gt; Ability to have associated types with generic parameters, such as &lt;code&gt;type Foo&amp;lt;&#x27;me&amp;gt;&lt;/code&gt;, in traits.&lt;/li&gt;
&lt;li&gt;Resolved the question of where clause defaults by deciding on a conservative, if not maximally ergonomic, path.&lt;/li&gt;
&lt;li&gt;Making continued progress towards something we can stabilize. The intent is to start with some known ergonomic shortcomings and build from there.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://github.com/rust-lang/rust/issues/87335#issuecomment-933672440&quot;&gt;Let else update&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;What is it?&lt;/strong&gt; Generalization of &lt;code&gt;let&lt;/code&gt; to permit you to match against something and panic, return, etc when match fails:
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;let Ok(x) &#x3D; something else panic!()&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Implementation available on nightly, may be feature complete&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://github.com/rust-lang/lang-team/issues/88#issuecomment-935056996&quot;&gt;Deref patterns update&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;What is it?&lt;/strong&gt; Applying Deref impls in the context of a match, such as &lt;code&gt;match rc { Some(x) &#x3D;&amp;gt; ..., None &#x3D;&amp;gt; ... }&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Decided to build prototype that does not have any explicit syntax for deref and works against &amp;quot;known safe&amp;quot; std types.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://github.com/rust-lang/lang-team/issues/60#issuecomment-935233842&quot;&gt;Never type stabilization update&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;What is it?&lt;/strong&gt; The never type &lt;code&gt;!&lt;/code&gt;&lt;sup class&#x3D;&quot;footnote-ref&quot;&gt;&lt;a href&#x3D;&quot;#fn1&quot; id&#x3D;&quot;fnref1&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/li&gt;
&lt;li&gt;We have landed an improved, if complex, analysis that allows us to choose between the current behavior (fallback to &lt;code&gt;()&lt;/code&gt;) and the new behavior (fallback to &lt;code&gt;!&lt;/code&gt;) without breaking important existing code. The hope is to proceed with stabilization and slowly improve and simplify the rules using warnings, editions, or other tools.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In addition to the reports above, you&#x27;ll find more detailed discussing in the &lt;a href&#x3D;&quot;https://github.com/rust-lang/lang-team/blob/master/design-meeting-minutes/2021-10-06-Planning-meeting.md&quot;&gt;minutes&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;&lt;a href&#x3D;&quot;#upcoming-design-meetings&quot; aria-hidden&#x3D;&quot;true&quot; class&#x3D;&quot;anchor&quot; id&#x3D;&quot;upcoming-design-meetings&quot;&gt;&lt;/a&gt;Upcoming design meetings&lt;/h2&gt;
&lt;p&gt;We have planned the following design meetings:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;October 13: Syntax for where clauses in GATs and type aliases (&lt;a href&#x3D;&quot;https://github.com/rust-lang/lang-team/issues/120&quot;&gt;lang-team#120&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;October 20: Safety considerations for dyn upcasting (&lt;a href&#x3D;&quot;https://github.com/rust-lang/lang-team/issues/119&quot;&gt;lang-team#119&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;October 27: Forbidding unwinding from drop impls (&lt;a href&#x3D;&quot;https://github.com/rust-lang/lang-team/issues/97&quot;&gt;lang-team#97&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href&#x3D;&quot;#design-meeting-expectations&quot; aria-hidden&#x3D;&quot;true&quot; class&#x3D;&quot;anchor&quot; id&#x3D;&quot;design-meeting-expectations&quot;&gt;&lt;/a&gt;Design meeting expectations&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;The document for the meeting must be prepared by the triage meeting on Tuesday and posted to the tracking issue.
&lt;ul&gt;
&lt;li&gt;If it is not sent out by then, the meeting will be canceled. This gives folks 24 hour notice.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;There is no expectation that people will read the document before the meeting. The meeting will begin with a recap of the document.
&lt;ul&gt;
&lt;li&gt;However, there is no rule &lt;strong&gt;against&lt;/strong&gt; reading the document beforehand and providing feedback or advice on how to improve it.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;section class&#x3D;&quot;footnotes&quot;&gt;
&lt;ol&gt;
&lt;li id&#x3D;&quot;fn1&quot;&gt;
&lt;p&gt;The never type is called never because it will &lt;em&gt;never&lt;/em&gt; be stabilized. Ha! I kill me. --nikomatsakis &lt;a href&#x3D;&quot;#fnref1&quot; class&#x3D;&quot;footnote-backref&quot;&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</content>

        <author>
            <name>Niko Matsakis</name>
        </author>
    </entry>
    
    <entry>
        <title>1.55.0 pre-release testing</title>
        <link rel="alternate" href="https://blog.rust-lang.org/inside-rust/2021/09/07/1.55.0-prerelease.html" type="text/html" title="1.55.0 pre-release testing" />
        <published>2021-09-07T00:00:00+00:00</published>
        <updated>2021-09-07T00:00:00+00:00</updated>
        <id>https://blog.rust-lang.org/inside-rust/2021/09/07/1.55.0-prerelease.html</id>
        <content type="html" xml:base="https://blog.rust-lang.org/inside-rust/2021/09/07/1.55.0-prerelease.html">&lt;p&gt;The 1.55.0 pre-release is ready for testing. The release is scheduled for this
Thursday, September 9th. &lt;a href&#x3D;&quot;https://github.com/rust-lang/rust/blob/stable/RELEASES.md#version-1550-2021-09-09&quot;&gt;Release notes can be found here.&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;You can try it out locally by running:&lt;/p&gt;
&lt;pre&gt;&lt;code class&#x3D;&quot;language-plain&quot;&gt;RUSTUP_DIST_SERVER&#x3D;https://dev-static.rust-lang.org rustup update stable
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The index is &lt;a href&#x3D;&quot;https://dev-static.rust-lang.org/dist/2021-09-06/index.html&quot;&gt;https://dev-static.rust-lang.org/dist/2021-09-06/index.html&lt;/a&gt;. You
can leave feedback on the &lt;a href&#x3D;&quot;https://internals.rust-lang.org/t/rust-1-55-0-pre-release-testing/15292&quot;&gt;internals thread&lt;/a&gt;.&lt;/p&gt;
</content>

        <author>
            <name>Mark Rousskov</name>
        </author>
    </entry>
    
    <entry>
        <title>Splitting the const generics features</title>
        <link rel="alternate" href="https://blog.rust-lang.org/inside-rust/2021/09/06/Splitting-const-generics.html" type="text/html" title="Splitting the const generics features" />
        <published>2021-09-06T00:00:00+00:00</published>
        <updated>2021-09-06T00:00:00+00:00</updated>
        <id>https://blog.rust-lang.org/inside-rust/2021/09/06/Splitting-const-generics.html</id>
        <content type="html" xml:base="https://blog.rust-lang.org/inside-rust/2021/09/06/Splitting-const-generics.html">&lt;p&gt;After the stabilization of the const generics MVP in version 1.51, the const generics project group has continued to
work on const generics. Large parts of this work were gated behind the feature gates &lt;code&gt;const_generics&lt;/code&gt; and &lt;code&gt;const_evaluatable_checked&lt;/code&gt;. As time went on, the
&lt;code&gt;const_generics&lt;/code&gt; feature became fairly useless on its own while the name of
&lt;code&gt;const_evaluatable_checked&lt;/code&gt; didn&#x27;t really capture what this feature was intended to do.&lt;/p&gt;
&lt;p&gt;To improve this, we have recently removed the features &lt;code&gt;const_generics&lt;/code&gt;, &lt;code&gt;lazy_normalization_consts&lt;/code&gt;, and &lt;code&gt;const_evaluatable_checked&lt;/code&gt;. They have been replaced by &lt;code&gt;feature(adt_const_params)&lt;/code&gt; and &lt;code&gt;feature(generic_const_exprs)&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;As there is a lot going on with const generics, here&#x27;s a quick overview of the new - and preexisting - features and how much still needs to be done for them to get stabilized:&lt;/p&gt;
&lt;h3&gt;&lt;a href&#x3D;&quot;#featureadt_const_params&quot; aria-hidden&#x3D;&quot;true&quot; class&#x3D;&quot;anchor&quot; id&#x3D;&quot;featureadt_const_params&quot;&gt;&lt;/a&gt;&lt;code&gt;feature(adt_const_params)&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;On stable, only integers, &lt;code&gt;char&lt;/code&gt; and &lt;code&gt;bool&lt;/code&gt; are allowed as the types of const parameters. This feature allows additional types, such as &lt;code&gt;&amp;amp;&#x27;static str&lt;/code&gt; and user defined types.&lt;/p&gt;
&lt;pre&gt;&lt;code class&#x3D;&quot;language-rust&quot;&gt;#![feature(adt_const_params)]

#[derive(PartialEq, Eq)]
enum ImageFormat {
    Rgb8,
    Rgba8,
    // ...c
}

struct Image&amp;lt;const FORMAT: ImageFormat&amp;gt; {
    // ...
}

impl Image&amp;lt;{ ImageFormat::Rgba }&amp;gt; {
    fn alpha(&amp;amp;self, pixel: PixelLocation) -&amp;gt; u8 {
        // ...
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Note that even with this feature, generic const parameter types, such as &lt;code&gt;struct Foo&amp;lt;T, const N: T&amp;gt; { ... }&lt;/code&gt;, are forbidden.
While allowing such things is desired, it adds additional complications exceeding our current capacity.&lt;/p&gt;
&lt;p&gt;There are still two major blockers for stabilization:&lt;/p&gt;
&lt;p&gt;The first being the &lt;a href&#x3D;&quot;https://github.com/rust-lang/rust/pull/83234&quot;&gt;transition to valtrees&lt;/a&gt;. Valtrees are a representation of values as trees with integer nodes, simplifiying the way we interact with more complex types.&lt;/p&gt;
&lt;p&gt;Additionally, we have to figure out which types we &lt;em&gt;even want&lt;/em&gt; to allow as const parameter types. This ties into the discussion
about &lt;a href&#x3D;&quot;https://github.com/rust-lang/rust/issues/74446&quot;&gt;&amp;quot;structural match&amp;quot;&lt;/a&gt;, which is still ongoing.&lt;/p&gt;
&lt;p&gt;While the issues mentioned above are definitely not trivial, it is definitely possible for this to be ready for stabilization in a few months.&lt;/p&gt;
&lt;h3&gt;&lt;a href&#x3D;&quot;#featuregeneric_const_exprs&quot; aria-hidden&#x3D;&quot;true&quot; class&#x3D;&quot;anchor&quot; id&#x3D;&quot;featuregeneric_const_exprs&quot;&gt;&lt;/a&gt;&lt;code&gt;feature(generic_const_exprs)&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Without any unstable features, const arguments must either be a fully concrete expression or a generic parameter by itself, so constants like &lt;code&gt;N + 1&lt;/code&gt; are forbidden. With this feature, expressions using generic parameters are possible.&lt;/p&gt;
&lt;pre&gt;&lt;code class&#x3D;&quot;language-rust&quot;&gt;#![feature(generic_const_exprs)]

fn split_first&amp;lt;T, const N: usize&amp;gt;(arr: [T; N]) -&amp;gt; (T, [T; N - 1]) {
    // ...
}

struct BitSet&amp;lt;const SIZE: usize&amp;gt;
where
    [u8; (SIZE + 7) / 8]: Sized,
{
    storage: [u8; (SIZE + 7) / 8],
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We currently require the user to add bounds asserting that generic constants evaluate successfully. For all constants visible in the API of an item, these bounds are added implicitly.&lt;/p&gt;
&lt;p&gt;If the constant expression &lt;code&gt;expr&lt;/code&gt; of type &lt;code&gt;Foo&lt;/code&gt; would otherwise not be used in the &lt;code&gt;where&lt;/code&gt;-clauses or function signature, we add an otherwise irrelevant bound mentioning &lt;code&gt;expr&lt;/code&gt; to the &lt;code&gt;where&lt;/code&gt;-clauses of our item. For this one can define a &lt;code&gt;struct Evaluatable&amp;lt;const N: Foo&amp;gt;;&lt;/code&gt; and use &lt;code&gt;Evaluatable&amp;lt;{ expr }&amp;gt;:&lt;/code&gt; as a bound. If &lt;code&gt;expr&lt;/code&gt; is of type &lt;code&gt;usize&lt;/code&gt; we tend to use &lt;code&gt;[u8; expr]:&lt;/code&gt;
or &lt;code&gt;[u8; expr]: Sized&lt;/code&gt; for this. While it is highly likely that we will add a dedicated syntax for these bounds in the future, we are waiting with this until the rest of this feature is more mature.&lt;/p&gt;
&lt;p&gt;This feature is still far from being stable and has some &lt;a href&#x3D;&quot;https://github.com/rust-lang/project-const-generics/blob/master/design-docs/anon-const-substs.md&quot;&gt;&lt;strong&gt;major&lt;/strong&gt; unsolved issues&lt;/a&gt;. Especially for constants inside of &lt;code&gt;where&lt;/code&gt;-bounds there are a lot of subtle bugs and backwards incompatibilities we have to fix before we can even think about how to stabilize this.&lt;/p&gt;
&lt;h3&gt;&lt;a href&#x3D;&quot;#featureconst_generics_defaults&quot; aria-hidden&#x3D;&quot;true&quot; class&#x3D;&quot;anchor&quot; id&#x3D;&quot;featureconst_generics_defaults&quot;&gt;&lt;/a&gt;&lt;code&gt;feature(const_generics_defaults)&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Similar to type parameter defaults, this feature adds the ability to declare default values for const parameters.&lt;/p&gt;
&lt;pre&gt;&lt;code class&#x3D;&quot;language-rust&quot;&gt;#![feature(const_generics_defaults)]

struct ArrayStorage&amp;lt;T, const N: usize &#x3D; 2&amp;gt; {
    arr: [T; N],
}

impl&amp;lt;T&amp;gt; ArrayStorage&amp;lt;T&amp;gt; {
    fn new(a: T, b: T) -&amp;gt; ArrayStorage&amp;lt;T&amp;gt; {
        ArrayStorage {
            arr: [a, b],
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To allow type parameter defaults in the same listing as const parameters we also intend to remove the ordering restriction for
type and const parameters, allowing &lt;code&gt;struct Foo&amp;lt;const N: usize, T &#x3D; [u32; N]&amp;gt; { ... }&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;This feature is pretty much ready for stabilization and is currently blocked on figuring out any potential edge cases for the
stabilization report.&lt;/p&gt;
&lt;h3&gt;&lt;a href&#x3D;&quot;#featuregeneric_arg_infer&quot; aria-hidden&#x3D;&quot;true&quot; class&#x3D;&quot;anchor&quot; id&#x3D;&quot;featuregeneric_arg_infer&quot;&gt;&lt;/a&gt;&lt;code&gt;feature(generic_arg_infer)&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;While it is already possible to use a wildcard &lt;code&gt;_&lt;/code&gt; for type arguments inside of bodies, this is not the case for const arguments.
This feature adds this capability for constants.&lt;/p&gt;
&lt;pre&gt;&lt;code class&#x3D;&quot;language-rust&quot;&gt;#![feature(generic_arg_infer)]
fn array_from&amp;lt;T, U, const N: usize&amp;gt;(arr: [T; N]) -&amp;gt; [U; N]
where
    U: From&amp;lt;T&amp;gt;,
{
    arr.map(From::from)
}

fn main() {
    let x &#x3D; [&amp;quot;this&amp;quot;, &amp;quot;is&amp;quot;, &amp;quot;a&amp;quot;, &amp;quot;six&amp;quot;, &amp;quot;element&amp;quot;, &amp;quot;array&amp;quot;];
    // using &#x60;_&#x60; for the parameter &#x60;N&#x60; lets
    // the compiler infer the correct value
    let _y &#x3D; array_from::&amp;lt;_, String, _&amp;gt;(x);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This feature is not yet ready for stabilization, though there aren&#x27;t any known big blockers here.
To confidently stabilize this we are probably in need of some large refactorings though, as the current setup
feels fairly fragile in some areas.&lt;/p&gt;
</content>

        <author>
            <name>lcnr</name>
        </author>
    </entry>
    
    <entry>
        <title>Lang team August update</title>
        <link rel="alternate" href="https://blog.rust-lang.org/inside-rust/2021/08/04/lang-team-aug-update.html" type="text/html" title="Lang team August update" />
        <published>2021-08-04T00:00:00+00:00</published>
        <updated>2021-08-04T00:00:00+00:00</updated>
        <id>https://blog.rust-lang.org/inside-rust/2021/08/04/lang-team-aug-update.html</id>
        <content type="html" xml:base="https://blog.rust-lang.org/inside-rust/2021/08/04/lang-team-aug-update.html">&lt;p&gt;This week the lang team held its August planning meeting. We normally hold
these meetings on the first Wednesday of every month.&lt;/p&gt;
&lt;p&gt;We had a short meeting this month, just planning and scheduling the design
meetings for the remainder of the month.&lt;/p&gt;
&lt;p&gt;After each meeting, we post an update (like this one!) with notes and meeting announcements.&lt;/p&gt;
&lt;h2&gt;&lt;a href&#x3D;&quot;#upcoming-design-meetings&quot; aria-hidden&#x3D;&quot;true&quot; class&#x3D;&quot;anchor&quot; id&#x3D;&quot;upcoming-design-meetings&quot;&gt;&lt;/a&gt;Upcoming design meetings&lt;/h2&gt;
&lt;p&gt;We planned two design meetings for August. Our meetings are open for anyone to join and observe. Ping nikomatsakis or joshtriplett for info about attending.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;2021-08-11: No meeting this week&lt;/li&gt;
&lt;li&gt;2021-08-18: &lt;a href&#x3D;&quot;https://github.com/rust-lang/lang-team/issues/94&quot;&gt;Structural equality&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;2021-08-25: &lt;a href&#x3D;&quot;https://github.com/rust-lang/lang-team/issues/111&quot;&gt;Non-terminal divergence between parser and macro matcher&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href&#x3D;&quot;#design-meeting-expectations&quot; aria-hidden&#x3D;&quot;true&quot; class&#x3D;&quot;anchor&quot; id&#x3D;&quot;design-meeting-expectations&quot;&gt;&lt;/a&gt;Design meeting expectations&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;The document for the meeting must be prepared by the triage meeting on Tuesday and posted to the tracking issue.
&lt;ul&gt;
&lt;li&gt;If it is not sent out by then, the meeting will be canceled. This gives folks 24-hour notice.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;There is no expectation that people will read the document before the meeting. The meeting will begin with a recap of the document.
&lt;ul&gt;
&lt;li&gt;However, there is no rule &lt;strong&gt;against&lt;/strong&gt; reading the document beforehand and providing feedback or advice on how to improve it.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
</content>

        <author>
            <name>Josh Triplett</name>
        </author>
    </entry>
    
    <entry>
        <title>Rust Compiler August Steering Cycle</title>
        <link rel="alternate" href="https://blog.rust-lang.org/inside-rust/2021/07/30/compiler-team-august-steering-cycle.html" type="text/html" title="Rust Compiler August Steering Cycle" />
        <published>2021-07-30T00:00:00+00:00</published>
        <updated>2021-07-30T00:00:00+00:00</updated>
        <id>https://blog.rust-lang.org/inside-rust/2021/07/30/compiler-team-august-steering-cycle.html</id>
        <content type="html" xml:base="https://blog.rust-lang.org/inside-rust/2021/07/30/compiler-team-august-steering-cycle.html">&lt;p&gt;n &lt;a href&#x3D;&quot;https://zulip-archive.rust-lang.org/238009tcompilermeetings/86722planningmeeting20210730.html&quot;&gt;Friday, July 30th&lt;/a&gt;, the Rust Compiler team had a planning meeting for the August steering cycle.&lt;/p&gt;
&lt;p&gt;Every fourth Friday, the Rust compiler team decides how
it is going to use its scheduled steering and design meeting time over the next
three Fridays.&lt;/p&gt;
&lt;p&gt;On &lt;a href&#x3D;&quot;https://github.com/rust-lang/compiler-team/issues/446&quot;&gt;Friday, 20 August&lt;/a&gt;, we will be having a meeting to
discuss how to increase the number of reviewers available to handle the review queue load.&lt;/p&gt;
&lt;p&gt;Each meeting will run from 2pm to 3pm GMT, and will take place on the
&lt;a href&#x3D;&quot;https://rust-lang.zulipchat.com/#narrow/stream/238009-t-compiler.2Fmeetings&quot;&gt;T-compiler/meetings zulip stream&lt;/a&gt;.&lt;/p&gt;
</content>

        <author>
            <name>Felix Klock</name>
        </author>
    </entry>
    
</feed>

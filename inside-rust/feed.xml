<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
    <generator uri="https://blog.rust-lang.org/inside-rust/" version="0.1.0">Inside Rust Blog</generator>
    <link href="https://blog.rust-lang.org/inside-rust/feed.xml" rel="self" type="application/atom+xml" />
    <link href="https://blog.rust-lang.org/inside-rust/" rel="alternate" type="text/html" />
    <id>https://blog.rust-lang.org/inside-rust/</id>
    <title>Inside Rust Blog</title>
    <subtitle>Want to follow along with Rust development? Curious how you might get involved? Take a look!</subtitle>
    <author>
        <name>Maintained by the Rust Teams.</name>
        <uri>https://github.com/rust-lang/blog.rust-lang.org/</uri>
    </author>
    <updated>2022-02-15T16:56:59+00:00</updated>

    
    <entry>
        <title>CTCFT 2022-02-21 Agenda</title>
        <link rel="alternate" href="https://blog.rust-lang.org/inside-rust/2022/02/11/CTCFT-february.html" type="text/html" title="CTCFT 2022-02-21 Agenda" />
        <published>2022-02-11T00:00:00+00:00</published>
        <updated>2022-02-11T00:00:00+00:00</updated>
        <id>https://blog.rust-lang.org/inside-rust/2022/02/11/CTCFT-february.html</id>
        <content type="html" xml:base="https://blog.rust-lang.org/inside-rust/2022/02/11/CTCFT-february.html">&lt;p&gt;The next &lt;a href&#x3D;&quot;https://rust-lang.github.io/ctcft/&quot;&gt;&amp;quot;Cross Team Collaboration Fun Times&amp;quot; (CTCFT)&lt;/a&gt; meeting will take
place on Monday, 2022-02-21 at &lt;strong&gt;3pm US Eastern Time&lt;/strong&gt; (&lt;a href&#x3D;&quot;https://everytimezone.com/s/820f8d47&quot;&gt;click to see in your
time zone&lt;/a&gt;). Youâ€™ll find the full details (along with a calendar
event, zoom details, etc) &lt;a href&#x3D;&quot;https://rust-lang.github.io/ctcft/meetings/2022-02-21.html&quot;&gt;on the CTCFT website&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;&lt;a href&#x3D;&quot;#agenda&quot; aria-hidden&#x3D;&quot;true&quot; class&#x3D;&quot;anchor&quot; id&#x3D;&quot;agenda&quot;&gt;&lt;/a&gt;Agenda&lt;/h2&gt;
&lt;p&gt;For this month&#x27;s CTCFT meeting, the theme is &amp;quot;planning for 2022&amp;quot;. We&#x27;ll hear
about the results of the 2021 Rust survey, and updates happening in the Async
Working Group and the Compiler Team.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;(5 min) Opening remarks ðŸ‘‹ (&lt;a href&#x3D;&quot;https://github.com/angelonfira&quot;&gt;angelonfira&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;(20 min) Rust 2021 Survey Results (&lt;a href&#x3D;&quot;https://github.com/nrc&quot;&gt;nrc&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;(20 min) Compiler team ambitions (&lt;a href&#x3D;&quot;https://github.com/pnkfelix&quot;&gt;pnkfelix&lt;/a&gt;, &lt;a href&#x3D;&quot;https://github.com/wesleywiser&quot;&gt;wesleywiser&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;(5 min) Closing (&lt;a href&#x3D;&quot;https://github.com/angelonfira&quot;&gt;angelonfira&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href&#x3D;&quot;#afterwards-social-hour&quot; aria-hidden&#x3D;&quot;true&quot; class&#x3D;&quot;anchor&quot; id&#x3D;&quot;afterwards-social-hour&quot;&gt;&lt;/a&gt;Afterwards: Social Hour&lt;/h2&gt;
&lt;p&gt;Like always, we&#x27;ll be running a social hour after the CTCFT. The idea is really
simple: for the hour after the meeting, we will create breakout rooms in Zoom
with different themes. You can join any breakout room you like and hangout.&lt;/p&gt;
</content>

        <author>
            <name>Rust CTCFT Team</name>
        </author>
    </entry>
    
    <entry>
        <title>Async Rust in 2022</title>
        <link rel="alternate" href="https://blog.rust-lang.org/inside-rust/2022/02/03/async-in-2022.html" type="text/html" title="Async Rust in 2022" />
        <published>2022-02-03T00:00:00+00:00</published>
        <updated>2022-02-03T00:00:00+00:00</updated>
        <id>https://blog.rust-lang.org/inside-rust/2022/02/03/async-in-2022.html</id>
        <content type="html" xml:base="https://blog.rust-lang.org/inside-rust/2022/02/03/async-in-2022.html">&lt;p&gt;Almost a year ago, the Async Working Group&lt;sup class&#x3D;&quot;footnote-ref&quot;&gt;&lt;a href&#x3D;&quot;#fn1&quot; id&#x3D;&quot;fnref1&quot;&gt;1&lt;/a&gt;&lt;/sup&gt; &lt;a href&#x3D;&quot;https://blog.rust-lang.org/2021/03/18/async-vision-doc.html&quot;&gt;embarked on a collaborative effort&lt;/a&gt; to write a &lt;a href&#x3D;&quot;https://rust-lang.github.io/wg-async/vision.html&quot;&gt;shared async vision document&lt;/a&gt;. As we enter 2022, we wanted to give an update on the results from that process along with the progress we are making towards realizing that vision.&lt;/p&gt;
&lt;h2&gt;&lt;a href&#x3D;&quot;#writing-an-async-issue-aggregator-in-rust-2024&quot; aria-hidden&#x3D;&quot;true&quot; class&#x3D;&quot;anchor&quot; id&#x3D;&quot;writing-an-async-issue-aggregator-in-rust-2024&quot;&gt;&lt;/a&gt;Writing an async issue aggregator in Rust 2024&lt;/h2&gt;
&lt;p&gt;To set the scene, imagine it&#x27;s Rust 2024, and you&#x27;ve decided to build your first project in Rust. You&#x27;re working on a project that uses GitHub and you&#x27;d like a tool that will walk over all the issues on your repository and do some automatic triage. You decide to use async Rust for this. You pull out the Rust book and thumb over to the Async I/O section. In there, it shows you the basic structure of an async Rust application. Like any Rust program, it begins with &lt;code&gt;main&lt;/code&gt;, but this time with an &lt;code&gt;async fn&lt;/code&gt;...&lt;/p&gt;
&lt;pre&gt;&lt;code class&#x3D;&quot;language-rust&quot;&gt;async fn main() {
    ...
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Thumbing over to crates.io, you search for &amp;quot;github&amp;quot; and find that there is a nifty crate &lt;code&gt;crabbycat&lt;/code&gt; for navigating github issues. You import it and sit down to work. The first thing you need to do is to to iterate over all the issues:&lt;/p&gt;
&lt;pre&gt;&lt;code class&#x3D;&quot;language-rust&quot;&gt;async fn main() {
    for await? issue in crabbycat::issues(&amp;quot;https://github.com/rust-lang/rust&amp;quot;) {
        if meets_criteria(&amp;amp;issue) {
            println!(&amp;quot;{issue:?}&amp;quot;);
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Your crate seems to be working well and you happily tweet about it. Soon enough you find yourself with some users and one of them opens a PR to extend it to to support GitLab. To do this, they introduce a trait that allows you to write code that is generic over the issue provider. This trait has one method, &lt;code&gt;issues&lt;/code&gt; which returns an iterator (in this case, an async iterator):&lt;/p&gt;
&lt;pre&gt;&lt;code class&#x3D;&quot;language-rust&quot;&gt;trait IssueProvider {
    async fn issues(&amp;amp;mut self, url: &amp;amp;str)
        -&amp;gt; impl AsyncIterator&amp;lt;Item &#x3D; Result&amp;lt;Issue, Err&amp;gt;&amp;gt;;
}

#[derive(Debug)]
struct Issue {
    number: usize,
    header: String,
    assignee: String,
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now they are able to refactor the main loop into a function that is generic over the &lt;code&gt;IssueProvider&lt;/code&gt;. They decide to use a &lt;code&gt;dyn&lt;/code&gt; trait to avoid monomorphizing many times.&lt;/p&gt;
&lt;pre&gt;&lt;code class&#x3D;&quot;language-rust&quot;&gt;fn process_issues(provider: &amp;amp;mut dyn IssueProvider) {
    for await? issue in provider.issues(&amp;quot;https://github.com/rust-lang/rust&amp;quot;) {
        if meets_criteria(&amp;amp;issue) {
            println!(&amp;quot;{issue:?}&amp;quot;);
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You happily hit merge on the PR and everything works great. Later on, somebody wants to port your system to run on the Chartreuse operating system. Chartreuse is based on an actor model and uses its own custom async runtime -- but luckily for you, you don&#x27;t care. All your code is seamlessly able to switch the underlying runtime implementation over to the Chartreuse async runtime.&lt;/p&gt;
&lt;h2&gt;&lt;a href&#x3D;&quot;#meanwhile-in-2022&quot; aria-hidden&#x3D;&quot;true&quot; class&#x3D;&quot;anchor&quot; id&#x3D;&quot;meanwhile-in-2022&quot;&gt;&lt;/a&gt;Meanwhile, in 2022...&lt;/h2&gt;
&lt;p&gt;Of course, the year is still 2022, and the vision we just painted is not reality -- at least not yet. There is a lot of work to do yet in terms of RFCing and implementing the features that will let us write the code we talked about:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Writing the &lt;code&gt;IssueProvider&lt;/code&gt; trait requires async fns in traits.&lt;/li&gt;
&lt;li&gt;Taking an &lt;code&gt;&amp;amp;mut dyn IssueProvider&lt;/code&gt; argument requires supporting dynamic dispatch in traits that have async functions
&lt;ul&gt;
&lt;li&gt;and returning &lt;code&gt;impl AsyncIterator&lt;/code&gt;!&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;The code used a &lt;code&gt;for await?&lt;/code&gt; loop, which permitted easy iteration over iterators in async code.&lt;/li&gt;
&lt;li&gt;The trait for async iteration in the standard library (&lt;code&gt;Stream&lt;/code&gt;) has a different name and is not stabilized; its definition is likely to change, too, once we have strong support for async fns in traits.&lt;/li&gt;
&lt;li&gt;Writing &lt;code&gt;async fn main&lt;/code&gt; and changing to an alternate runtime requires portability across runtimes.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;As this work proceeds we can expect plenty of changes in the details along the way, and we might decide some pieces aren&#x27;t worth it; if nothing else, the syntax for generators is a hotly contested topic. &lt;strong&gt;What won&#x27;t change is the the overall vision:&lt;/strong&gt; that writing async Rust code should be as easy as writing sync code, apart from the occasional &lt;code&gt;async&lt;/code&gt; and &lt;code&gt;await&lt;/code&gt; keyword.&lt;/p&gt;
&lt;h2&gt;&lt;a href&#x3D;&quot;#how-we-get-there&quot; aria-hidden&#x3D;&quot;true&quot; class&#x3D;&quot;anchor&quot; id&#x3D;&quot;how-we-get-there&quot;&gt;&lt;/a&gt;How we get there&lt;/h2&gt;
&lt;p&gt;We&#x27;ve organized the Async working group into a number of distinct initiatives, each of which is pursuing one part of the vision. What follows is a list of the currently active groups and some of the things they&#x27;ve done over the last few months since they got up and running.&lt;/p&gt;
&lt;h3&gt;&lt;a href&#x3D;&quot;#async-fundamentals-initiative&quot; aria-hidden&#x3D;&quot;true&quot; class&#x3D;&quot;anchor&quot; id&#x3D;&quot;async-fundamentals-initiative&quot;&gt;&lt;/a&gt;&lt;a href&#x3D;&quot;https://rust-lang.github.io/async-fundamentals-initiative/&quot;&gt;Async fundamentals&lt;/a&gt; initiative&lt;/h3&gt;
&lt;p&gt;Led by &lt;a href&#x3D;&quot;https://github.com/tmandry&quot;&gt;tmandry&lt;/a&gt;, currently focused on supporting &lt;code&gt;async fn&lt;/code&gt; in traits.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;We have been coordinating and supporting the &lt;a href&#x3D;&quot;https://rust-lang.github.io/generic-associated-types-initiative/&quot;&gt;generic associated types&lt;/a&gt; and &lt;a href&#x3D;&quot;https://rust-lang.github.io/impl-trait-initiative/&quot;&gt;impl trait&lt;/a&gt; initiatives.&lt;/li&gt;
&lt;li&gt;We have also landed the &lt;a href&#x3D;&quot;https://rust-lang.github.io/rfcs/3185-static-async-fn-in-trait.html&quot;&gt;static async fn in traits&lt;/a&gt; RFC and &lt;a href&#x3D;&quot;https://github.com/rust-lang/rfcs/pull/3193&quot;&gt;drafted an RFC for return position impl trait&lt;/a&gt; (which still needs a few tweaks before it&#x27;s ready to land).&lt;/li&gt;
&lt;li&gt;We&#x27;ve been working on a design for dynamic dispatch, the most recent iteration of which is described in &lt;a href&#x3D;&quot;http://smallcultfollowing.com/babysteps//blog/2022/01/07/dyn-async-traits-part-7/&quot;&gt;this blog post&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;We&#x27;ve also been spinning off efforts, such as the proposal for &lt;a href&#x3D;&quot;https://tmandry.gitlab.io/blog/posts/2021-12-21-context-capabilities/&quot;&gt;context and capabilities&lt;/a&gt; that tmandry blogged about.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a href&#x3D;&quot;#async-iteration-initiative&quot; aria-hidden&#x3D;&quot;true&quot; class&#x3D;&quot;anchor&quot; id&#x3D;&quot;async-iteration-initiative&quot;&gt;&lt;/a&gt;&lt;a href&#x3D;&quot;https://estebank.github.io/rust-iterator-item-syntax.html&quot;&gt;Async iteration&lt;/a&gt; initiative&lt;/h3&gt;
&lt;p&gt;Led by &lt;a href&#x3D;&quot;https://github.com/estebank&quot;&gt;estebank&lt;/a&gt;, exploring generators and async generators.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Estebank has &lt;a href&#x3D;&quot;https://estebank.github.io/rust-iterator-item-syntax.html&quot;&gt;prototyped a procedural macro for generators&lt;/a&gt; and put out a call for discussion about the syntax and other details.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a href&#x3D;&quot;#portability-initiative&quot; aria-hidden&#x3D;&quot;true&quot; class&#x3D;&quot;anchor&quot; id&#x3D;&quot;portability-initiative&quot;&gt;&lt;/a&gt;&lt;a href&#x3D;&quot;https://www.ncameron.org/blog/portable-and-interoperable-async-rust/&quot;&gt;Portability&lt;/a&gt; initiative&lt;/h3&gt;
&lt;p&gt;Led by &lt;a href&#x3D;&quot;https://github.com/nrc&quot;&gt;nrc&lt;/a&gt;, exploring what it takes to make code easily portable across runtimes, beginning with standardized traits for things like &lt;code&gt;AsyncRead&lt;/code&gt; and &lt;code&gt;AsyncWrite&lt;/code&gt;.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://github.com/nrc&quot;&gt;nrc&lt;/a&gt; posted a &lt;a href&#x3D;&quot;https://www.ncameron.org/blog/portable-and-interoperable-async-rust/&quot;&gt;blog post&lt;/a&gt; laying out a vision.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a href&#x3D;&quot;#polish-initiative&quot; aria-hidden&#x3D;&quot;true&quot; class&#x3D;&quot;anchor&quot; id&#x3D;&quot;polish-initiative&quot;&gt;&lt;/a&gt;&lt;a href&#x3D;&quot;https://rust-lang.github.io/wg-async/vision/roadmap/polish.html&quot;&gt;Polish&lt;/a&gt; initiative&lt;/h3&gt;
&lt;p&gt;Led by &lt;a href&#x3D;&quot;https://github.com/eholk&quot;&gt;eholk&lt;/a&gt;, focused on improving the existing capabilities via smaller changes that collectively make a big difference.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;We&#x27;ve got a &lt;a href&#x3D;&quot;https://github.com/rust-lang/rust/issues/91032&quot;&gt;pending PR&lt;/a&gt; that will improve the generator&#x27;s capture analysis when variables are moved before a yield point, as well as &lt;a href&#x3D;&quot;https://github.com/rust-lang/rust/pull/92508&quot;&gt;another PR&lt;/a&gt; that tightens temporary scopes to further avoid unnecessary generator captures.&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://github.com/guswynn&quot;&gt;Gus Wynn&lt;/a&gt; made significant progress towards a &lt;a href&#x3D;&quot;https://github.com/rust-lang/rust/pull/88865&quot;&gt;&lt;code&gt;must_not_suspend&lt;/code&gt;&lt;/a&gt; lint that catches cases where values are live across an await point that should not be.&lt;/li&gt;
&lt;li&gt;We are starting to look at ways to make &lt;a href&#x3D;&quot;https://rust-lang.github.io/wg-async/design_docs/async_stack_traces.html&quot;&gt;async stack traces&lt;/a&gt; more readable and helpful.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a href&#x3D;&quot;#tooling-initiative&quot; aria-hidden&#x3D;&quot;true&quot; class&#x3D;&quot;anchor&quot; id&#x3D;&quot;tooling-initiative&quot;&gt;&lt;/a&gt;&lt;a href&#x3D;&quot;https://nikomatsakis.github.io/wg-async/vision/deliverables/tooling.html&quot;&gt;Tooling&lt;/a&gt; initiative&lt;/h3&gt;
&lt;p&gt;Led by &lt;a href&#x3D;&quot;https://github.com/pnkfelix&quot;&gt;pnkfelix&lt;/a&gt;, working to support folks in the async ecosystem who are building interesting tooling to support async Rust others.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Michael Woerister is exploring &lt;a href&#x3D;&quot;https://github.com/rust-lang/async-crashdump-debugging-initiative&quot;&gt;async crashdump recovery&lt;/a&gt;, offering a mechanism to recover and inspect the state of an async Rust program based on a crashdump.&lt;/li&gt;
&lt;li&gt;Eliza Weisman and &lt;a href&#x3D;&quot;https://tokio.rs/blog/2021-12-announcing-tokio-console#thanks-to&quot;&gt;many others&lt;/a&gt; recently &lt;a href&#x3D;&quot;https://tokio.rs/blog/2021-12-announcing-tokio-console&quot;&gt;announced their 0.1 release&lt;/a&gt; of &lt;a href&#x3D;&quot;https://github.com/tokio-rs/console&quot;&gt;tokio console&lt;/a&gt;. Tokio Console is a diagnostics and debugging tool for asynchronous Rust programs. It gives you a live view onto the state of the async runtime, and can also signal warnings  when it detects suspicious behavior that might indicate a bug or performance problem.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You can find the complete set of work that we have planned on our &lt;a href&#x3D;&quot;https://rust-lang.github.io/wg-async/vision/roadmap.html&quot;&gt;roadmap page&lt;/a&gt;, which also links to various deliverables we&#x27;re working toward.&lt;/p&gt;
&lt;h2&gt;&lt;a href&#x3D;&quot;#want-to-help&quot; aria-hidden&#x3D;&quot;true&quot; class&#x3D;&quot;anchor&quot; id&#x3D;&quot;want-to-help&quot;&gt;&lt;/a&gt;Want to help?&lt;/h2&gt;
&lt;p&gt;If you&#x27;re interested in helping out, a good place to start is the &lt;a href&#x3D;&quot;https://rust-lang.github.io/wg-async/vision/roadmap/polish.html#-how-to-help&quot;&gt;How to help&lt;/a&gt; section of the polish initiative page. There is also a weekly &lt;a href&#x3D;&quot;https://rust-lang.github.io/wg-async/triage.html&quot;&gt;polish triage meeting&lt;/a&gt; which you may want to attend.&lt;/p&gt;
&lt;section class&#x3D;&quot;footnotes&quot;&gt;
&lt;ol&gt;
&lt;li id&#x3D;&quot;fn1&quot;&gt;
&lt;p&gt;We used to be called the Async Foundations Working Group, or wg-async-foundations. wg-async is much easier to type. The &lt;a href&#x3D;&quot;https://rust-lang.github.io/wg-async/CHARTER.html&quot;&gt;focus&lt;/a&gt; of the working group being on the &amp;quot;foundations&amp;quot; of async, namely the language and standard library, hasn&#x27;t changed. &lt;a href&#x3D;&quot;#fnref1&quot; class&#x3D;&quot;footnote-backref&quot;&gt;â†©&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</content>

        <author>
            <name>Niko Matsakis and Tyler Mandry</name>
        </author>
    </entry>
    
    <entry>
        <title>Rust Compiler January 2022 Steering Cycle</title>
        <link rel="alternate" href="https://blog.rust-lang.org/inside-rust/2022/01/18/jan-steering-cycle.html" type="text/html" title="Rust Compiler January 2022 Steering Cycle" />
        <published>2022-01-18T00:00:00+00:00</published>
        <updated>2022-01-18T00:00:00+00:00</updated>
        <id>https://blog.rust-lang.org/inside-rust/2022/01/18/jan-steering-cycle.html</id>
        <content type="html" xml:base="https://blog.rust-lang.org/inside-rust/2022/01/18/jan-steering-cycle.html">&lt;p&gt;On &lt;a href&#x3D;&quot;https://zulip-archive.rust-lang.org/stream/238009-t-compiler/meetings/topic/.5Bplanning.20meeting.5D.202022-01-14.html&quot;&gt;Friday, January 14th&lt;/a&gt;, the Rust Compiler team had a planning meeting for the January steering cycle.&lt;/p&gt;
&lt;p&gt;Every fourth Friday, the Rust compiler team decides how
it is going to use its scheduled steering and design meeting time over the next
three Fridays.&lt;/p&gt;
&lt;p&gt;On &lt;a href&#x3D;&quot;https://github.com/rust-lang/compiler-team/issues/479&quot;&gt;Friday, 28 January&lt;/a&gt;, we will be having a meeting to
discuss the  backlog of P-high issues (there are currently &lt;a href&#x3D;&quot;https://github.com/rust-lang/rust/issues?q&#x3D;is%3Aopen+is%3Aissue+label%3AP-high&quot;&gt;86 such issues&lt;/a&gt;). pnkfelix will prepare a document to drive the meeting, with a categorization of the issues, especially in terms of how they relate to specific subteams.&lt;/p&gt;
&lt;p&gt;On Friday, 4 February, we will be having a meeting to
discuss any beta regressions or backports that are pending for the
Rust 1.59 release (due out 24 February, 2022). (We did not file a
meeting proposal for this meeting, but you can see a similar meeting
proposal that was used to drive an analogous meeting for the 1.48 release
&lt;a href&#x3D;&quot;https://github.com/rust-lang/compiler-team/issues/382&quot;&gt;here&lt;/a&gt;.)&lt;/p&gt;
&lt;p&gt;Each meeting will run from 2pm to 3pm GMT, and will take place on the
&lt;a href&#x3D;&quot;https://rust-lang.zulipchat.com/#narrow/stream/238009-t-compiler.2Fmeetings&quot;&gt;T-compiler/meetings zulip stream&lt;/a&gt;.&lt;/p&gt;
</content>

        <author>
            <name>Felix Klock</name>
        </author>
    </entry>
    
    <entry>
        <title>1.58.0 pre-release testing</title>
        <link rel="alternate" href="https://blog.rust-lang.org/inside-rust/2022/01/11/1.58.0-prerelease.html" type="text/html" title="1.58.0 pre-release testing" />
        <published>2022-01-11T00:00:00+00:00</published>
        <updated>2022-01-11T00:00:00+00:00</updated>
        <id>https://blog.rust-lang.org/inside-rust/2022/01/11/1.58.0-prerelease.html</id>
        <content type="html" xml:base="https://blog.rust-lang.org/inside-rust/2022/01/11/1.58.0-prerelease.html">&lt;p&gt;The 1.58.0 pre-release is ready for testing. The release is scheduled for this
Thursday, January 13th. &lt;a href&#x3D;&quot;https://github.com/rust-lang/rust/blob/stable/RELEASES.md#version-1580-2022-01-13&quot;&gt;Release notes can be found here.&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;You can try it out locally by running:&lt;/p&gt;
&lt;pre&gt;&lt;code class&#x3D;&quot;language-plain&quot;&gt;RUSTUP_DIST_SERVER&#x3D;https://dev-static.rust-lang.org rustup update stable
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The index is &lt;a href&#x3D;&quot;https://dev-static.rust-lang.org/dist/2022-01-11/index.html&quot;&gt;https://dev-static.rust-lang.org/dist/2022-01-11/index.html&lt;/a&gt;. You
can leave feedback on the &lt;a href&#x3D;&quot;https://internals.rust-lang.org/t/rust-1-58-0-pre-release-testing/15946&quot;&gt;internals thread&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The release team is also thinking about changes to our pre-release process:
we&#x27;d love your feedback &lt;a href&#x3D;&quot;https://github.com/rust-lang/release-team/issues/16&quot;&gt;on this GitHub issue&lt;/a&gt;.&lt;/p&gt;
</content>

        <author>
            <name>Pietro Albini</name>
        </author>
    </entry>
    
    <entry>
        <title>Follow-up on the moderation issue</title>
        <link rel="alternate" href="https://blog.rust-lang.org/inside-rust/2021/12/17/follow-up-on-the-moderation-issue.html" type="text/html" title="Follow-up on the moderation issue" />
        <published>2021-12-17T00:00:00+00:00</published>
        <updated>2021-12-17T00:00:00+00:00</updated>
        <id>https://blog.rust-lang.org/inside-rust/2021/12/17/follow-up-on-the-moderation-issue.html</id>
        <content type="html" xml:base="https://blog.rust-lang.org/inside-rust/2021/12/17/follow-up-on-the-moderation-issue.html">&lt;p&gt;Last week, the following e-mail was sent to all members of the Rust project
(including all working groups) to follow up on the moderation issue.
The footnotes have been added to provide additional context to the wider Rust community,
and were not part of the original e-mail.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;strong&gt;From:&lt;/strong&gt; Mara Bos &lt;br /&gt;
&lt;strong&gt;To:&lt;/strong&gt; All members of the Rust project &lt;br /&gt;
&lt;strong&gt;Date:&lt;/strong&gt; Fri, 10 Dec 2021 18:12:06 UTC &lt;br /&gt;
&lt;strong&gt;Subject:&lt;/strong&gt; Follow-up on the moderation issue&lt;/p&gt;
&lt;p&gt;Hey all,&lt;/p&gt;
&lt;p&gt;On behalf of the top-level team leads, the new mods, the project directors to
the Foundation&lt;sup class&#x3D;&quot;footnote-ref&quot;&gt;&lt;a href&#x3D;&quot;#fn1&quot; id&#x3D;&quot;fnref1&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;, and the core team&lt;sup class&#x3D;&quot;footnote-ref&quot;&gt;&lt;a href&#x3D;&quot;#fn2&quot; id&#x3D;&quot;fnref2&quot;&gt;2&lt;/a&gt;&lt;/sup&gt;, I&#x27;d like to
apologize for the delay in getting back to all of you after the resignation of
the moderation team&lt;sup class&#x3D;&quot;footnote-ref&quot;&gt;&lt;a href&#x3D;&quot;#fn3&quot; id&#x3D;&quot;fnref3&quot;&gt;3&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;
&lt;p&gt;Over the past few weeks, it has been nearly the full time job of many involved
to collect all the context, understand the perspectives of those involved, find
common ground, and rebuild understanding and trust. This work is subtle, highly
context dependent, and sometimes extremely personal. Still, we owe it to all
project members to be as transparent as we can be. In this email, I&#x27;ll attempt
to update you on the shape of the issues and restate our collective commitment
to solving them together with the entire Rust project and eventually the wider
Rust community.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;What&#x27;s going on?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The most immediate cause of the current issue was a disagreement between the
former members of the moderation team and the core team about how to handle a
moderation issue in which the core team itself were interested parties.
I cannot share more context on that issue without violating the privacy of
those involved, including of those who reported the issue.
However, as frustrating as it might be for those without any context,
I am convinced it&#x27;s not in any way necessary to get more people involved in
that specific moderation issue itself.&lt;/p&gt;
&lt;p&gt;Historically, moderation actions involving Rust team members have been reviewed
in collaboration between the moderation team and the core team.
However, due to the involvement of the core team, there was no clear process to follow.
Both teams put in substantial effort to try to deal with this lack of process,
but over an eight month period involving miscommunication and disagreements,
this escalated into a trust issue between the moderation team and the core team.
Both the moderators and the core team ended up in an unworkable situation
where no one could have full context, making a path forward impossible.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Why are certain groups or people directly involved in solving this and others not?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Due to the resignation being unexpected and the complexity of the situation being high,
we both needed to act quickly and involve the most obvious stakeholders.
Since the concept of leadership of the Rust project is fluid and not well defined,
it is very hard to pick the right set of people to involve,
while making sure different perspectives are represented and heard.
Any set would likely leave out some person or group who needed to be involved,
but to get this unblocked, we started with all top-level team leads, project directors
to the Foundation, all core team members, and the new moderation team members,
to discuss next steps. This was chosen since it was easy to determine
objectively who fit this description and who did not.&lt;/p&gt;
&lt;p&gt;Over time, we will expand this group to include others in the project.
However, due to the highly context-dependent and sensitive nature of what&#x27;s
being discussed, opening all discussion to everyone in the project (which is
effectively making it open to the public) would be counterproductive and make
fact finding and context building impossible.&lt;/p&gt;
&lt;p&gt;Ryan Levick and I have stepped forward to coordinate the work here.
If you would like to be involved or provide input,
please contact either of us by e-mail or on Zulip.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;What are we going to do?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;With all this in mind, we are committed to the following high level goals:&lt;/p&gt;
&lt;p&gt;1. The recent events are one of several indicators that the Rust project has
underspecified policies for handling complex moderation issues. This must be
fixed with publicly documented procedures around moderation that ensure
privacy, fairness, accountability, and justice to all parties involved. We are
gathering input and experiences to try to find an outcome that will satisfy
everyone&#x27;s needs and takes into account past experiences. Decisions will not be
made without wider community involvement.&lt;/p&gt;
&lt;p&gt;2. More generally, the issue was another indicator to a fact that was already
clear to all involved in Rust project leadership, including all members of the
core team: the Rust project needs to adapt its structures for how it does
governance. What the future of Rust governance should look like is a big open
question, but from the input we&#x27;ve collected so far, there does seem to be
enough common ground to build on. We want to solve this problem with feedback
from all Rust project members.&lt;/p&gt;
&lt;p&gt;3. Most specifically, we need to resolve the specific moderation issue that
was at the center of the disagreement between core and the former moderation
team. This resolution needs to respect all the values listed in point 1:
privacy, fairness, accountability, and justice to all parties involved. This
will be handled with input from all involved parties.&lt;/p&gt;
&lt;p&gt;These issues are highly complex, require a large amount of context to
understand, and involve private and personal information which should not be
discussed publicly. However, at the center of the Rust project is a belief in
transparency and openness. We are committed to solving these issues with all
members of the Rust project and the wider Rust community, but we ask for your
patience while thoughts are organized and drafts are constructed. Details and
plans will be discussed publicly when we can ensure that doing so will not
cause more confusion.&lt;/p&gt;
&lt;p&gt;Needless to say, it is difficult to govern an open source project which has
reached a size larger than most companies&lt;sup class&#x3D;&quot;footnote-ref&quot;&gt;&lt;a href&#x3D;&quot;#fn4&quot; id&#x3D;&quot;fnref4&quot;&gt;4&lt;/a&gt;&lt;/sup&gt; and yet is composed of
volunteers. We have a lot of work ahead of us, but we are confident that the
Rust project will come out stronger from this. While these issues are serious
and require care to reach positive conclusions, we are confident that this will
not negatively impact our ability to continue to ship improvements to the Rust
language and its core tooling, documentation, and support.&lt;sup class&#x3D;&quot;footnote-ref&quot;&gt;&lt;a href&#x3D;&quot;#fn5&quot; id&#x3D;&quot;fnref5&quot;&gt;5&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;p&gt;If you have any concerns or thoughts, please reach out to me or Ryan with
questions, concerns, or comments.&lt;/p&gt;
&lt;p&gt;Thanks, &lt;br /&gt;
Mara Bos (Library team lead), &lt;br /&gt;
on behalf of top-level team leads, project directors to the Foundation, core
team members, and the new moderators.&lt;/p&gt;
&lt;hr /&gt;
&lt;section class&#x3D;&quot;footnotes&quot;&gt;
&lt;ol&gt;
&lt;li id&#x3D;&quot;fn1&quot;&gt;
&lt;p&gt;These are the members of the Rust project who represent the project on the board of the Rust Foundation. &lt;a href&#x3D;&quot;#fnref1&quot; class&#x3D;&quot;footnote-backref&quot;&gt;â†©&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id&#x3D;&quot;fn2&quot;&gt;
&lt;p&gt;Unlike in many other projects, the Rust project is made up of many teams. The core team is one of them, and does not make decisions that fall under the scope of one of the other teams. &lt;a href&#x3D;&quot;#fnref2&quot; class&#x3D;&quot;footnote-backref&quot;&gt;â†©&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id&#x3D;&quot;fn3&quot;&gt;
&lt;p&gt;&lt;a href&#x3D;&quot;https://github.com/rust-lang/team/pull/671&quot;&gt;https://github.com/rust-lang/team/pull/671&lt;/a&gt; &lt;a href&#x3D;&quot;#fnref3&quot; class&#x3D;&quot;footnote-backref&quot;&gt;â†©&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id&#x3D;&quot;fn4&quot;&gt;
&lt;p&gt;For reference, the original email went out to approximately 300 people. &lt;a href&#x3D;&quot;#fnref4&quot; class&#x3D;&quot;footnote-backref&quot;&gt;â†©&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id&#x3D;&quot;fn5&quot;&gt;
&lt;p&gt;Rust 1.57 was released two weeks ago, and we will continue to ship new releases of Rust on schedule. &lt;a href&#x3D;&quot;#fnref5&quot; class&#x3D;&quot;footnote-backref&quot;&gt;â†©&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</content>

        <author>
            <name>Ryan Levick and Mara Bos</name>
        </author>
    </entry>
    
    <entry>
        <title>1.57.0 pre-release testing</title>
        <link rel="alternate" href="https://blog.rust-lang.org/inside-rust/2021/11/30/1.57.0-prerelease.html" type="text/html" title="1.57.0 pre-release testing" />
        <published>2021-11-30T00:00:00+00:00</published>
        <updated>2021-11-30T00:00:00+00:00</updated>
        <id>https://blog.rust-lang.org/inside-rust/2021/11/30/1.57.0-prerelease.html</id>
        <content type="html" xml:base="https://blog.rust-lang.org/inside-rust/2021/11/30/1.57.0-prerelease.html">&lt;p&gt;The 1.57.0 pre-release is ready for testing. The release is scheduled for this
Thursday, December 2nd. &lt;a href&#x3D;&quot;https://github.com/rust-lang/rust/blob/master/RELEASES.md#version-1570-2021-12-02&quot;&gt;Release notes can be found here.&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;You can try it out locally by running:&lt;/p&gt;
&lt;pre&gt;&lt;code class&#x3D;&quot;language-plain&quot;&gt;RUSTUP_DIST_SERVER&#x3D;https://dev-static.rust-lang.org rustup update stable
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The index is &lt;a href&#x3D;&quot;https://dev-static.rust-lang.org/dist/2021-11-30/index.html&quot;&gt;https://dev-static.rust-lang.org/dist/2021-11-30/index.html&lt;/a&gt;. You
can leave feedback on the &lt;a href&#x3D;&quot;https://internals.rust-lang.org/t/rust-1-57-0-prerelease-testing/15690&quot;&gt;internals thread&lt;/a&gt;.&lt;/p&gt;
</content>

        <author>
            <name>Mark Rousskov</name>
        </author>
    </entry>
    
    <entry>
        <title>In response to the moderation team resignation</title>
        <link rel="alternate" href="https://blog.rust-lang.org/inside-rust/2021/11/25/in-response-to-the-moderation-team-resignation.html" type="text/html" title="In response to the moderation team resignation" />
        <published>2021-11-25T00:00:00+00:00</published>
        <updated>2021-11-25T00:00:00+00:00</updated>
        <id>https://blog.rust-lang.org/inside-rust/2021/11/25/in-response-to-the-moderation-team-resignation.html</id>
        <content type="html" xml:base="https://blog.rust-lang.org/inside-rust/2021/11/25/in-response-to-the-moderation-team-resignation.html">&lt;p&gt;As top-level team leads, project directors to the Foundation, and core team
members, we are actively collaborating to establish next steps after the
statement from the Rust moderation team.&lt;/p&gt;
&lt;p&gt;While we are having ongoing conversations to share perspectives on the
situation, we&#x27;d like to collectively state that we are all committed to the
continuity and long term health of the project.&lt;/p&gt;
&lt;p&gt;Updates on next steps will be shared with the project and wider community over
the next few weeks. In the meantime, we are grateful to the interim moderators
who have stepped up to provide moderation continuity to the project.&lt;/p&gt;
&lt;p&gt;Signed, in alphabetical order, &lt;br /&gt;
Â  Aidan Hobson Sayers (Core team) &lt;br /&gt;
Â  Ashley Williams (Core team) &lt;br /&gt;
Â  Felix Klock (Compiler team co-lead) &lt;br /&gt;
Â  Florian Gilcher (Core team) &lt;br /&gt;
Â  Jan-Erik Rediger (Core team) &lt;br /&gt;
Â  Jane Lusby (Project Director for Collaboration) &lt;br /&gt;
Â  Josh Stone (Project Director for Reliability) &lt;br /&gt;
Â  Josh Triplett (Language team co-lead) &lt;br /&gt;
Â  Joshua Gould (Mod team) &lt;br /&gt;
Â  JT (Core team) &lt;br /&gt;
Â  Justin Geibel (crates.io team co-lead) &lt;br /&gt;
Â  Khionu Sybiern (Mod team) &lt;br /&gt;
Â  Manish Goregaokar (Devtools co-lead) &lt;br /&gt;
Â  Mara Bos (Library team lead) &lt;br /&gt;
Â  Mark Rousskov (Core team) &lt;br /&gt;
Â  Nicholas Matsakis (Language team co-lead) &lt;br /&gt;
Â  Pascal Hertleif (Devtools co-lead) &lt;br /&gt;
Â  Pietro Albini (Core team) &lt;br /&gt;
Â  Ryan Levick (Core team) &lt;br /&gt;
Â  Steve Klabnik (Core team) &lt;br /&gt;
Â  Tobias Bieniek (crates.io team co-lead) &lt;br /&gt;
Â  Tyler Mandry (Project Director for Quality) &lt;br /&gt;
Â  Wesley Wiser (Compiler team co-lead)&lt;/p&gt;
</content>

        <author>
            <name>The undersigned</name>
        </author>
    </entry>
    
    <entry>
        <title>Please welcome The 8472 and Ashley Mannix to Library Contributors</title>
        <link rel="alternate" href="https://blog.rust-lang.org/inside-rust/2021/11/15/libs-contributors-the8472-kodraus.html" type="text/html" title="Please welcome The 8472 and Ashley Mannix to Library Contributors" />
        <published>2021-11-15T00:00:00+00:00</published>
        <updated>2021-11-15T00:00:00+00:00</updated>
        <id>https://blog.rust-lang.org/inside-rust/2021/11/15/libs-contributors-the8472-kodraus.html</id>
        <content type="html" xml:base="https://blog.rust-lang.org/inside-rust/2021/11/15/libs-contributors-the8472-kodraus.html">&lt;p&gt;Please welcome The 8472 and Ashley Mannix to the
&lt;a href&#x3D;&quot;https://www.rust-lang.org/governance/teams/library#libs-contributors&quot;&gt;Library Contributors&lt;/a&gt; group!&lt;/p&gt;
&lt;p&gt;&lt;a href&#x3D;&quot;https://github.com/the8472&quot;&gt;The 8472&lt;/a&gt; has been working on
&lt;a href&#x3D;&quot;https://github.com/rust-lang/rust/pull/70793&quot;&gt;various&lt;/a&gt;
&lt;a href&#x3D;&quot;https://github.com/rust-lang/rust/pull/75272&quot;&gt;specializations&lt;/a&gt;
&lt;a href&#x3D;&quot;https://github.com/rust-lang/rust/pull/78641&quot;&gt;in the&lt;/a&gt;
&lt;a href&#x3D;&quot;https://github.com/rust-lang/rust/pull/83245&quot;&gt;standard library&lt;/a&gt;,
and has been involved in many library-related changes and discussions.&lt;/p&gt;
&lt;p&gt;&lt;a href&#x3D;&quot;https://github.com/KodrAus/&quot;&gt;Ashley Mannix&lt;/a&gt; maintains
&lt;a href&#x3D;&quot;https://crates.io/users/KodrAus?sort&#x3D;downloads&quot;&gt;several popular Rust crates&lt;/a&gt;
and used to be a part of the Library (API) Team.
Ashley is now getting back into Rust open source work,
and will be helping out with maintenance of the standard library
and some official &lt;code&gt;rust-lang&lt;/code&gt; crates such as &lt;a href&#x3D;&quot;https://crates.io/crates/log&quot;&gt;&lt;code&gt;log&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Congratulations The 8472 and Ashley, and thanks for everything you do!&lt;/p&gt;
</content>

        <author>
            <name>Mara Bos</name>
        </author>
    </entry>
    
    <entry>
        <title>1.56.0 pre-release testing</title>
        <link rel="alternate" href="https://blog.rust-lang.org/inside-rust/2021/10/18/1.56.0-prerelease.html" type="text/html" title="1.56.0 pre-release testing" />
        <published>2021-10-18T00:00:00+00:00</published>
        <updated>2021-10-18T00:00:00+00:00</updated>
        <id>https://blog.rust-lang.org/inside-rust/2021/10/18/1.56.0-prerelease.html</id>
        <content type="html" xml:base="https://blog.rust-lang.org/inside-rust/2021/10/18/1.56.0-prerelease.html">&lt;p&gt;The 1.56.0 pre-release is ready for testing. The release is scheduled for this
Thursday, October 21st. &lt;a href&#x3D;&quot;https://github.com/rust-lang/rust/blob/master/RELEASES.md#version-1560-2021-10-21&quot;&gt;Release notes can be found here.&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;You can try it out locally by running:&lt;/p&gt;
&lt;pre&gt;&lt;code class&#x3D;&quot;language-plain&quot;&gt;RUSTUP_DIST_SERVER&#x3D;https://dev-static.rust-lang.org rustup update stable
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The index is &lt;a href&#x3D;&quot;https://dev-static.rust-lang.org/dist/2021-10-18/index.html&quot;&gt;https://dev-static.rust-lang.org/dist/2021-10-18/index.html&lt;/a&gt;. You
can leave feedback on the &lt;a href&#x3D;&quot;https://internals.rust-lang.org/t/rust-1-56-0-pre-release-testing/15459&quot;&gt;internals thread&lt;/a&gt;.&lt;/p&gt;
</content>

        <author>
            <name>Pietro Albini</name>
        </author>
    </entry>
    
    <entry>
        <title>Lang team October update</title>
        <link rel="alternate" href="https://blog.rust-lang.org/inside-rust/2021/10/08/Lang-team-Oct-update.html" type="text/html" title="Lang team October update" />
        <published>2021-10-08T00:00:00+00:00</published>
        <updated>2021-10-08T00:00:00+00:00</updated>
        <id>https://blog.rust-lang.org/inside-rust/2021/10/08/Lang-team-Oct-update.html</id>
        <content type="html" xml:base="https://blog.rust-lang.org/inside-rust/2021/10/08/Lang-team-Oct-update.html">&lt;p&gt;This week the lang team held its October planning meeting (&lt;a href&#x3D;&quot;https://github.com/rust-lang/lang-team/blob/master/design-meeting-minutes/2021-10-06-Planning-meeting.md&quot;&gt;minutes&lt;/a&gt;). We hold these meetings on the first Wednesday of every month.&lt;/p&gt;
&lt;p&gt;The planning meeting is used for:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Checking in on the status of our &lt;a href&#x3D;&quot;https://lang-team.rust-lang.org/initiatives.html&quot;&gt;active initiatives&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Planning the design meetings for the remainder of the month&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;After each meeting, we post an update (like this one!) with notes and meeting announcements.&lt;/p&gt;
&lt;h2&gt;&lt;a href&#x3D;&quot;#update-from-active-initiatives&quot; aria-hidden&#x3D;&quot;true&quot; class&#x3D;&quot;anchor&quot; id&#x3D;&quot;update-from-active-initiatives&quot;&gt;&lt;/a&gt;Update from active initiatives&lt;/h2&gt;
&lt;p&gt;What follows are the updates that were submitted this month. Note that many of the more recent initiatives have dedicated repositories which contain other byproducts of the design process (e.g., evaluation documents, open design questions, etc). Take a look!&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://rust-lang.github.io/async-fundamentals-initiative/updates/2021-oct.html&quot;&gt;Async fundamentals update&lt;/a&gt;:
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;What is it?&lt;/strong&gt; Async fn in traits, async drop, async closures&lt;/li&gt;
&lt;li&gt;Have designated an &lt;a href&#x3D;&quot;https://rust-lang.github.io/async-fundamentals-initiative/roadmap/mvp.html&quot;&gt;MVP&lt;/a&gt; version of async functions in traits that we intend to stabilize first, and done a lot of exploration on next steps (read up on that in the ever evolving &lt;a href&#x3D;&quot;https://rust-lang.github.io/async-fundamentals-initiative/evaluation.html&quot;&gt;evaluation doc&lt;/a&gt;).&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://rust-lang.github.io/impl-trait-initiative/updates/2021-oct.html&quot;&gt;Impl trait initiative update&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;What is it?&lt;/strong&gt; &lt;code&gt;type Foo &#x3D; impl Trait&lt;/code&gt; at the module and impl level.&lt;/li&gt;
&lt;li&gt;oli-obk has completed a rewrite of the inference engine to better match the design proposed the RFC, and it is slowly being merged in&lt;/li&gt;
&lt;li&gt;We are working on explainer plus stabilization doc to &amp;quot;Type alias impl trait&amp;quot;.&lt;/li&gt;
&lt;li&gt;We would like to add syntax to give names for function types, which unblocks &amp;quot;impl trait in traits&amp;quot;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://rust-lang.github.io/dyn-upcasting-coercion-initiative/updates/2021-oct.html&quot;&gt;Dyn upcasting initiative update&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;What is it?&lt;/strong&gt; Ability to cast &lt;code&gt;dyn Foo&lt;/code&gt; to &lt;code&gt;dyn Bar&lt;/code&gt; if &lt;code&gt;trait Foo: Bar&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Made good progress, need to resolve a soundness question and then ready to merge.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://rust-lang.github.io/generic-associated-types-initiative/updates/2021-oct.html&quot;&gt;Generic associated type initiative update&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;What is it?&lt;/strong&gt; Ability to have associated types with generic parameters, such as &lt;code&gt;type Foo&amp;lt;&#x27;me&amp;gt;&lt;/code&gt;, in traits.&lt;/li&gt;
&lt;li&gt;Resolved the question of where clause defaults by deciding on a conservative, if not maximally ergonomic, path.&lt;/li&gt;
&lt;li&gt;Making continued progress towards something we can stabilize. The intent is to start with some known ergonomic shortcomings and build from there.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://github.com/rust-lang/rust/issues/87335#issuecomment-933672440&quot;&gt;Let else update&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;What is it?&lt;/strong&gt; Generalization of &lt;code&gt;let&lt;/code&gt; to permit you to match against something and panic, return, etc when match fails:
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;let Ok(x) &#x3D; something else panic!()&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Implementation available on nightly, may be feature complete&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://github.com/rust-lang/lang-team/issues/88#issuecomment-935056996&quot;&gt;Deref patterns update&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;What is it?&lt;/strong&gt; Applying Deref impls in the context of a match, such as &lt;code&gt;match rc { Some(x) &#x3D;&amp;gt; ..., None &#x3D;&amp;gt; ... }&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Decided to build prototype that does not have any explicit syntax for deref and works against &amp;quot;known safe&amp;quot; std types.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://github.com/rust-lang/lang-team/issues/60#issuecomment-935233842&quot;&gt;Never type stabilization update&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;What is it?&lt;/strong&gt; The never type &lt;code&gt;!&lt;/code&gt;&lt;sup class&#x3D;&quot;footnote-ref&quot;&gt;&lt;a href&#x3D;&quot;#fn1&quot; id&#x3D;&quot;fnref1&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/li&gt;
&lt;li&gt;We have landed an improved, if complex, analysis that allows us to choose between the current behavior (fallback to &lt;code&gt;()&lt;/code&gt;) and the new behavior (fallback to &lt;code&gt;!&lt;/code&gt;) without breaking important existing code. The hope is to proceed with stabilization and slowly improve and simplify the rules using warnings, editions, or other tools.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In addition to the reports above, you&#x27;ll find more detailed discussing in the &lt;a href&#x3D;&quot;https://github.com/rust-lang/lang-team/blob/master/design-meeting-minutes/2021-10-06-Planning-meeting.md&quot;&gt;minutes&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;&lt;a href&#x3D;&quot;#upcoming-design-meetings&quot; aria-hidden&#x3D;&quot;true&quot; class&#x3D;&quot;anchor&quot; id&#x3D;&quot;upcoming-design-meetings&quot;&gt;&lt;/a&gt;Upcoming design meetings&lt;/h2&gt;
&lt;p&gt;We have planned the following design meetings:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;October 13: Syntax for where clauses in GATs and type aliases (&lt;a href&#x3D;&quot;https://github.com/rust-lang/lang-team/issues/120&quot;&gt;lang-team#120&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;October 20: Safety considerations for dyn upcasting (&lt;a href&#x3D;&quot;https://github.com/rust-lang/lang-team/issues/119&quot;&gt;lang-team#119&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;October 27: Forbidding unwinding from drop impls (&lt;a href&#x3D;&quot;https://github.com/rust-lang/lang-team/issues/97&quot;&gt;lang-team#97&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href&#x3D;&quot;#design-meeting-expectations&quot; aria-hidden&#x3D;&quot;true&quot; class&#x3D;&quot;anchor&quot; id&#x3D;&quot;design-meeting-expectations&quot;&gt;&lt;/a&gt;Design meeting expectations&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;The document for the meeting must be prepared by the triage meeting on Tuesday and posted to the tracking issue.
&lt;ul&gt;
&lt;li&gt;If it is not sent out by then, the meeting will be canceled. This gives folks 24 hour notice.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;There is no expectation that people will read the document before the meeting. The meeting will begin with a recap of the document.
&lt;ul&gt;
&lt;li&gt;However, there is no rule &lt;strong&gt;against&lt;/strong&gt; reading the document beforehand and providing feedback or advice on how to improve it.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;section class&#x3D;&quot;footnotes&quot;&gt;
&lt;ol&gt;
&lt;li id&#x3D;&quot;fn1&quot;&gt;
&lt;p&gt;The never type is called never because it will &lt;em&gt;never&lt;/em&gt; be stabilized. Ha! I kill me. --nikomatsakis &lt;a href&#x3D;&quot;#fnref1&quot; class&#x3D;&quot;footnote-backref&quot;&gt;â†©&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</content>

        <author>
            <name>Niko Matsakis</name>
        </author>
    </entry>
    
</feed>

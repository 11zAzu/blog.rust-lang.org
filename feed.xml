<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
    <generator uri="https://blog.rust-lang.org/" version="0.1.0">Rust Blog</generator>
    <link href="https://blog.rust-lang.org/feed.xml" rel="self" type="application/atom+xml" />
    <link href="https://blog.rust-lang.org/" rel="alternate" type="text/html" />
    <id>https://blog.rust-lang.org/</id>
    <title>Rust Blog</title>
    <subtitle>Empowering everyone to build reliable and efficient software.</subtitle>
    <author>
        <name>Maintained by the Rust Teams.</name>
        <uri>https://github.com/rust-lang/blog.rust-lang.org/</uri>
    </author>
    <updated>2023-07-05T13:36:17+00:00</updated>

    
    <entry>
        <title>Announcing regex 1.9</title>
        <link rel="alternate" href="https://blog.rust-lang.org/2023/07/05/regex-1.9.html" type="text/html" title="Announcing regex 1.9" />
        <published>2023-07-05T00:00:00+00:00</published>
        <updated>2023-07-05T00:00:00+00:00</updated>
        <id>https://blog.rust-lang.org/2023/07/05/regex-1.9.html</id>
        <content type="html" xml:base="https://blog.rust-lang.org/2023/07/05/regex-1.9.html">&lt;p&gt;The regex sub-team is announcing the release of &lt;code&gt;regex 1.9&lt;/code&gt;. The &lt;code&gt;regex&lt;/code&gt; crate
is maintained by the Rust project and is the recommended way to use regular
expressions in Rust. Its defining characteristic is its guarantee of worst case
linear time searches with respect to the size of the string being searched.&lt;/p&gt;
&lt;p&gt;Releases of the &lt;code&gt;regex&lt;/code&gt; crate aren&#x27;t normally announced on this blog, but
since the majority of its internals have been rewritten in version 1.9, this
announcement serves to encourage extra scrutiny. If you run into any problems
or performance regressions, please report them on the &lt;a href&#x3D;&quot;https://github.com/rust-lang/regex/issues&quot;&gt;issue tracker&lt;/a&gt; or &lt;a href&#x3D;&quot;https://github.com/rust-lang/regex/discussions&quot;&gt;ask
questions on the Discussion forum&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Few API additions have been made, but one worth calling out is the
&lt;a href&#x3D;&quot;https://docs.rs/regex/1.*/regex/struct.Captures.html#method.extract&quot;&gt;&lt;code&gt;Captures::extract&lt;/code&gt;&lt;/a&gt; method that should make getting capture groups in some
cases more convenient. Otherwise, the main change folks should see is hopefully
faster search times.&lt;/p&gt;
&lt;p&gt;You can read more in the &lt;a href&#x3D;&quot;https://github.com/rust-lang/regex/blob/master/CHANGELOG.md#190-2023-07-05&quot;&gt;CHANGELOG&lt;/a&gt; and in a more in depth blog post on
&lt;a href&#x3D;&quot;https://blog.burntsushi.net/regex-internals/&quot;&gt;regex crate internals as a library&lt;/a&gt;.&lt;/p&gt;
</content>

        <author>
            <name>Andrew Gallant</name>
        </author>
    </entry>
    
    <entry>
        <title>Rustfmt support for let-else statements</title>
        <link rel="alternate" href="https://blog.rust-lang.org/2023/07/01/rustfmt-supports-let-else-statements.html" type="text/html" title="Rustfmt support for let-else statements" />
        <published>2023-07-01T00:00:00+00:00</published>
        <updated>2023-07-01T00:00:00+00:00</updated>
        <id>https://blog.rust-lang.org/2023/07/01/rustfmt-supports-let-else-statements.html</id>
        <content type="html" xml:base="https://blog.rust-lang.org/2023/07/01/rustfmt-supports-let-else-statements.html">&lt;p&gt;Rustfmt will add support for formatting &lt;a href&#x3D;&quot;https://doc.rust-lang.org/rust-by-example/flow_control/let_else.html&quot;&gt;let-else statements&lt;/a&gt; starting with the nightly 2023-07-02 toolchain, and then let-else formatting support should come to stable Rust as part of the 1.72 release.&lt;/p&gt;
&lt;h2&gt;&lt;a href&#x3D;&quot;#overview&quot; aria-hidden&#x3D;&quot;true&quot; class&#x3D;&quot;anchor&quot; id&#x3D;&quot;overview&quot;&gt;&lt;/a&gt;Overview&lt;/h2&gt;
&lt;p&gt;let-else statements were &lt;a href&#x3D;&quot;https://blog.rust-lang.org/2022/11/03/Rust-1.65.0.html#let-else-statements&quot;&gt;stabilized&lt;/a&gt; back in 2022 as part of the 1.65.0 release. However, the current and previous versions of Rustfmt did not have formatting support for let-else statements. When Rustfmt encountered a let-else statement it would leave it alone and maintain the manual styling originally authored by the developer.&lt;/p&gt;
&lt;p&gt;After updating to one of the toolchains with let-else formatting support, you may notice that &lt;code&gt;cargo fmt&lt;/code&gt;/&lt;code&gt;rustfmt&lt;/code&gt; invocations want to &amp;quot;change&amp;quot; the formatting of your let-else statements. However, this isn&#x27;t actually a &amp;quot;change&amp;quot; in formatting, but instead is simply Rustfmt applying the &lt;a href&#x3D;&quot;https://doc.rust-lang.org/nightly/style-guide/statements.html#else-blocks-let-else-statements&quot;&gt;let-else formatting rules&lt;/a&gt; for the very first time.&lt;/p&gt;
&lt;p&gt;Rustfmt support for let-else statements has been a long standing request, and the Project has taken a number of steps to prevent a recurrence of the delay between feature stabilization and formatting support, as well as putting additional procedures in place which should enable more expeditious formatting support for nightly-only syntax.&lt;/p&gt;
&lt;h2&gt;&lt;a href&#x3D;&quot;#background-and-context&quot; aria-hidden&#x3D;&quot;true&quot; class&#x3D;&quot;anchor&quot; id&#x3D;&quot;background-and-context&quot;&gt;&lt;/a&gt;Background and Context&lt;/h2&gt;
&lt;p&gt;Rust has an official &lt;a href&#x3D;&quot;https://doc.rust-lang.org/nightly/style-guide/&quot;&gt;Style Guide&lt;/a&gt; that articulates the default formatting style for Rust code. The Style Guide functions as a specification that defines the default formatting behavior for Rustfmt, and Rustfmt&#x27;s primary mission is to provide automated formatting capabilities based around that Style Guide specification. Rustfmt is a direct consumer of the Style Guide, but Rustfmt does not unilaterally dictate what the default formatting style of language constructs should be.&lt;/p&gt;
&lt;p&gt;The initial Style Guide was developed many years ago (beginning in 2016), and was driven by a Style Team in collaboration with the community through an RFC process. The Style Guide was then made official in 2018 via &lt;a href&#x3D;&quot;https://rust-lang.github.io/rfcs/2436-style-guide.html&quot;&gt;RFC 2436&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;That initial Style Team was more akin to a Project Working Group in today&#x27;s terms, as they had a fixed scope with a main goal to simply pull together the initial Style Guide. Accordingly that initial Style Team was disbanded once the Guide was made official.&lt;/p&gt;
&lt;p&gt;There was subsequently no designated group within the Rust Project that was
explicitly responsible for the Style Guide, and no group explicitly focused on determining the official Style for new language constructs.&lt;/p&gt;
&lt;p&gt;The absence of a team/group with ownership of the Style Guide didn&#x27;t really cause problems at first, as the new syntax that came along during the first few years was comparatively non-controversial when it came to default style and formatting. However, over time challenges started to develop when there was increasingly less community consensus and no governing team within the Project to make the final decision about how new language syntax should be styled.&lt;/p&gt;
&lt;p&gt;This was certainly the case with let-else statements, with lots of varying perspectives on how they should be styled. Without any team/group to make the decision and update the Style Guide with the official rules for let-else statements, Rustfmt was blocked and was unable to proceed.&lt;/p&gt;
&lt;p&gt;These circumstances around let-else statements resulted in a greater understanding across the Project of the need to establish a team to own and maintain the Style Guide. However, it was also well understood that spinning up a new team and respective processes would take some time, and the decision was made to not block the stabilization of features that were otherwise fully ready to be stabilized, like let-else statements, in the nascency of such a new team and new processes.&lt;/p&gt;
&lt;p&gt;Accordingly, let-else statements were stabilized and released without formatting support and with an understanding that the new Style Team and then subsequently the Rustfmt Team would later complete the requisite work required to incorporate formatting support.&lt;/p&gt;
&lt;h2&gt;&lt;a href&#x3D;&quot;#steps-taken&quot; aria-hidden&#x3D;&quot;true&quot; class&#x3D;&quot;anchor&quot; id&#x3D;&quot;steps-taken&quot;&gt;&lt;/a&gt;Steps Taken&lt;/h2&gt;
&lt;p&gt;A number of steps have been taken to improve matters in this space. This includes steps to address the aforementioned issues and deal with some of the &amp;quot;style debt&amp;quot; that accrued over the years in the absence of a Style Team, and also to establish new processes and mechanisms to bring about other formatting/styling improvements.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://rust-lang.github.io/rfcs/3309-style-team.html&quot;&gt;Launched a new, permanent Style Team&lt;/a&gt; that&#x27;s responsible for the Style Guide.&lt;/li&gt;
&lt;li&gt;Established a mechanism to evolve the default style while still maintaining stability guarantees (&lt;a href&#x3D;&quot;https://rust-lang.github.io/rfcs/3338-style-evolution.html&quot;&gt;RFC 3338&lt;/a&gt;).&lt;/li&gt;
&lt;li&gt;Developed a &lt;a href&#x3D;&quot;https://github.com/rust-lang/style-team/blob/468570a02856a6bbe3994164e1a16a13b56b5cf4/nightly-style-procedure.md&quot;&gt;nightly-syntax-policy&lt;/a&gt; that provides clarity around style rules for unstable/nightly-only syntax, and enables Rustfmt to provide earlier support for such syntax.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Furthermore, the Style Team is also continuing to diligently work through the backlog of those &amp;quot;style debt&amp;quot; items, and the Rustfmt team is in turn actively working on respective formatting implementation. The Rustfmt team is also focused on growing the team in order to improve contributor and review capacity.&lt;/p&gt;
&lt;h2&gt;&lt;a href&#x3D;&quot;#conclusion&quot; aria-hidden&#x3D;&quot;true&quot; class&#x3D;&quot;anchor&quot; id&#x3D;&quot;conclusion&quot;&gt;&lt;/a&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;We know that many have wanted let-else formatting support for a while, and we&#x27;re sorry it&#x27;s taken this long. We also recognize that Rustfmt now starting to format let-else statements may cause some formatting churn, and that&#x27;s a highly undesirable scenario we strive to avoid.&lt;/p&gt;
&lt;p&gt;However, we believe the benefits of delivering let-else formatting support outweigh those drawbacks. While it&#x27;s possible there may be another future case or two where we have to do something similar as we work through the style backlog, we&#x27;re hopeful that over time this new team and these new processes will reduce (or eliminate) the possibility of a recurrence by addressing the historical problems that played such an outsize role in the let-else delay, and also bring about various other improvements.&lt;/p&gt;
&lt;p&gt;Both the Style and Rustfmt teams hang out on Zulip so if you&#x27;d like to get more involved or have any questions please drop by on &lt;a href&#x3D;&quot;https://rust-lang.zulipchat.com/#narrow/stream/346005-t-style&quot;&gt;T-Style&lt;/a&gt; and/or &lt;a href&#x3D;&quot;https://rust-lang.zulipchat.com/#narrow/stream/357797-t-rustfmt&quot;&gt;T-Rustfmt&lt;/a&gt;.&lt;/p&gt;
</content>

        <author>
            <name>Caleb Cartwright</name>
        </author>
    </entry>
    
    <entry>
        <title>Improved API tokens for crates.io</title>
        <link rel="alternate" href="https://blog.rust-lang.org/2023/06/23/improved-api-tokens-for-crates-io.html" type="text/html" title="Improved API tokens for crates.io" />
        <published>2023-06-23T00:00:00+00:00</published>
        <updated>2023-06-23T00:00:00+00:00</updated>
        <id>https://blog.rust-lang.org/2023/06/23/improved-api-tokens-for-crates-io.html</id>
        <content type="html" xml:base="https://blog.rust-lang.org/2023/06/23/improved-api-tokens-for-crates-io.html">&lt;p&gt;If you recently generated a new API token on crates.io, you might have noticed
our new API token creation page and some of the new features it now supports.&lt;/p&gt;
&lt;p&gt;Previously, when clicking the &amp;quot;New Token&amp;quot; button on &lt;a href&#x3D;&quot;https://crates.io/settings/tokens&quot;&gt;https://crates.io/settings/tokens&lt;/a&gt;,
you were only provided with the option to choose a token name, without any
additional choices. We knew that we wanted to offer our users more flexibility,
but in the previous user interface that would have been difficult, so our first
step was to build a proper &amp;quot;New API Token&amp;quot; page.&lt;/p&gt;
&lt;p&gt;Our roadmap included two essential features known as &amp;quot;token scopes&amp;quot;. The first
of them allows you to restrict API tokens to specific operations. For instance,
you can configure a token to solely enable the publishing of new versions for
existing crates, while disallowing the creation of new crates. The second one
offers an optional restriction where tokens can be limited to only work for
specific crate names. If you want to read more about how these features
were planned and implemented you can take a look at our corresponding
&lt;a href&#x3D;&quot;https://github.com/rust-lang/crates.io/issues/5443&quot;&gt;tracking issue&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;To further enhance the security of crates.io API tokens, we prioritized the
implementation of expiration dates. Since we had already touched most of the
token-related code this was relatively straight-forward. We are delighted to
announce that our &amp;quot;New API Token&amp;quot; page now supports endpoint scopes, crate
scopes and expiration dates:&lt;/p&gt;
&lt;p&gt;&lt;img src&#x3D;&quot;/images/2023-06-23-improved-api-tokens-for-crates-io/new-api-token-page.png&quot; alt&#x3D;&quot;Screenshot of the &amp;quot;New API Token&amp;quot; page&quot; /&gt;&lt;/p&gt;
&lt;p&gt;Similar to the API token creation process on github.com, you can choose to not
have any expiration date, use one of the presets, or even choose a custom
expiration date to suit your requirements.&lt;/p&gt;
&lt;p&gt;If you come across any issues or have questions, feel free to reach out to us on
&lt;a href&#x3D;&quot;https://rust-lang.zulipchat.com/#narrow/stream/318791-t-crates-io/topic/token.20scopes&quot;&gt;Zulip&lt;/a&gt;
or open an issue on &lt;a href&#x3D;&quot;https://github.com/rust-lang/crates.io/issues/new/choose&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Lastly, we, the crates.io team, would like to express our gratitude to the
&lt;a href&#x3D;&quot;https://openssf.org/community/alpha-omega/&quot;&gt;OpenSSF&#x27;s Alpha-Omega Initiative&lt;/a&gt;
and &lt;a href&#x3D;&quot;https://jfrog.com/blog/jfrog-joins-rust-foundation-as-platinum-member/&quot;&gt;JFrog&lt;/a&gt;
for their contributions to the &lt;a href&#x3D;&quot;https://rustfoundation.org&quot;&gt;Rust Foundation&lt;/a&gt;
security initiative. Their support has been instrumental in enabling us to
implement these features and undertake extensive security-related work on the
crates.io codebase over the past few months.&lt;/p&gt;
</content>

        <author>
            <name>Tobias Bieniek</name>
        </author>
    </entry>
    
    <entry>
        <title>Introducing the Rust Leadership Council</title>
        <link rel="alternate" href="https://blog.rust-lang.org/2023/06/20/introducing-leadership-council.html" type="text/html" title="Introducing the Rust Leadership Council" />
        <published>2023-06-20T00:00:00+00:00</published>
        <updated>2023-06-20T00:00:00+00:00</updated>
        <id>https://blog.rust-lang.org/2023/06/20/introducing-leadership-council.html</id>
        <content type="html" xml:base="https://blog.rust-lang.org/2023/06/20/introducing-leadership-council.html">&lt;p&gt;As of today, &lt;a href&#x3D;&quot;https://github.com/rust-lang/rfcs/pull/3392&quot;&gt;RFC 3392&lt;/a&gt; has been merged, forming the new top level governance body of the Rust Project: the Leadership Council. The creation of this Council marks the end of both the Core Team and the interim Leadership Chat.&lt;/p&gt;
&lt;p&gt;The Council will assume responsibility for top-level governance concerns while most of the responsibilities of the Rust Project (such as maintenance of the compiler and core tooling, evolution of the language and standard libraries, administration of infrastructure, etc.) remain with the nine top level teams.&lt;/p&gt;
&lt;p&gt;Each of these top level teams, &lt;a href&#x3D;&quot;https://rust-lang.github.io/rfcs/3392-leadership-council.html#initial-list-of-top-level-teams&quot;&gt;as defined in the RFC&lt;/a&gt;, has chosen a representative who collectively form &lt;a href&#x3D;&quot;https://www.rust-lang.org/governance/teams/leadership-council&quot;&gt;the Council&lt;/a&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Compiler: Eric Holk&lt;/li&gt;
&lt;li&gt;Crates.io: Carol (Nichols || Goulding)&lt;/li&gt;
&lt;li&gt;Dev Tools: Eric Huss&lt;/li&gt;
&lt;li&gt;Infrastructure: Ryan Levick&lt;/li&gt;
&lt;li&gt;Language: Jack Huey&lt;/li&gt;
&lt;li&gt;Launching Pad&lt;sup class&#x3D;&quot;footnote-ref&quot;&gt;&lt;a href&#x3D;&quot;#fn1&quot; id&#x3D;&quot;fnref1&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;: Jonathan Pallant&lt;/li&gt;
&lt;li&gt;Library: Mara Bos&lt;/li&gt;
&lt;li&gt;Moderation: Khionu Sybiern&lt;/li&gt;
&lt;li&gt;Release: Mark Rousskov&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;First, we want to take a moment to thank the Core Team and interim Leadership Chat for the hard work they&#x27;ve put in over the years. Their efforts have been critical for the Rust Project. However, we do recognize that the governance of the Rust Project has had its shortcomings. We hope to build on the successes and improve upon the failures to ultimately lead to greater transparency and accountability.&lt;/p&gt;
&lt;p&gt;We know that there is a lot of work to do and we are eager to get started. In the coming weeks we will be establishing the basic infrastructure for the group, including creating a plan for regular meetings and a process for raising agenda items, setting up a team repository, and ultimately completing the transition from the former Rust leadership structures.&lt;/p&gt;
&lt;p&gt;We will post more once this bootstrapping process has been completed.&lt;/p&gt;
&lt;section class&#x3D;&quot;footnotes&quot;&gt;
&lt;ol&gt;
&lt;li id&#x3D;&quot;fn1&quot;&gt;
&lt;p&gt;The RFC defines the launching pad team as a temporary umbrella team to represent subteams that do not currently have a top-level team. &lt;a href&#x3D;&quot;#fnref1&quot; class&#x3D;&quot;footnote-backref&quot;&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</content>

        <author>
            <name>Leadership Council</name>
        </author>
    </entry>
    
    <entry>
        <title>Announcing Rust 1.70.0</title>
        <link rel="alternate" href="https://blog.rust-lang.org/2023/06/01/Rust-1.70.0.html" type="text/html" title="Announcing Rust 1.70.0" />
        <published>2023-06-01T00:00:00+00:00</published>
        <updated>2023-06-01T00:00:00+00:00</updated>
        <id>https://blog.rust-lang.org/2023/06/01/Rust-1.70.0.html</id>
        <content type="html" xml:base="https://blog.rust-lang.org/2023/06/01/Rust-1.70.0.html">&lt;p&gt;The Rust team is happy to announce a new version of Rust, 1.70.0. Rust is a programming language empowering everyone to build reliable and efficient software.&lt;/p&gt;
&lt;p&gt;If you have a previous version of Rust installed via rustup, you can get 1.70.0 with:&lt;/p&gt;
&lt;pre&gt;&lt;code class&#x3D;&quot;language-console&quot;&gt;rustup update stable
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If you don&#x27;t have it already, you can &lt;a href&#x3D;&quot;https://www.rust-lang.org/install.html&quot;&gt;get &lt;code&gt;rustup&lt;/code&gt;&lt;/a&gt; from the appropriate page on our website, and check out the &lt;a href&#x3D;&quot;https://github.com/rust-lang/rust/releases/tag/1.70.0&quot;&gt;detailed release notes for 1.70.0&lt;/a&gt; on GitHub.&lt;/p&gt;
&lt;p&gt;If you&#x27;d like to help us out by testing future releases, you might consider updating locally to use the beta channel (&lt;code&gt;rustup default beta&lt;/code&gt;) or the nightly channel (&lt;code&gt;rustup default nightly&lt;/code&gt;). Please &lt;a href&#x3D;&quot;https://github.com/rust-lang/rust/issues/new/choose&quot;&gt;report&lt;/a&gt; any bugs you might come across!&lt;/p&gt;
&lt;h2&gt;&lt;a href&#x3D;&quot;#whats-in-1700-stable&quot; aria-hidden&#x3D;&quot;true&quot; class&#x3D;&quot;anchor&quot; id&#x3D;&quot;whats-in-1700-stable&quot;&gt;&lt;/a&gt;What&#x27;s in 1.70.0 stable&lt;/h2&gt;
&lt;h3&gt;&lt;a href&#x3D;&quot;#sparse-by-default-for-cratesio&quot; aria-hidden&#x3D;&quot;true&quot; class&#x3D;&quot;anchor&quot; id&#x3D;&quot;sparse-by-default-for-cratesio&quot;&gt;&lt;/a&gt;Sparse by default for crates.io&lt;/h3&gt;
&lt;p&gt;Cargo&#x27;s &amp;quot;sparse&amp;quot; protocol is now enabled by default for reading the index from crates.io. This feature was previously stabilized with &lt;a href&#x3D;&quot;https://blog.rust-lang.org/2023/03/09/Rust-1.68.0.html#cargos-sparse-protocol&quot;&gt;Rust 1.68.0&lt;/a&gt;, but still required configuration to use that with crates.io. The announced plan was to make that the default in 1.70.0, and here it is!&lt;/p&gt;
&lt;p&gt;You should see substantially improved performance when fetching information from the crates.io index. Users behind a restrictive firewall will need to ensure that access to &lt;code&gt;https://index.crates.io&lt;/code&gt; is available. If for some reason you need to stay with the previous default of using the git index hosted by GitHub, the &lt;a href&#x3D;&quot;https://doc.rust-lang.org/cargo/reference/config.html#registriescrates-ioprotocol&quot;&gt;&lt;code&gt;registries.crates-io.protocol&lt;/code&gt;&lt;/a&gt; config setting can be used to change the default.&lt;/p&gt;
&lt;p&gt;One side-effect to note about changing the access method is that this also changes the path to the crate cache, so dependencies will be downloaded anew. Once you have fully committed to using the sparse protocol, you may want to clear out the old &lt;code&gt;$CARGO_HOME/registry/*/github.com-*&lt;/code&gt; paths.&lt;/p&gt;
&lt;h3&gt;&lt;a href&#x3D;&quot;#oncecell-and-oncelock&quot; aria-hidden&#x3D;&quot;true&quot; class&#x3D;&quot;anchor&quot; id&#x3D;&quot;oncecell-and-oncelock&quot;&gt;&lt;/a&gt;&lt;code&gt;OnceCell&lt;/code&gt; and &lt;code&gt;OnceLock&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Two new types have been stabilized for one-time initialization of shared data, &lt;code&gt;OnceCell&lt;/code&gt; and its thread-safe counterpart &lt;code&gt;OnceLock&lt;/code&gt;. These can be used anywhere that immediate construction is not wanted, and perhaps not even possible like non-&lt;code&gt;const&lt;/code&gt; data in global variables.&lt;/p&gt;
&lt;pre&gt;&lt;code class&#x3D;&quot;language-rust&quot;&gt;use std::sync::OnceLock;

static WINNER: OnceLock&amp;lt;&amp;amp;str&amp;gt; &#x3D; OnceLock::new();

fn main() {
    let winner &#x3D; std::thread::scope(|s| {
        s.spawn(|| WINNER.set(&amp;quot;thread&amp;quot;));

        std::thread::yield_now(); // give them a chance...

        WINNER.get_or_init(|| &amp;quot;main&amp;quot;)
    });

    println!(&amp;quot;{winner} wins!&amp;quot;);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Crates such as &lt;code&gt;lazy_static&lt;/code&gt; and &lt;code&gt;once_cell&lt;/code&gt; have filled this need in the past, but now these building blocks are part of the standard library, ported from &lt;code&gt;once_cell&lt;/code&gt;&#x27;s &lt;code&gt;unsync&lt;/code&gt; and &lt;code&gt;sync&lt;/code&gt; modules. There are still more methods that may be stabilized in the future, as well as companion &lt;code&gt;LazyCell&lt;/code&gt; and &lt;code&gt;LazyLock&lt;/code&gt; types that store their initializing function, but this first step in stabilization should already cover many use cases.&lt;/p&gt;
&lt;h3&gt;&lt;a href&#x3D;&quot;#isterminal&quot; aria-hidden&#x3D;&quot;true&quot; class&#x3D;&quot;anchor&quot; id&#x3D;&quot;isterminal&quot;&gt;&lt;/a&gt;&lt;code&gt;IsTerminal&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;This newly-stabilized trait has a single method, &lt;code&gt;is_terminal&lt;/code&gt;, to determine if a given file descriptor or handle represents a terminal or TTY. This is another case of standardizing functionality that existed in external crates, like &lt;code&gt;atty&lt;/code&gt; and &lt;code&gt;is-terminal&lt;/code&gt;, using the C library &lt;code&gt;isatty&lt;/code&gt; function on Unix targets and similar functionality elsewhere. A common use case is for programs to distinguish between running in scripts or interactive modes, like presenting colors or even a full TUI when interactive.&lt;/p&gt;
&lt;pre&gt;&lt;code class&#x3D;&quot;language-rust&quot;&gt;use std::io::{stdout, IsTerminal};

fn main() {
    let use_color &#x3D; stdout().is_terminal();
    // if so, add color codes to program output...
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;&lt;a href&#x3D;&quot;#named-levels-of-debug-information&quot; aria-hidden&#x3D;&quot;true&quot; class&#x3D;&quot;anchor&quot; id&#x3D;&quot;named-levels-of-debug-information&quot;&gt;&lt;/a&gt;Named levels of debug information&lt;/h3&gt;
&lt;p&gt;The &lt;code&gt;-Cdebuginfo&lt;/code&gt; compiler option has previously only supported numbers 0..&#x3D;2 for increasing amounts of debugging information, where Cargo defaults to 2 in dev and test profiles and 0 in release and bench profiles. These debug levels can now be set by name: &amp;quot;none&amp;quot; (0), &amp;quot;limited&amp;quot; (1), and &amp;quot;full&amp;quot; (2), as well as two new levels, &amp;quot;line-directives-only&amp;quot; and &amp;quot;line-tables-only&amp;quot;.&lt;/p&gt;
&lt;p&gt;The Cargo and rustc documentation both called level 1 &amp;quot;line tables only&amp;quot; before, but it was more than that with information about all functions, just not types and variables. That level is now called &amp;quot;limited&amp;quot;, and the new &amp;quot;line-tables-only&amp;quot; level is further reduced to the minimum needed for backtraces with filenames and line numbers. This may eventually become the level used for &lt;code&gt;-Cdebuginfo&#x3D;1&lt;/code&gt;. The other &lt;code&gt;line-directives-only&lt;/code&gt; level is intended for NVPTX profiling, and is otherwise not recommended.&lt;/p&gt;
&lt;p&gt;Note that these named options are not yet available to be used via &lt;code&gt;Cargo.toml&lt;/code&gt;. Support for that will be available in the next release 1.71.&lt;/p&gt;
&lt;h3&gt;&lt;a href&#x3D;&quot;#enforced-stability-in-the-test-cli&quot; aria-hidden&#x3D;&quot;true&quot; class&#x3D;&quot;anchor&quot; id&#x3D;&quot;enforced-stability-in-the-test-cli&quot;&gt;&lt;/a&gt;Enforced stability in the &lt;code&gt;test&lt;/code&gt; CLI&lt;/h3&gt;
&lt;p&gt;When &lt;code&gt;#[test]&lt;/code&gt; functions are compiled, the executable gets a command-line interface from the &lt;code&gt;test&lt;/code&gt; crate. This CLI has a number of options, including some that are not yet stabilized and require specifying &lt;code&gt;-Zunstable-options&lt;/code&gt; as well, like many other commands in the Rust toolchain. However, while that&#x27;s only intended to be allowed in nightly builds, that restriction wasn&#x27;t active in &lt;code&gt;test&lt;/code&gt; -- until now. Starting with 1.70.0, stable and beta builds of Rust will no longer allow unstable &lt;code&gt;test&lt;/code&gt; options, making them truly nightly-only as documented.&lt;/p&gt;
&lt;p&gt;There are known cases where unstable options may have been used without direct user knowledge, especially &lt;code&gt;--format json&lt;/code&gt; used in IntelliJ Rust and other IDE plugins. Those projects are already adjusting to this change, and the status of JSON output can be followed in its &lt;a href&#x3D;&quot;https://github.com/rust-lang/rust/issues/49359&quot;&gt;tracking issue&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;&lt;a href&#x3D;&quot;#stabilized-apis&quot; aria-hidden&#x3D;&quot;true&quot; class&#x3D;&quot;anchor&quot; id&#x3D;&quot;stabilized-apis&quot;&gt;&lt;/a&gt;Stabilized APIs&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://doc.rust-lang.org/stable/std/num/struct.NonZeroI8.html#associatedconstant.MIN&quot;&gt;&lt;code&gt;NonZero*::MIN/MAX&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://doc.rust-lang.org/stable/std/collections/struct.BinaryHeap.html#method.retain&quot;&gt;&lt;code&gt;BinaryHeap::retain&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://doc.rust-lang.org/stable/std/collections/binary_heap/struct.IntoIter.html&quot;&gt;&lt;code&gt;Default for std::collections::binary_heap::IntoIter&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://doc.rust-lang.org/stable/std/collections/btree_map/struct.IntoIter.html&quot;&gt;&lt;code&gt;Default for std::collections::btree_map::{IntoIter, Iter, IterMut}&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://doc.rust-lang.org/stable/std/collections/btree_map/struct.IntoKeys.html&quot;&gt;&lt;code&gt;Default for std::collections::btree_map::{IntoKeys, Keys}&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://doc.rust-lang.org/stable/std/collections/btree_map/struct.IntoKeys.html&quot;&gt;&lt;code&gt;Default for std::collections::btree_map::{IntoValues, Values}&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://doc.rust-lang.org/stable/std/collections/btree_map/struct.Range.html&quot;&gt;&lt;code&gt;Default for std::collections::btree_map::Range&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://doc.rust-lang.org/stable/std/collections/btree_set/struct.IntoIter.html&quot;&gt;&lt;code&gt;Default for std::collections::btree_set::{IntoIter, Iter}&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://doc.rust-lang.org/stable/std/collections/btree_set/struct.Range.html&quot;&gt;&lt;code&gt;Default for std::collections::btree_set::Range&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://doc.rust-lang.org/stable/alloc/collections/linked_list/struct.IntoIter.html&quot;&gt;&lt;code&gt;Default for std::collections::linked_list::{IntoIter, Iter, IterMut}&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://doc.rust-lang.org/stable/alloc/vec/struct.IntoIter.html#impl-Default-for-IntoIter%3CT,+A%3E&quot;&gt;&lt;code&gt;Default for std::vec::IntoIter&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://doc.rust-lang.org/stable/std/iter/struct.Chain.html&quot;&gt;&lt;code&gt;Default for std::iter::Chain&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://doc.rust-lang.org/stable/std/iter/struct.Cloned.html&quot;&gt;&lt;code&gt;Default for std::iter::Cloned&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://doc.rust-lang.org/stable/std/iter/struct.Copied.html&quot;&gt;&lt;code&gt;Default for std::iter::Copied&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://doc.rust-lang.org/stable/std/iter/struct.Enumerate.html&quot;&gt;&lt;code&gt;Default for std::iter::Enumerate&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://doc.rust-lang.org/stable/std/iter/struct.Flatten.html&quot;&gt;&lt;code&gt;Default for std::iter::Flatten&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://doc.rust-lang.org/stable/std/iter/struct.Fuse.html&quot;&gt;&lt;code&gt;Default for std::iter::Fuse&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://doc.rust-lang.org/stable/std/iter/struct.Rev.html&quot;&gt;&lt;code&gt;Default for std::iter::Rev&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://doc.rust-lang.org/stable/std/slice/struct.Iter.html&quot;&gt;&lt;code&gt;Default for std::slice::Iter&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://doc.rust-lang.org/stable/std/slice/struct.IterMut.html&quot;&gt;&lt;code&gt;Default for std::slice::IterMut&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://doc.rust-lang.org/stable/alloc/rc/struct.Rc.html#method.into_inner&quot;&gt;&lt;code&gt;Rc::into_inner&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://doc.rust-lang.org/stable/alloc/sync/struct.Arc.html#method.into_inner&quot;&gt;&lt;code&gt;Arc::into_inner&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://doc.rust-lang.org/stable/std/cell/struct.OnceCell.html&quot;&gt;&lt;code&gt;std::cell::OnceCell&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://doc.rust-lang.org/stable/std/option/enum.Option.html#method.is_some_and&quot;&gt;&lt;code&gt;Option::is_some_and&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://doc.rust-lang.org/stable/std/ptr/struct.NonNull.html#method.slice_from_raw_parts&quot;&gt;&lt;code&gt;NonNull::slice_from_raw_parts&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://doc.rust-lang.org/stable/std/result/enum.Result.html#method.is_ok_and&quot;&gt;&lt;code&gt;Result::is_ok_and&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://doc.rust-lang.org/stable/std/result/enum.Result.html#method.is_err_and&quot;&gt;&lt;code&gt;Result::is_err_and&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://doc.rust-lang.org/stable/std/sync/atomic/struct.AtomicU8.html#method.as_ptr&quot;&gt;&lt;code&gt;std::sync::atomic::Atomic*::as_ptr&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://doc.rust-lang.org/stable/std/io/trait.IsTerminal.html&quot;&gt;&lt;code&gt;std::io::IsTerminal&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://doc.rust-lang.org/stable/std/os/linux/net/trait.SocketAddrExt.html&quot;&gt;&lt;code&gt;std::os::linux::net::SocketAddrExt&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://doc.rust-lang.org/stable/std/os/unix/net/struct.UnixDatagram.html#method.bind_addr&quot;&gt;&lt;code&gt;std::os::unix::net::UnixDatagram::bind_addr&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://doc.rust-lang.org/stable/std/os/unix/net/struct.UnixDatagram.html#method.connect_addr&quot;&gt;&lt;code&gt;std::os::unix::net::UnixDatagram::connect_addr&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://doc.rust-lang.org/stable/std/os/unix/net/struct.UnixDatagram.html#method.send_to_addr&quot;&gt;&lt;code&gt;std::os::unix::net::UnixDatagram::send_to_addr&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://doc.rust-lang.org/stable/std/os/unix/net/struct.UnixListener.html#method.bind_addr&quot;&gt;&lt;code&gt;std::os::unix::net::UnixListener::bind_addr&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://doc.rust-lang.org/stable/std/path/struct.Path.html#method.as_mut_os_str&quot;&gt;&lt;code&gt;std::path::Path::as_mut_os_str&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://doc.rust-lang.org/stable/std/sync/struct.OnceLock.html&quot;&gt;&lt;code&gt;std::sync::OnceLock&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a href&#x3D;&quot;#other-changes&quot; aria-hidden&#x3D;&quot;true&quot; class&#x3D;&quot;anchor&quot; id&#x3D;&quot;other-changes&quot;&gt;&lt;/a&gt;Other changes&lt;/h3&gt;
&lt;p&gt;Check out everything that changed in &lt;a href&#x3D;&quot;https://github.com/rust-lang/rust/releases/tag/1.70.0&quot;&gt;Rust&lt;/a&gt;, &lt;a href&#x3D;&quot;https://github.com/rust-lang/cargo/blob/master/CHANGELOG.md#cargo-170-2023-06-01&quot;&gt;Cargo&lt;/a&gt;, and &lt;a href&#x3D;&quot;https://github.com/rust-lang/rust-clippy/blob/master/CHANGELOG.md#rust-170&quot;&gt;Clippy&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;&lt;a href&#x3D;&quot;#contributors-to-1700&quot; aria-hidden&#x3D;&quot;true&quot; class&#x3D;&quot;anchor&quot; id&#x3D;&quot;contributors-to-1700&quot;&gt;&lt;/a&gt;Contributors to 1.70.0&lt;/h2&gt;
&lt;p&gt;Many people came together to create Rust 1.70.0. We couldn&#x27;t have done it without all of you. &lt;a href&#x3D;&quot;https://thanks.rust-lang.org/rust/1.70.0/&quot;&gt;Thanks!&lt;/a&gt;&lt;/p&gt;
</content>

        <author>
            <name>The Rust Release Team</name>
        </author>
    </entry>
    
    <entry>
        <title>On the RustConf keynote</title>
        <link rel="alternate" href="https://blog.rust-lang.org/2023/05/29/RustConf.html" type="text/html" title="On the RustConf keynote" />
        <published>2023-05-29T00:00:00+00:00</published>
        <updated>2023-05-29T00:00:00+00:00</updated>
        <id>https://blog.rust-lang.org/2023/05/29/RustConf.html</id>
        <content type="html" xml:base="https://blog.rust-lang.org/2023/05/29/RustConf.html">&lt;p&gt;On May 26th 2023, &lt;a href&#x3D;&quot;https://thephd.dev/about/&quot;&gt;JeanHeyd Meneide&lt;/a&gt; announced they &lt;a href&#x3D;&quot;https://thephd.dev/i-am-no-longer-speaking-at-rustconf-2023&quot;&gt;would not speak at RustConf 2023 anymore&lt;/a&gt;. They were invited to give a keynote at the conference, only to be told two weeks later the keynote would be demoted to a normal talk, due to a decision made within the Rust project leadership.&lt;/p&gt;
&lt;p&gt;That decision was not right, and first off we want to publicly apologize for the harm we caused. We failed you JeanHeyd. The idea of downgrading a talk after the invitation was insulting, and nobody in leadership should have been willing to entertain it.&lt;/p&gt;
&lt;p&gt;Everyone in leadership chat is still working to fully figure out everything that went wrong and how we can prevent all of this from happening again. That work is not finished yet. Still, we want to share some steps we are taking to reduce the risk of something like this from happening again.&lt;/p&gt;
&lt;p&gt;The primary causes of the failure were the decision-making and communication processes of leadership chat. Leadership chat has been the &lt;a href&#x3D;&quot;https://blog.rust-lang.org/inside-rust/2022/10/06/governance-update.html&quot;&gt;top-level governance structure created after the previous Moderation Team resigned in late 2021&lt;/a&gt;. It’s made of all leads of top-level teams, all members of the Core Team, all project directors on the Rust Foundation board, and all current moderators. This leadership chat was meant as a short-term solution and lacked clear rules and processes for decision making and communication. This left a lot of room for misunderstandings about when a decision had actually been made and when individuals were speaking for the project versus themselves.&lt;/p&gt;
&lt;p&gt;In this post we focus on the organizational and process failure, leaving room for individuals to publicly acknowledge their own role. Nonetheless, formal rules or governance processes should not be required to identify that demoting JeanHeyd’s keynote was the wrong thing to do. The fact is that several individuals exercised poor judgment and poor communication. Recognizing their outsized role in the situation, those individuals have opted to step back from top-level governance roles, including leadership chat and the upcoming leadership council.&lt;/p&gt;
&lt;p&gt;Organizationally, within leadership chat we will enforce a strict consensus rule for all decision making, so that there is no longer ambiguity of whether something is an individual opinion or a group decision. We are going to launch the new governance council as soon as possible. We’ll assist the remaining teams to select their representatives in a timely manner, so that the new governance council can start and the current leadership chat can disband.&lt;/p&gt;
&lt;p&gt;We wish to close the post by reiterating our apology to JeanHeyd, but also the wider Rust community. You deserved better than you got from us.&lt;/p&gt;
&lt;p&gt;-- The &lt;a href&#x3D;&quot;https://github.com/rust-lang/team/blob/2cea9916903fffafbfae6c78882d0924ce3c3a8a/teams/interim-leadership-chat.toml#L8-L25&quot;&gt;members of leadership chat&lt;/a&gt;&lt;/p&gt;
</content>

        <author>
            <name>leadership chat membership</name>
        </author>
    </entry>
    
    <entry>
        <title>Updating Rust&#x27;s Linux musl targets</title>
        <link rel="alternate" href="https://blog.rust-lang.org/2023/05/09/Updating-musl-targets.html" type="text/html" title="Updating Rust&#x27;s Linux musl targets" />
        <published>2023-05-09T00:00:00+00:00</published>
        <updated>2023-05-09T00:00:00+00:00</updated>
        <id>https://blog.rust-lang.org/2023/05/09/Updating-musl-targets.html</id>
        <content type="html" xml:base="https://blog.rust-lang.org/2023/05/09/Updating-musl-targets.html">&lt;p&gt;Beginning with Rust 1.71 (slated for stable release on 2023-07-13), the various &lt;code&gt;*-linux-musl&lt;/code&gt; targets will &lt;a href&#x3D;&quot;https://github.com/rust-lang/rust/pull/107129&quot;&gt;ship&lt;/a&gt; with musl 1.2.3.
These targets currently use musl 1.1.24.
While musl 1.2.3 introduces some &lt;a href&#x3D;&quot;https://musl.libc.org/releases.html&quot;&gt;new features&lt;/a&gt;, most notably &lt;a href&#x3D;&quot;https://musl.libc.org/time64.html&quot;&gt;64-bit time&lt;/a&gt; on all platforms, it is ABI compatible with earlier musl versions.&lt;/p&gt;
&lt;p&gt;As such, this change is unlikely to affect you.&lt;/p&gt;
&lt;h1&gt;&lt;a href&#x3D;&quot;#updated-targets&quot; aria-hidden&#x3D;&quot;true&quot; class&#x3D;&quot;anchor&quot; id&#x3D;&quot;updated-targets&quot;&gt;&lt;/a&gt;Updated targets&lt;/h1&gt;
&lt;p&gt;The following targets will be updated:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Target&lt;/th&gt;
&lt;th&gt;&lt;a href&#x3D;&quot;https://doc.rust-lang.org/nightly/rustc/platform-support.html&quot;&gt;Support Tier&lt;/a&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;aarch64-unknown-linux-musl&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Tier 2 with Host Tools&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;x86_64-unknown-linux-musl&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Tier 2 with Host Tools&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;arm-unknown-linux-musleabi&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Tier 2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;arm-unknown-linux-musleabihf&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Tier 2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;armv5te-unknown-linux-musleabi&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Tier 2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;armv7-unknown-linux-musleabi&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Tier 2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;armv7-unknown-linux-musleabihf&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Tier 2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;i586-unknown-linux-musl&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Tier 2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;i686-unknown-linux-musl&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Tier 2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;mips-unknown-linux-musl&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Tier 2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;mips64-unknown-linux-muslabi64&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Tier 2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;mips64el-unknown-linux-muslabi64&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Tier 2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;mipsel-unknown-linux-musl&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Tier 2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;hexagon-unknown-linux-musl&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Tier 3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;mips64-openwrt-linux-musl&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Tier 3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;powerpc-unknown-linux-musl&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Tier 3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;powerpc64-unknown-linux-musl&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Tier 3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;powerpc64le-unknown-linux-musl&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Tier 3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;riscv32gc-unknown-linux-musl&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Tier 3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;riscv64gc-unknown-linux-musl&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Tier 3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;s390x-unknown-linux-musl&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Tier 3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;thumbv7neon-unknown-linux-musleabihf&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Tier 3&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Note: musl 1.2.3 does not raise the minimum required Linux kernel version for any target.&lt;/p&gt;
&lt;h1&gt;&lt;a href&#x3D;&quot;#will-64-bit-time-break-the-libc-crate-on-32-bit-targets&quot; aria-hidden&#x3D;&quot;true&quot; class&#x3D;&quot;anchor&quot; id&#x3D;&quot;will-64-bit-time-break-the-libc-crate-on-32-bit-targets&quot;&gt;&lt;/a&gt;Will 64-bit time break the &lt;code&gt;libc&lt;/code&gt; crate on 32-bit targets?&lt;/h1&gt;
&lt;p&gt;No, the musl project made this change carefully preserving ABI compatibility.
The &lt;code&gt;libc&lt;/code&gt; crate will continue to function correctly without modification.&lt;/p&gt;
&lt;p&gt;A future version of the &lt;code&gt;libc&lt;/code&gt; crate will &lt;a href&#x3D;&quot;https://github.com/rust-lang/libc/pull/3068&quot;&gt;update&lt;/a&gt; the definitions of time-related structures and functions to be 64-bit on all musl targets however this is blocked on the musl targets themselves first being updated.
At present, there is no anticipated date when this change will take place and care will be taken to help the Rust ecosystem transition successfully to the updated time-related definitions.&lt;/p&gt;
</content>

        <author>
            <name>Wesley Wiser</name>
        </author>
    </entry>
    
    <entry>
        <title>Announcing Rustup 1.26.0</title>
        <link rel="alternate" href="https://blog.rust-lang.org/2023/04/25/Rustup-1.26.0.html" type="text/html" title="Announcing Rustup 1.26.0" />
        <published>2023-04-25T00:00:00+00:00</published>
        <updated>2023-04-25T00:00:00+00:00</updated>
        <id>https://blog.rust-lang.org/2023/04/25/Rustup-1.26.0.html</id>
        <content type="html" xml:base="https://blog.rust-lang.org/2023/04/25/Rustup-1.26.0.html">&lt;p&gt;The rustup working group is happy to announce the release of rustup version 1.26.0. &lt;a href&#x3D;&quot;https://rustup.rs&quot;&gt;Rustup&lt;/a&gt; is the recommended tool to install &lt;a href&#x3D;&quot;https://www.rust-lang.org&quot;&gt;Rust&lt;/a&gt;, a programming language that is empowering everyone to build reliable and efficient software.&lt;/p&gt;
&lt;p&gt;If you have a previous version of rustup installed, getting rustup 1.26.0 is as easy as stopping any programs which may be using Rustup (e.g. closing your IDE) and running:&lt;/p&gt;
&lt;pre&gt;&lt;code class&#x3D;&quot;language-console&quot;&gt;rustup self update
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Rustup will also automatically update itself at the end of a normal toolchain update:&lt;/p&gt;
&lt;pre&gt;&lt;code class&#x3D;&quot;language-console&quot;&gt;rustup update
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If you don&#x27;t have it already, you can &lt;a href&#x3D;&quot;https://rustup.rs&quot;&gt;get rustup&lt;/a&gt; from the appropriate page on our website.&lt;/p&gt;
&lt;h2&gt;&lt;a href&#x3D;&quot;#whats-new-in-rustup-1260&quot; aria-hidden&#x3D;&quot;true&quot; class&#x3D;&quot;anchor&quot; id&#x3D;&quot;whats-new-in-rustup-1260&quot;&gt;&lt;/a&gt;What&#x27;s new in rustup 1.26.0&lt;/h2&gt;
&lt;p&gt;This version of Rustup involves a significant number of internal cleanups, both in terms
of the Rustup code and its tests. In addition to a lot of work on the codebase
itself, due to the length of time since the last release this one has a record number
of contributors and we thank you all for your efforts and time.&lt;/p&gt;
&lt;p&gt;The headlines for this release are:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Add rust-analyzer as a proxy of rustup. Now you can call rust-analyzer and it will be proxied to the rust-analyzer component for the current toolchain.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Bump the clap dependency from 2.x to 3.x. It&#x27;s a major version bump, so there are some help text changes, but the command line interface is unchanged.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Remove experimental GPG signature validation and the rustup show keys command. Due to its experimental status, validating the integrity of downloaded binaries did not rely on it, and there was no option to abort the installation if a signature mismatch happened. Multiple problems with its implementation were discovered in the recent months, which led to the decision to remove the experimental code. The team is working on the design of a new signature validation scheme, which will be implemented in the future.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Full details are available in the &lt;a href&#x3D;&quot;https://github.com/rust-lang/rustup/blob/stable/CHANGELOG.md&quot;&gt;changelog&lt;/a&gt;!&lt;/p&gt;
&lt;p&gt;Rustup&#x27;s documentation is also available in &lt;a href&#x3D;&quot;https://rust-lang.github.io/rustup/&quot;&gt;the rustup book&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;&lt;a href&#x3D;&quot;#thanks&quot; aria-hidden&#x3D;&quot;true&quot; class&#x3D;&quot;anchor&quot; id&#x3D;&quot;thanks&quot;&gt;&lt;/a&gt;Thanks&lt;/h2&gt;
&lt;p&gt;Thanks again to all the contributors who made rustup 1.26.0 possible!&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Daniel Silverstone (kinnison)&lt;/li&gt;
&lt;li&gt;Sabrina Jewson (SabrinaJewson)&lt;/li&gt;
&lt;li&gt;Robert Collins (rbtcollins)&lt;/li&gt;
&lt;li&gt;chansuke (chansuke)&lt;/li&gt;
&lt;li&gt;Shamil (shamilsan)&lt;/li&gt;
&lt;li&gt;Oli Lalonde (olalonde)&lt;/li&gt;
&lt;li&gt;二手掉包工程师 (hi-rustin)&lt;/li&gt;
&lt;li&gt;Eric Huss (ehuss)&lt;/li&gt;
&lt;li&gt;J Balint BIRO (jbalintbiro)&lt;/li&gt;
&lt;li&gt;Easton Pillay (jedieaston)&lt;/li&gt;
&lt;li&gt;zhaixiaojuan (zhaixiaojuan)&lt;/li&gt;
&lt;li&gt;Chris Denton (ChrisDenton)&lt;/li&gt;
&lt;li&gt;Martin Geisler (mgeisler)&lt;/li&gt;
&lt;li&gt;Lucio Franco (LucioFranco)&lt;/li&gt;
&lt;li&gt;Nicholas Bishop (nicholasbishop)&lt;/li&gt;
&lt;li&gt;SADIK KUZU (sadikkuzu)&lt;/li&gt;
&lt;li&gt;darkyshiny (darkyshiny)&lt;/li&gt;
&lt;li&gt;René Dudfield (illume)&lt;/li&gt;
&lt;li&gt;Noritada Kobayashi (noritada)&lt;/li&gt;
&lt;li&gt;Mohammad AlSaleh (MoSal)&lt;/li&gt;
&lt;li&gt;Dustin Martin (dmartin)&lt;/li&gt;
&lt;li&gt;Ville Skyttä (scop)&lt;/li&gt;
&lt;li&gt;Tshepang Mbambo (tshepang)&lt;/li&gt;
&lt;li&gt;Illia Bobyr (ilya-bobyr)&lt;/li&gt;
&lt;li&gt;Vincent Rischmann (vrischmann)&lt;/li&gt;
&lt;li&gt;Alexander (Alovchin91)&lt;/li&gt;
&lt;li&gt;Daniel Brotsky (brotskydotcom)&lt;/li&gt;
&lt;li&gt;zohnannor (zohnannor)&lt;/li&gt;
&lt;li&gt;Joshua Nelson (jyn514)&lt;/li&gt;
&lt;li&gt;Prikshit Gautam (gautamprikshit1)&lt;/li&gt;
&lt;li&gt;Dylan Thacker-Smith (dylanahsmith)&lt;/li&gt;
&lt;li&gt;Jan David (jdno)&lt;/li&gt;
&lt;li&gt;Aurora (lilith13666)&lt;/li&gt;
&lt;li&gt;Pietro Albini (pietroalbini)&lt;/li&gt;
&lt;li&gt;Renovate Bot (renovate-bot)&lt;/li&gt;
&lt;/ul&gt;
</content>

        <author>
            <name>The Rustup Working Group</name>
        </author>
    </entry>
    
    <entry>
        <title>Announcing Rust 1.69.0</title>
        <link rel="alternate" href="https://blog.rust-lang.org/2023/04/20/Rust-1.69.0.html" type="text/html" title="Announcing Rust 1.69.0" />
        <published>2023-04-20T00:00:00+00:00</published>
        <updated>2023-04-20T00:00:00+00:00</updated>
        <id>https://blog.rust-lang.org/2023/04/20/Rust-1.69.0.html</id>
        <content type="html" xml:base="https://blog.rust-lang.org/2023/04/20/Rust-1.69.0.html">&lt;p&gt;The Rust team is happy to announce a nice version of Rust, 1.69.0. Rust is a programming language empowering everyone to build reliable and efficient software.&lt;/p&gt;
&lt;p&gt;If you have a previous version of Rust installed via rustup, you can get 1.69.0 with:&lt;/p&gt;
&lt;pre&gt;&lt;code class&#x3D;&quot;language-console&quot;&gt;rustup update stable
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If you don&#x27;t have it already, you can &lt;a href&#x3D;&quot;https://www.rust-lang.org/install.html&quot;&gt;get &lt;code&gt;rustup&lt;/code&gt;&lt;/a&gt; from the appropriate page on our website, and check out the &lt;a href&#x3D;&quot;https://github.com/rust-lang/rust/blob/master/RELEASES.md#version-1690-2023-04-20&quot;&gt;detailed release notes for 1.69.0&lt;/a&gt; on GitHub.&lt;/p&gt;
&lt;p&gt;If you&#x27;d like to help us out by testing future releases, you might consider updating locally to use the beta channel (&lt;code&gt;rustup default beta&lt;/code&gt;) or the nightly channel (&lt;code&gt;rustup default nightly&lt;/code&gt;). Please &lt;a href&#x3D;&quot;https://github.com/rust-lang/rust/issues/new/choose&quot;&gt;report&lt;/a&gt; any bugs you might come across!&lt;/p&gt;
&lt;h2&gt;&lt;a href&#x3D;&quot;#whats-in-1690-stable&quot; aria-hidden&#x3D;&quot;true&quot; class&#x3D;&quot;anchor&quot; id&#x3D;&quot;whats-in-1690-stable&quot;&gt;&lt;/a&gt;What&#x27;s in 1.69.0 stable&lt;/h2&gt;
&lt;p&gt;Rust 1.69.0 introduces no major new features. However, it contains many small improvements, including over 3,000 commits from over 500 contributors.&lt;/p&gt;
&lt;h3&gt;&lt;a href&#x3D;&quot;#cargo-now-suggests-to-automatically-fix-some-warnings&quot; aria-hidden&#x3D;&quot;true&quot; class&#x3D;&quot;anchor&quot; id&#x3D;&quot;cargo-now-suggests-to-automatically-fix-some-warnings&quot;&gt;&lt;/a&gt;Cargo now suggests to automatically fix some warnings&lt;/h3&gt;
&lt;p&gt;Rust 1.29.0 added the &lt;code&gt;cargo fix&lt;/code&gt; subcommand to automatically fix some simple compiler warnings. Since then, the number of warnings that can be fixed automatically continues to steadily increase. In addition, support for automatically fixing some simple Clippy warnings has also been added.&lt;/p&gt;
&lt;p&gt;In order to draw more attention to these increased capabilities, Cargo will now suggest running &lt;code&gt;cargo fix&lt;/code&gt; or &lt;code&gt;cargo clippy --fix&lt;/code&gt; when it detects warnings that are automatically fixable:&lt;/p&gt;
&lt;pre&gt;&lt;code class&#x3D;&quot;language-text&quot;&gt;warning: unused import: &#x60;std::hash::Hash&#x60;
 --&amp;gt; src/main.rs:1:5
  |
1 | use std::hash::Hash;
  |     ^^^^^^^^^^^^^^^
  |
  &#x3D; note: &#x60;#[warn(unused_imports)]&#x60; on by default

warning: &#x60;foo&#x60; (bin &amp;quot;foo&amp;quot;) generated 1 warning (run &#x60;cargo fix --bin &amp;quot;foo&amp;quot;&#x60; to apply 1 suggestion)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Note that the full Cargo invocation shown above is only necessary if you want to precisely apply fixes to a single crate. If you want to apply fixes to all the default members of a workspace, then a simple &lt;code&gt;cargo fix&lt;/code&gt; (with no additional arguments) will suffice.&lt;/p&gt;
&lt;h3&gt;&lt;a href&#x3D;&quot;#debug-information-is-not-included-in-build-scripts-by-default-anymore&quot; aria-hidden&#x3D;&quot;true&quot; class&#x3D;&quot;anchor&quot; id&#x3D;&quot;debug-information-is-not-included-in-build-scripts-by-default-anymore&quot;&gt;&lt;/a&gt;Debug information is not included in build scripts by default anymore&lt;/h3&gt;
&lt;p&gt;To improve compilation speed, Cargo now avoids emitting debug information in build scripts by default. There will be no visible effect when build scripts execute successfully, but backtraces in build scripts will contain less information.&lt;/p&gt;
&lt;p&gt;If you want to debug a build script, you can add this snippet to your &lt;code&gt;Cargo.toml&lt;/code&gt; to emit debug information again:&lt;/p&gt;
&lt;pre&gt;&lt;code class&#x3D;&quot;language-toml&quot;&gt;[profile.dev.build-override]
debug &#x3D; true
[profile.release.build-override]
debug &#x3D; true
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;&lt;a href&#x3D;&quot;#stabilized-apis&quot; aria-hidden&#x3D;&quot;true&quot; class&#x3D;&quot;anchor&quot; id&#x3D;&quot;stabilized-apis&quot;&gt;&lt;/a&gt;Stabilized APIs&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://doc.rust-lang.org/stable/core/ffi/struct.CStr.html#method.from_bytes_until_nul&quot;&gt;&lt;code&gt;CStr::from_bytes_until_nul&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://doc.rust-lang.org/stable/core/ffi/struct.FromBytesUntilNulError.html&quot;&gt;&lt;code&gt;core::ffi::FromBytesUntilNulError&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;These APIs are now stable in const contexts:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://doc.rust-lang.org/stable/std/net/enum.SocketAddr.html#method.new&quot;&gt;&lt;code&gt;SocketAddr::new&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://doc.rust-lang.org/stable/std/net/enum.SocketAddr.html#method.ip&quot;&gt;&lt;code&gt;SocketAddr::ip&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://doc.rust-lang.org/stable/std/net/enum.SocketAddr.html#method.port&quot;&gt;&lt;code&gt;SocketAddr::port&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://doc.rust-lang.org/stable/std/net/enum.SocketAddr.html#method.is_ipv4&quot;&gt;&lt;code&gt;SocketAddr::is_ipv4&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://doc.rust-lang.org/stable/std/net/enum.SocketAddr.html#method.is_ipv6&quot;&gt;&lt;code&gt;SocketAddr::is_ipv6&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://doc.rust-lang.org/stable/std/net/struct.SocketAddrV4.html#method.new&quot;&gt;&lt;code&gt;SocketAddrV4::new&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://doc.rust-lang.org/stable/std/net/struct.SocketAddrV4.html#method.ip&quot;&gt;&lt;code&gt;SocketAddrV4::ip&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://doc.rust-lang.org/stable/std/net/struct.SocketAddrV4.html#method.port&quot;&gt;&lt;code&gt;SocketAddrV4::port&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://doc.rust-lang.org/stable/std/net/struct.SocketAddrV6.html#method.new&quot;&gt;&lt;code&gt;SocketAddrV6::new&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://doc.rust-lang.org/stable/std/net/struct.SocketAddrV6.html#method.ip&quot;&gt;&lt;code&gt;SocketAddrV6::ip&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://doc.rust-lang.org/stable/std/net/struct.SocketAddrV6.html#method.port&quot;&gt;&lt;code&gt;SocketAddrV6::port&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://doc.rust-lang.org/stable/std/net/struct.SocketAddrV6.html#method.flowinfo&quot;&gt;&lt;code&gt;SocketAddrV6::flowinfo&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://doc.rust-lang.org/stable/std/net/struct.SocketAddrV6.html#method.scope_id&quot;&gt;&lt;code&gt;SocketAddrV6::scope_id&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a href&#x3D;&quot;#other-changes&quot; aria-hidden&#x3D;&quot;true&quot; class&#x3D;&quot;anchor&quot; id&#x3D;&quot;other-changes&quot;&gt;&lt;/a&gt;Other changes&lt;/h3&gt;
&lt;p&gt;Check out everything that changed in &lt;a href&#x3D;&quot;https://github.com/rust-lang/rust/blob/stable/RELEASES.md#version-1690-2023-04-20&quot;&gt;Rust&lt;/a&gt;, &lt;a href&#x3D;&quot;https://github.com/rust-lang/cargo/blob/master/CHANGELOG.md#cargo-169-2023-04-20&quot;&gt;Cargo&lt;/a&gt;, and &lt;a href&#x3D;&quot;https://github.com/rust-lang/rust-clippy/blob/master/CHANGELOG.md#rust-169&quot;&gt;Clippy&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;&lt;a href&#x3D;&quot;#contributors-to-1690&quot; aria-hidden&#x3D;&quot;true&quot; class&#x3D;&quot;anchor&quot; id&#x3D;&quot;contributors-to-1690&quot;&gt;&lt;/a&gt;Contributors to 1.69.0&lt;/h2&gt;
&lt;p&gt;Many people came together to create Rust 1.69.0. We couldn&#x27;t have done it without all of you. &lt;a href&#x3D;&quot;https://thanks.rust-lang.org/rust/1.69.0/&quot;&gt;Thanks!&lt;/a&gt;&lt;/p&gt;
</content>

        <author>
            <name>The Rust Release Team</name>
        </author>
    </entry>
    
    <entry>
        <title>Announcing Rust 1.68.2</title>
        <link rel="alternate" href="https://blog.rust-lang.org/2023/03/28/Rust-1.68.2.html" type="text/html" title="Announcing Rust 1.68.2" />
        <published>2023-03-28T00:00:00+00:00</published>
        <updated>2023-03-28T00:00:00+00:00</updated>
        <id>https://blog.rust-lang.org/2023/03/28/Rust-1.68.2.html</id>
        <content type="html" xml:base="https://blog.rust-lang.org/2023/03/28/Rust-1.68.2.html">&lt;p&gt;The Rust team has published a new point release of Rust, 1.68.2. Rust is a
programming language that is empowering everyone to build reliable and
efficient software.&lt;/p&gt;
&lt;p&gt;If you have a previous version of Rust installed via rustup, you can get 1.68.2 with:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;rustup update stable
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If you don&#x27;t have it already, you can &lt;a href&#x3D;&quot;https://www.rust-lang.org/install.html&quot;&gt;get &lt;code&gt;rustup&lt;/code&gt;&lt;/a&gt;
from the appropriate page on our website, and check out the
&lt;a href&#x3D;&quot;https://github.com/rust-lang/rust/blob/stable/RELEASES.md#version-1682-2023-03-28&quot;&gt;detailed release notes for 1.68.2&lt;/a&gt; on GitHub.&lt;/p&gt;
&lt;h2&gt;&lt;a href&#x3D;&quot;#whats-in-1682-stable&quot; aria-hidden&#x3D;&quot;true&quot; class&#x3D;&quot;anchor&quot; id&#x3D;&quot;whats-in-1682-stable&quot;&gt;&lt;/a&gt;What&#x27;s in 1.68.2 stable&lt;/h2&gt;
&lt;p&gt;Rust 1.68.2 addresses &lt;a href&#x3D;&quot;https://github.blog/2023-03-23-we-updated-our-rsa-ssh-host-key/&quot;&gt;GitHub&#x27;s recent rotation of their RSA SSH host
key&lt;/a&gt;, which
happened on March 24th 2023 after their previous key accidentally leaked:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href&#x3D;&quot;https://github.com/rust-lang/cargo/pull/11883&quot;&gt;GitHub&#x27;s RSA key bundled in Cargo has been
updated&lt;/a&gt;, to ensure systems
that haven&#x27;t interacted with GitHub yet won&#x27;t connect trusting the leaked
key.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href&#x3D;&quot;https://github.com/rust-lang/cargo/pull/11889&quot;&gt;The leaked key has been hardcoded as revoked in
Cargo&lt;/a&gt;, to ensure the key
won&#x27;t be used by Cargo even on systems that still trust the key.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href&#x3D;&quot;https://github.com/rust-lang/cargo/pull/11635&quot;&gt;Support for &lt;code&gt;@revoked&lt;/code&gt; entries in
&lt;code&gt;.ssh/known_hosts&lt;/code&gt;&lt;/a&gt; (along with
a better error message when the unsupported &lt;code&gt;@cert-authority&lt;/code&gt; entries are used)
is also included in Rust 1.68.2, as that change was a pre-requisite for
backporting the hardcoded revocation.&lt;/p&gt;
&lt;p&gt;If you cannot upgrade to Rust 1.68.2, we recommend &lt;a href&#x3D;&quot;https://github.blog/2023-03-23-we-updated-our-rsa-ssh-host-key/#what-you-can-do&quot;&gt;following GitHub&#x27;s
instructions&lt;/a&gt;
on updating the trusted keys in your system. Note that the keys bundled in
Cargo are only used if no trusted key for &lt;code&gt;github.com&lt;/code&gt; is found on the system.&lt;/p&gt;
&lt;h3&gt;&lt;a href&#x3D;&quot;#contributors-to-1682&quot; aria-hidden&#x3D;&quot;true&quot; class&#x3D;&quot;anchor&quot; id&#x3D;&quot;contributors-to-1682&quot;&gt;&lt;/a&gt;Contributors to 1.68.2&lt;/h3&gt;
&lt;p&gt;Many people came together to create Rust 1.68.2. We couldn&#x27;t have done it
without all of you. &lt;a href&#x3D;&quot;https://thanks.rust-lang.org/rust/1.68.2/&quot;&gt;Thanks!&lt;/a&gt;&lt;/p&gt;
</content>

        <author>
            <name>The Rust Release Team</name>
        </author>
    </entry>
    
</feed>

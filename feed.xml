<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
    <generator uri="https://blog.rust-lang.org/" version="0.1.0">Rust Blog</generator>
    <link href="https://blog.rust-lang.org/feed.xml" rel="self" type="application/atom+xml" />
    <link href="https://blog.rust-lang.org/" rel="alternate" type="text/html" />
    <id>https://blog.rust-lang.org/</id>
    <title>Rust Blog</title>
    <subtitle>Empowering everyone to build reliable and efficient software.</subtitle>
    <author>
        <name>Maintained by the Rust Team.</name>
        <uri>https://github.com/rust-lang/blog.rust-lang.org/</uri>
    </author>
    <updated>2020-07-13T21:28:28+00:00</updated>

    
    <entry>
        <title>Announcing Rustup 1.22.1</title>
        <link rel="alternate" href="https://blog.rust-lang.org/2020/07/08/Rustup-1.22.1.html" type="text/html" title="Announcing Rustup 1.22.1" />
        <published>2020-07-08T00:00:00+00:00</published>
        <updated>2020-07-08T00:00:00+00:00</updated>
        <id>https://blog.rust-lang.org/2020/07/08/Rustup-1.22.1.html</id>
        <content type="html" xml:base="https://blog.rust-lang.org/2020/07/08/Rustup-1.22.1.html">&lt;p&gt;The rustup working group is happy to announce the release of rustup version 1.22.1. &lt;a href=&quot;https://rustup.rs&quot;&gt;Rustup&lt;/a&gt; is the recommended tool to install &lt;a href=&quot;https://www.rust-lang.org&quot;&gt;Rust&lt;/a&gt;, a programming language that is empowering everyone to build reliable and efficient software.&lt;/p&gt;
&lt;p&gt;If you have a previous version of rustup installed, getting rustup 1.22.1 may be as easy as closing your IDE and running:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;rustup self update
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Rustup will also automatically update itself at the end of a normal toolchain update:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;rustup update
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If you don't have it already, or if the 1.22.0 release of rustup caused you to experience the problem that 1.22.1 fixes, you can &lt;a href=&quot;https://rustup.rs&quot;&gt;get rustup&lt;/a&gt; from the appropriate page on our website.&lt;/p&gt;
&lt;h2&gt;&lt;a href=&quot;#whats-new-in-rustup-1221&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot; id=&quot;whats-new-in-rustup-1221&quot;&gt;&lt;/a&gt;What's new in rustup 1.22.1&lt;/h2&gt;
&lt;p&gt;When updating dependency crates for 1.22.0, a change in behaviour of the &lt;code&gt;url&lt;/code&gt; crate slipped in which caused &lt;code&gt;env_proxy&lt;/code&gt; to cease to work with proxy data set in the environment.  This is unfortunate since those of you who use &lt;code&gt;rustup&lt;/code&gt; behind a proxy and have updated to 1.22.0 will now find that rustup may not work properly for you.&lt;/p&gt;
&lt;p&gt;If you are affected by this, simply &lt;a href=&quot;https://rustup.rs&quot;&gt;re-download the installer&lt;/a&gt; and run it.  It will update your existing installation of Rust with no need to uninstall first.&lt;/p&gt;
&lt;h2&gt;&lt;a href=&quot;#thanks&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot; id=&quot;thanks&quot;&gt;&lt;/a&gt;Thanks&lt;/h2&gt;
&lt;p&gt;Thanks to Ivan Nejgebauer who spotted the issue, provided the fix, and made rustup 1.22.1 possible,
and to Ben Chen who provided a fix for our website.&lt;/p&gt;
</content>

        <author>
            <name>The Rustup Working Group</name>
        </author>
    </entry>
    
    <entry>
        <title>Announcing Rustup 1.22.0</title>
        <link rel="alternate" href="https://blog.rust-lang.org/2020/07/06/Rustup-1.22.0.html" type="text/html" title="Announcing Rustup 1.22.0" />
        <published>2020-07-06T00:00:00+00:00</published>
        <updated>2020-07-06T00:00:00+00:00</updated>
        <id>https://blog.rust-lang.org/2020/07/06/Rustup-1.22.0.html</id>
        <content type="html" xml:base="https://blog.rust-lang.org/2020/07/06/Rustup-1.22.0.html">&lt;p&gt;The rustup working group is happy to announce the release of rustup version 1.22.0. &lt;a href=&quot;https://rustup.rs&quot;&gt;Rustup&lt;/a&gt; is the recommended tool to install &lt;a href=&quot;https://www.rust-lang.org&quot;&gt;Rust&lt;/a&gt;, a programming language that is empowering everyone to build reliable and efficient software.&lt;/p&gt;
&lt;p&gt;If you have a previous version of rustup installed, getting rustup 1.22.0 is as easy as closing your IDE and running:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;rustup self update
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Rustup will also automatically update itself at the end of a normal toolchain update:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;rustup update
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If you don't have it already, you can &lt;a href=&quot;https://rustup.rs&quot;&gt;get rustup&lt;/a&gt; from the appropriate page on our website.&lt;/p&gt;
&lt;h2&gt;&lt;a href=&quot;#whats-new-in-rustup-1220&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot; id=&quot;whats-new-in-rustup-1220&quot;&gt;&lt;/a&gt;What's new in rustup 1.22.0&lt;/h2&gt;
&lt;p&gt;This release is mostly related to internal rework and tweaks in UI messages.  It is effectively a quality-of-life update which includes things such as:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Supporting the larger MIPS release files which now exceed 100MB in individual files&lt;/li&gt;
&lt;li&gt;Supporting running in a lower-memory mode on single-CPU systems, along with detecting any in-place soft-limits on memory consumption in an effort to reduce the chance you run out of RAM during an install on systems like Raspberry Pis&lt;/li&gt;
&lt;li&gt;When we skip a &lt;code&gt;nightly&lt;/code&gt; for missing-component reasons we now tell you all the missing components&lt;/li&gt;
&lt;li&gt;We now tell you where overrides are coming from in &lt;code&gt;rustup show&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Added &lt;code&gt;riscv64gc-unknown-linux-gnu&lt;/code&gt; version of &lt;code&gt;rustup&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;You can now specify multiple components when installing a toolchain more easily.  For example, if you wanted to install nightly with the &lt;code&gt;default&lt;/code&gt; profile, but add the IDE support all in one go, you can now run
&lt;pre&gt;&lt;code&gt;rustup toolchain install --profile default --component rls,rust-analysis,rust-src nightly
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;There are many more changes in 1.22.0, with around 90 PRs, though a large number of them are internal changes which you can look at in &lt;a href=&quot;https://github.com/rust-lang/rustup/commits/master&quot;&gt;Github&lt;/a&gt; if you want, and you can see a little more detail than the above in our &lt;a href=&quot;https://github.com/rust-lang/rustup/blob/stable/CHANGELOG.md#1220---2020-06-30&quot;&gt;changelog&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;&lt;a href=&quot;#thanks&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot; id=&quot;thanks&quot;&gt;&lt;/a&gt;Thanks&lt;/h2&gt;
&lt;p&gt;Thanks to all the contributors who made rustup 1.22.0 possible!&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Alejandro Martinez Ruiz&lt;/li&gt;
&lt;li&gt;Alexander D'hoore&lt;/li&gt;
&lt;li&gt;Ben Chen&lt;/li&gt;
&lt;li&gt;Chris Denton&lt;/li&gt;
&lt;li&gt;Daniel Silverstone&lt;/li&gt;
&lt;li&gt;Evan Weiler&lt;/li&gt;
&lt;li&gt;Guillaume Gomez&lt;/li&gt;
&lt;li&gt;Harry Sarson&lt;/li&gt;
&lt;li&gt;Jacob Lifshay&lt;/li&gt;
&lt;li&gt;James Yang&lt;/li&gt;
&lt;li&gt;Joel Parker Henderson&lt;/li&gt;
&lt;li&gt;John Titor&lt;/li&gt;
&lt;li&gt;Jonas Platte&lt;/li&gt;
&lt;li&gt;Josh Stone&lt;/li&gt;
&lt;li&gt;Jubilee&lt;/li&gt;
&lt;li&gt;Kellda&lt;/li&gt;
&lt;li&gt;LeSeulArtichaut&lt;/li&gt;
&lt;li&gt;Linus Färnstrand&lt;/li&gt;
&lt;li&gt;LitoMore&lt;/li&gt;
&lt;li&gt;LIU An (劉安)&lt;/li&gt;
&lt;li&gt;Luciano Bestia&lt;/li&gt;
&lt;li&gt;Lzu Tao&lt;/li&gt;
&lt;li&gt;Manish Goregaokar&lt;/li&gt;
&lt;li&gt;Mingye Wang&lt;/li&gt;
&lt;li&gt;Montgomery Edwards&lt;/li&gt;
&lt;li&gt;Per Lundberg&lt;/li&gt;
&lt;li&gt;Pietro Albini&lt;/li&gt;
&lt;li&gt;Robert Collins&lt;/li&gt;
&lt;li&gt;Rudolf B.&lt;/li&gt;
&lt;li&gt;Solomon Ucko&lt;/li&gt;
&lt;li&gt;Stein Somers&lt;/li&gt;
&lt;li&gt;Tetsuharu Ohzeki&lt;/li&gt;
&lt;li&gt;Tom Eccles&lt;/li&gt;
&lt;li&gt;Trevor Arjeski&lt;/li&gt;
&lt;li&gt;Tshepang Lekhonkhobe&lt;/li&gt;
&lt;/ul&gt;
</content>

        <author>
            <name>The Rustup Working Group</name>
        </author>
    </entry>
    
    <entry>
        <title>Announcing Rust 1.44.1</title>
        <link rel="alternate" href="https://blog.rust-lang.org/2020/06/18/Rust.1.44.1.html" type="text/html" title="Announcing Rust 1.44.1" />
        <published>2020-06-18T00:00:00+00:00</published>
        <updated>2020-06-18T00:00:00+00:00</updated>
        <id>https://blog.rust-lang.org/2020/06/18/Rust.1.44.1.html</id>
        <content type="html" xml:base="https://blog.rust-lang.org/2020/06/18/Rust.1.44.1.html">&lt;p&gt;The Rust team has published a new point release of Rust, 1.44.1.
Rust is a programming language that is empowering everyone to build reliable and efficient software.&lt;/p&gt;
&lt;p&gt;If you have a previous version of Rust installed via rustup, getting Rust 1.44.1 is as easy as:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-console&quot;&gt;rustup update stable
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If you don't have it already, you can &lt;a href=&quot;https://www.rust-lang.org/install.html&quot;&gt;get &lt;code&gt;rustup&lt;/code&gt;&lt;/a&gt; from the
appropriate page on our website.&lt;/p&gt;
&lt;h2&gt;&lt;a href=&quot;#whats-in-rust-1441&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot; id=&quot;whats-in-rust-1441&quot;&gt;&lt;/a&gt;What's in Rust 1.44.1&lt;/h2&gt;
&lt;p&gt;Rust 1.44.1 addresses several tool regressions in Cargo, Clippy, and Rustfmt introduced in the 1.44.0 stable
release. You can find more detailed information on the specific regressions in the &lt;a href=&quot;https://github.com/rust-lang/rust/blob/stable/RELEASES.md#version-1441-2020-06-18&quot;&gt;release notes&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;&lt;a href=&quot;#contributors-to-1441&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot; id=&quot;contributors-to-1441&quot;&gt;&lt;/a&gt;Contributors to 1.44.1&lt;/h2&gt;
&lt;p&gt;Many people came together to create Rust 1.44.1.
We couldn't have done it without all of you. &lt;a href=&quot;https://thanks.rust-lang.org/rust/1.44.1/&quot;&gt;Thanks!&lt;/a&gt;&lt;/p&gt;
</content>

        <author>
            <name>The Rust Release Team</name>
        </author>
    </entry>
    
    <entry>
        <title>2020 Event Lineup - Update</title>
        <link rel="alternate" href="https://blog.rust-lang.org/2020/06/10/event-lineup-update.html" type="text/html" title="2020 Event Lineup - Update" />
        <published>2020-06-10T00:00:00+00:00</published>
        <updated>2020-06-10T00:00:00+00:00</updated>
        <id>https://blog.rust-lang.org/2020/06/10/event-lineup-update.html</id>
        <content type="html" xml:base="https://blog.rust-lang.org/2020/06/10/event-lineup-update.html">&lt;p&gt;In 2020 the way we can do events suddenly changed.
In the past we had in-person events all around the world, with some major conferences throughout the year.
With everything changed due to a global pandemic this won't be possible anymore.
Nonetheless the Rust community found ways to continue with events in some form or another.
With more and more events moving online they are getting more accessible to people no matter where they are.&lt;/p&gt;
&lt;p&gt;Below you find updated information about Rust events in 2020.&lt;/p&gt;
&lt;p&gt;Do you plan to run a Rust online event?
Send an email to the &lt;a href=&quot;mailto:community@rust-lang.org&quot;&gt;Rust Community team&lt;/a&gt; and the team will be able to get your event on the calendar and might be able to offer further help.&lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;&lt;a href=&quot;#rust-latam&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot; id=&quot;rust-latam&quot;&gt;&lt;/a&gt;&lt;strong&gt;Rust LATAM&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;Unfortunately the Latin American event &lt;a href=&quot;https://rustlatam.org/&quot;&gt;Rust LATAM&lt;/a&gt; had to be canceled this year.
The team hopes to be able to resume the event in the future.&lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;&lt;a href=&quot;#oxidizejuly-17th-20th-2020&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot; id=&quot;oxidizejuly-17th-20th-2020&quot;&gt;&lt;/a&gt;&lt;strong&gt;Oxidize&lt;/strong&gt;&lt;br&gt;July 17th-20th, 2020&lt;/h2&gt;
&lt;p&gt;The &lt;a href=&quot;https://oxidizeconf.com/&quot;&gt;Oxidize conference&lt;/a&gt; was relabeled to become Oxidize Global.
From July 17-20 you will be able to learn about embedded systems and IoT in Rust.
Over the course of 4 days you will be able to attend online workshops (July 17th), listen to talks (July 18th) and take part in the Impl Days, where you can collaborate with other Embedded Rust contributors in active programming sessions.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://oxidizeconf.com/#Schedule&quot;&gt;Tickets are on sale&lt;/a&gt; and the speakers &amp;amp; talks will be announced soon.&lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;&lt;a href=&quot;#rustconfaugust-20th-2020&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot; id=&quot;rustconfaugust-20th-2020&quot;&gt;&lt;/a&gt;&lt;strong&gt;RustConf&lt;/strong&gt;&lt;br&gt;August 20th, 2020&lt;/h2&gt;
&lt;p&gt;The official &lt;a href=&quot;https://rustconf.com/&quot;&gt;RustConf&lt;/a&gt; will be taking place fully online.
Listen to talks and meet other Rust enthusiasts online in digital meetups &amp;amp; breakout rooms.
See the &lt;a href=&quot;https://rustconf.com/speakers&quot;&gt;list of speakers&lt;/a&gt;, register already and follow &lt;a href=&quot;https://twitter.com/rustconf&quot;&gt;Twitter&lt;/a&gt; for updates as the event date approaches!&lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;&lt;a href=&quot;#rusty-daysjuly-27th---august-2nd-2020&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot; id=&quot;rusty-daysjuly-27th---august-2nd-2020&quot;&gt;&lt;/a&gt;&lt;strong&gt;Rusty Days&lt;/strong&gt;&lt;br&gt;July 27th - August 2nd, 2020&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://rusty-days.org/&quot;&gt;Rusty Days&lt;/a&gt; is a new conference and was planned to happen in Wroclaw, Poland.
It now turned into a virtual Rust conference stretched over five days.
You'll be able to see five speakers with five talks -- and everything is free of charge, streamed online and available to watch later.&lt;/p&gt;
&lt;p&gt;The &lt;a href=&quot;https://rusty-days.org/cfp&quot;&gt;Call for Papers&lt;/a&gt; is open. Follow &lt;a href=&quot;https://twitter.com/rdconf&quot;&gt;Twitter&lt;/a&gt; for updates.&lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;&lt;a href=&quot;#rustlaboctober-16th-17th-2020&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot; id=&quot;rustlaboctober-16th-17th-2020&quot;&gt;&lt;/a&gt;&lt;strong&gt;RustLab&lt;/strong&gt;&lt;br&gt;October 16th-17th, 2020&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://www.rustlab.it&quot;&gt;RustLab 2020&lt;/a&gt; is also turning into an online event.
The details are not yet settled, but they are aiming for the original dates.
Keep an eye on &lt;a href=&quot;https://twitter.com/rustlab_conf&quot;&gt;their Twitter stream&lt;/a&gt; for further details.&lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;&lt;a href=&quot;#rustfest-netherlands-globalnovember-7th-8th-2020&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot; id=&quot;rustfest-netherlands-globalnovember-7th-8th-2020&quot;&gt;&lt;/a&gt;&lt;strong&gt;RustFest &lt;del&gt;Netherlands&lt;/del&gt; Global&lt;/strong&gt;&lt;br&gt;November 7th-8th, 2020&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://netherlands.rustfest.eu/&quot;&gt;RustFest Netherlands&lt;/a&gt; was supposed to happen this June.
The team decided to postpone the event and is now happening as an online conference in Q4 of this year.
More information will be available soon on the &lt;a href=&quot;https://blog.rustfest.eu/&quot;&gt;RustFest blog&lt;/a&gt; and also on &lt;a href=&quot;https://twitter.com/rustfest&quot;&gt;Twitter&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Update 2020-06-18&lt;/strong&gt;: RustFest has announced its dates: November 7th &amp;amp; 8th, running as an online community conference.
See &lt;a href=&quot;https://blog.rustfest.eu/announcing-rustfest-2020&quot;&gt;the announcement blog post for details&lt;/a&gt;.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;Conferences are not the only thing happening.
More and more local meetups get turned into online events.
We try to highlight these in the &lt;a href=&quot;https://calendar.google.com/calendar/embed?src=apd9vmbc22egenmtu5l6c5jbfc@group.calendar.google.com&quot;&gt;community calendar&lt;/a&gt; as well as in the &lt;a href=&quot;https://this-week-in-rust.org/&quot;&gt;This Week in Rust newsletter&lt;/a&gt;.
Some Rust developers are streaming their work on the language &amp;amp; their Rust projects.
You can get more information in a &lt;a href=&quot;https://github.com/jamesmunns/awesome-rust-streaming&quot;&gt;curated list of Rust streams&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Do you plan to run a Rust online event?
Send an email to the &lt;a href=&quot;mailto:community@rust-lang.org&quot;&gt;Rust Community team&lt;/a&gt; and the team will be able to get your event on the calendar and might be able to offer further help.&lt;/p&gt;
</content>

        <author>
            <name>The Rust Community Team</name>
        </author>
    </entry>
    
    <entry>
        <title>Announcing Rust 1.44.0</title>
        <link rel="alternate" href="https://blog.rust-lang.org/2020/06/04/Rust-1.44.0.html" type="text/html" title="Announcing Rust 1.44.0" />
        <published>2020-06-04T00:00:00+00:00</published>
        <updated>2020-06-04T00:00:00+00:00</updated>
        <id>https://blog.rust-lang.org/2020/06/04/Rust-1.44.0.html</id>
        <content type="html" xml:base="https://blog.rust-lang.org/2020/06/04/Rust-1.44.0.html">&lt;p&gt;The Rust team has published a new version of Rust, 1.44.0. Rust is a programming language that is empowering everyone to build reliable and efficient software.&lt;/p&gt;
&lt;p&gt;This is a shorter blog post than usual: in acknowledgement that taking a stand against the police brutality currently happening in the US and the world at large is more important than sharing tech knowledge, we decided to significantly scale back the amount of promotion we're doing for this release.&lt;/p&gt;
&lt;p&gt;The Rust Core Team believes that tech is and always will be political, and we encourage everyone take the time today to learn about racial inequality and &lt;a href=&quot;https://blacklivesmatters.carrd.co/&quot;&gt;support the Black Lives Matter movement.&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;&lt;a href=&quot;#whats-in-1440-stable&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot; id=&quot;whats-in-1440-stable&quot;&gt;&lt;/a&gt;What's in 1.44.0 stable&lt;/h2&gt;
&lt;p&gt;Rust 1.44 is a small release, with &lt;a href=&quot;https://github.com/rust-lang/cargo/pull/8062/&quot;&gt;&lt;code&gt;cargo tree&lt;/code&gt; integrated in Cargo itself&lt;/a&gt; and &lt;a href=&quot;https://github.com/rust-lang/rust/pull/69033/&quot;&gt;support for &lt;code&gt;async&lt;/code&gt;/&lt;code&gt;await&lt;/code&gt; in &lt;code&gt;no_std&lt;/code&gt; contexts&lt;/a&gt; as its highlights. You can learn more about all the changes in this release by &lt;a href=&quot;https://github.com/rust-lang/rust/blob/master/RELEASES.md#version-1440-2020-06-04&quot;&gt;reading the release notes&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;&lt;a href=&quot;#contributors-to-1440&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot; id=&quot;contributors-to-1440&quot;&gt;&lt;/a&gt;Contributors to 1.44.0&lt;/h2&gt;
&lt;p&gt;Many people came together to create Rust 1.44.0. We couldn't have done it without all of you. &lt;a href=&quot;https://thanks.rust-lang.org/rust/1.44.0/&quot;&gt;Thanks!&lt;/a&gt;&lt;/p&gt;
</content>

        <author>
            <name>The Rust Core Team</name>
        </author>
    </entry>
    
    <entry>
        <title>Five Years of Rust</title>
        <link rel="alternate" href="https://blog.rust-lang.org/2020/05/15/five-years-of-rust.html" type="text/html" title="Five Years of Rust" />
        <published>2020-05-15T00:00:00+00:00</published>
        <updated>2020-05-15T00:00:00+00:00</updated>
        <id>https://blog.rust-lang.org/2020/05/15/five-years-of-rust.html</id>
        <content type="html" xml:base="https://blog.rust-lang.org/2020/05/15/five-years-of-rust.html">&lt;p&gt;With all that's going on in the world you'd be forgiven for forgetting that as
of today, it has been five years since we released 1.0! Rust has changed
a lot these past five years, so we wanted to reflect back on all of our
contributors' work since the stabilization of the language.&lt;/p&gt;
&lt;p&gt;Rust is a general purpose programming language empowering everyone to build
reliable and efficient software. Rust can be built to run anywhere in the stack,
whether as the kernel for your operating system or your next web app. It is built
entirely by an open and diverse community of individuals, primarily volunteers who
generously donate their time and expertise to help make Rust what it is.&lt;/p&gt;
&lt;h2&gt;&lt;a href=&quot;#major-changes-since-10&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot; id=&quot;major-changes-since-10&quot;&gt;&lt;/a&gt;Major Changes since 1.0&lt;/h2&gt;
&lt;h4&gt;&lt;a href=&quot;#2015&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot; id=&quot;2015&quot;&gt;&lt;/a&gt;2015&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://blog.rust-lang.org/2015/08/06/Rust-1.2.html&quot;&gt;1.2&lt;/a&gt; — Parallel Codegen:&lt;/strong&gt; Compile time improvements are a large theme to every
release of Rust, and it's hard to imagine that there was a short time where
Rust had no parallel code generation at all.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://blog.rust-lang.org/2015/09/17/Rust-1.3.html&quot;&gt;1.3&lt;/a&gt; — The Rustonomicon:&lt;/strong&gt; Our first release of the fantastic &amp;quot;Rustonomicon&amp;quot;, a
book that explores Unsafe Rust and its surrounding topics and has become a great
resource for anyone looking to learn and understand one of the hardest aspects
of the language.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://blog.rust-lang.org/2015/10/29/Rust-1.4.html&quot;&gt;1.4&lt;/a&gt; — Windows MSVC Tier 1 Support:&lt;/strong&gt; The first tier 1 platform promotion was
bringing native support for 64-bit Windows using the Microsoft Visual C++ toolchain
(MSVC). Before 1.4 you needed to also have MinGW (a third party GNU environment)
installed in order to use and compile your Rust programs. Rust's Windows support
is one of the biggest improvements these past five years. Just recently
Microsoft &lt;a href=&quot;https://blogs.windows.com/windowsdeveloper/2020/04/30/rust-winrt-public-preview/&quot;&gt;announced a public preview of their official Rust support for the
WinRT API!&lt;/a&gt; Now it's easier than ever build top quality native and cross
platform apps.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://blog.rust-lang.org/2015/12/10/Rust-1.5.html&quot;&gt;1.5&lt;/a&gt; — Cargo Install:&lt;/strong&gt; The addition of being able to build Rust binaries
alongside cargo's pre-existing plugin support has given birth to an entire
ecosystem of apps, utilities, and developer tools that the community has come
to love and depend on. Quite a few of the commands cargo has today were first
plugins that the community built and shared on crates.io!&lt;/p&gt;
&lt;h4&gt;&lt;a href=&quot;#2016&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot; id=&quot;2016&quot;&gt;&lt;/a&gt;2016&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://blog.rust-lang.org/2016/01/21/Rust-1.6.html&quot;&gt;1.6&lt;/a&gt; — Libcore:&lt;/strong&gt; &lt;code&gt;libcore&lt;/code&gt; is a subset of the standard library that only
contains APIs that don't require allocation or operating system level features.
The stabilization of libcore brought the ability to compile Rust with no allocation
or operating system dependency was one of the first major steps towards Rust's
support for embedded systems development.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://blog.rust-lang.org/2016/07/07/Rust-1.10.html&quot;&gt;1.10&lt;/a&gt; — C ABI Dynamic Libraries:&lt;/strong&gt; The &lt;code&gt;cdylib&lt;/code&gt; crate type allows Rust to be
compiled as a C dynamic library, enabling you to embed your Rust projects in
any system that supports the C ABI. Some of Rust's biggest success stories
among users is being able to write a small critical part of their system in
Rust and seamlessly integrate in the larger codebase, and it's now easier
than ever.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://blog.rust-lang.org/2016/09/29/Rust-1.12.html&quot;&gt;1.12&lt;/a&gt; — Cargo Workspaces:&lt;/strong&gt; Workspaces allow you to organise multiple rust
projects and share the same lockfile. Workspaces have been invaluable in
building large multi-crate level projects.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://blog.rust-lang.org/2016/11/10/Rust-1.13.html&quot;&gt;1.13&lt;/a&gt; — The Try Operator:&lt;/strong&gt; The first major syntax addition was the &lt;code&gt;?&lt;/code&gt; or
the &amp;quot;Try&amp;quot; operator. The operator allows you to easily propagate your error
through your call stack. Previously you had to use the &lt;code&gt;try!&lt;/code&gt; macro, which
required you to wrap the entire expression each time you encountered a result,
now you can easily chain methods with &lt;code&gt;?&lt;/code&gt; instead.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-rust&quot;&gt;try!(try!(expression).method()); // Old
expression?.method()?;           // New
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://blog.rust-lang.org/2016/12/22/Rust-1.14.html&quot;&gt;1.14&lt;/a&gt; — Rustup 1.0:&lt;/strong&gt; Rustup is Rust's Toolchain manager, it allows you to
seamlessly use any version of Rust or any of its tooling. What started as a
humble shell script has become what the maintainers affectionately call a
&lt;em&gt;&amp;quot;chimera&amp;quot;&lt;/em&gt;. Being able to provide first class compiler version management across
Linux, macOS, Windows, and the dozens of target platforms would have been a
myth just five years ago.&lt;/p&gt;
&lt;h4&gt;&lt;a href=&quot;#2017&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot; id=&quot;2017&quot;&gt;&lt;/a&gt;2017&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://blog.rust-lang.org/2017/02/02/Rust-1.15.html&quot;&gt;1.15&lt;/a&gt; — Derive Procedural Macros:&lt;/strong&gt; Derive Macros allow you to create powerful
and extensive strongly typed APIs without all the boilerplate. This was the
first version of Rust you could use libraries like &lt;code&gt;serde&lt;/code&gt; or &lt;code&gt;diesel&lt;/code&gt;'s
derive macros on stable.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://blog.rust-lang.org/2017/04/27/Rust-1.17.html&quot;&gt;1.17&lt;/a&gt; — Rustbuild:&lt;/strong&gt; One of the biggest improvements for our contributors to
the language was moving our build system from the initial &lt;code&gt;make&lt;/code&gt; based system
to using cargo. This has opened up &lt;code&gt;rust-lang/rust&lt;/code&gt; to being a lot easier for
members and newcomers alike to build and contribute to the project.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://blog.rust-lang.org/2017/08/31/Rust-1.20.html&quot;&gt;1.20&lt;/a&gt; — Associated Constants:&lt;/strong&gt; Previously constants could only be associated
with a module. In 1.20 we stabilised associating constants on struct, enums,
and importantly traits. Making it easier to add rich sets of preset values for
types in your API, such as common IP addresses or interesting numbers.&lt;/p&gt;
&lt;h4&gt;&lt;a href=&quot;#2018&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot; id=&quot;2018&quot;&gt;&lt;/a&gt;2018&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://blog.rust-lang.org/2018/02/15/Rust-1.24.html&quot;&gt;1.24&lt;/a&gt; — Incremental Compilation:&lt;/strong&gt; Before 1.24 when you made a change in your
library rustc would have to re-compile all of the code. Now rustc is a lot
smarter about caching as much as possible and only needing to re-generate
what's needed.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://blog.rust-lang.org/2018/05/10/Rust-1.26.html&quot;&gt;1.26&lt;/a&gt; — impl Trait:&lt;/strong&gt; The addition of &lt;code&gt;impl Trait&lt;/code&gt; gives you expressive
dynamic APIs with the benefits and performance of static dispatch.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://blog.rust-lang.org/2018/08/02/Rust-1.28.html&quot;&gt;1.28&lt;/a&gt; — Global Allocators:&lt;/strong&gt; Previously you were restricted to using the
allocator that rust provided. With the global allocator API you can now
customise your allocator to one that suits your needs. This was an important
step in enabling the creation of the &lt;code&gt;alloc&lt;/code&gt; library, another subset of the
standard library containing only the parts of std that need an allocator like
&lt;code&gt;Vec&lt;/code&gt; or &lt;code&gt;String&lt;/code&gt;. Now it's easier than ever to use even more parts of the
standard library on a variety of systems.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://blog.rust-lang.org/2018/12/06/Rust-1.31-and-rust-2018.html&quot;&gt;1.31&lt;/a&gt; — 2018 edition:&lt;/strong&gt; The release of the 2018 edition was easily our biggest
release since 1.0, adding a collection of syntax changes and improvements to
writing Rust written in a completely backwards compatible fashion, allowing
libraries built with different editions to seamlessly work together.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Non-Lexical Lifetimes&lt;/strong&gt; A huge improvement to Rust's borrow checker,
allowing it to accept more verifiable safe code.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Module System Improvements&lt;/strong&gt; Large UX improvements to how we define and
use modules.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Const Functions&lt;/strong&gt; Const functions allow you to run and evaluate Rust code
at compile time.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Rustfmt 1.0&lt;/strong&gt; A new code formatting tool built specifically for Rust.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Clippy 1.0&lt;/strong&gt; Rust's linter for catching common mistakes. Clippy makes it a lot
easier to make sure that your code is not only safe but correct.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Rustfix&lt;/strong&gt; With all the syntax changes, we knew we wanted to provide the
tooling to make the transition as easy as possible. Now when changes are
required to Rust's syntax they're just a &lt;code&gt;cargo fix&lt;/code&gt; away from being resolved.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;&lt;a href=&quot;#2019&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot; id=&quot;2019&quot;&gt;&lt;/a&gt;2019&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://blog.rust-lang.org/2019/04/11/Rust-1.34.0.html&quot;&gt;1.34&lt;/a&gt; — Alternative Crate Registries:&lt;/strong&gt; As Rust is used more and more in
production, there is a greater need to be able to host and use your projects
in non-public spaces, while cargo has always allowed remote git dependencies,
with Alternative Registries your organisation can easily build and share your
own registry of crates that can be used in your projects like they were
on crates.io.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://blog.rust-lang.org/2019/11/07/Rust-1.39.0.html&quot;&gt;1.39&lt;/a&gt; — Async/Await:&lt;/strong&gt; The stabilisation of the async/await keywords for
handling Futures was one of the major milestones to making async programming
in Rust a first class citizen. Even just six months after its release
async programming in Rust has blossomed into a diverse and performant ecosystem.&lt;/p&gt;
&lt;h4&gt;&lt;a href=&quot;#2020&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot; id=&quot;2020&quot;&gt;&lt;/a&gt;2020&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://blog.rust-lang.org/2020/03/12/Rust-1.42.html&quot;&gt;1.42&lt;/a&gt; — Subslice patterns:&lt;/strong&gt; While not the biggest change, the addition
of the &lt;code&gt;..&lt;/code&gt; (rest) pattern has been a long awaited quality of life
feature that greatly improves the expressivity of pattern matching
with slices.&lt;/p&gt;
&lt;h2&gt;&lt;a href=&quot;#error-diagnostics&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot; id=&quot;error-diagnostics&quot;&gt;&lt;/a&gt;Error Diagnostics&lt;/h2&gt;
&lt;p&gt;One thing that we haven't mentioned much is how much Rust's error messages and
diagnostics have improved since 1.0. Looking at older error messages now feels
like looking at a different language.&lt;/p&gt;
&lt;p&gt;We’ve highlighted a couple of examples that best showcase just how much we’ve
improved showing users where they made mistakes and importantly help them
understand why it doesn’t work and teach them how they can fix it.&lt;/p&gt;
&lt;h5&gt;&lt;a href=&quot;#first-example-traits&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot; id=&quot;first-example-traits&quot;&gt;&lt;/a&gt;First Example (Traits)&lt;/h5&gt;
&lt;pre&gt;&lt;code class=&quot;language-rust&quot;&gt;use std::io::Write;

fn trait_obj(w: &amp;amp;Write) {
    generic(w);
}

fn generic&amp;lt;W: Write&amp;gt;(_w: &amp;amp;W) {}
&lt;/code&gt;&lt;/pre&gt;
&lt;details&gt;
 &lt;summary&gt;1.2.0 Error Message&lt;/summary&gt;
&lt;pre&gt;&lt;code&gt;   Compiling error-messages v0.1.0 (file:///Users/usr/src/rust/error-messages)
src/lib.rs:6:5: 6:12 error: the trait `core::marker::Sized` is not implemented for the type `std::io::Write` [E0277]
src/lib.rs:6     generic(w);
                 ^~~~~~~
src/lib.rs:6:5: 6:12 note: `std::io::Write` does not have a constant size known at compile-time
src/lib.rs:6     generic(w);
                 ^~~~~~~
error: aborting due to previous error
Could not compile `error-messages`.

To learn more, run the command again with --verbose.
&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;p&gt;&lt;img src=&quot;/images/2020-05-15-five-years-of-rust/trait-error-1.2.0.png&quot; alt=&quot;A terminal screenshot of the 1.2.0 error message.&quot; /&gt;&lt;/p&gt;
&lt;details&gt;
 &lt;summary&gt;1.43.0 Error Message&lt;/summary&gt;
&lt;pre&gt;&lt;code&gt;   Compiling error-messages v0.1.0 (/Users/ep/src/rust/error-messages)
error[E0277]: the size for values of type `dyn std::io::Write` cannot be known at compilation time
 --&amp;gt; src/lib.rs:6:13
  |
6 |     generic(w);
  |             ^ doesn't have a size known at compile-time
...
9 | fn generic&amp;lt;W: Write&amp;gt;(_w: &amp;amp;W) {}
  |    ------- -       - help: consider relaxing the implicit `Sized` restriction: `+  ?Sized`
  |            |
  |            required by this bound in `generic`
  |
  = help: the trait `std::marker::Sized` is not implemented for `dyn std::io::Write`
  = note: to learn more, visit &amp;lt;https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait&amp;gt;

error: aborting due to previous error

For more information about this error, try `rustc --explain E0277`.
error: could not compile `error-messages`.

To learn more, run the command again with --verbose.
&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;p&gt;&lt;img src=&quot;/images/2020-05-15-five-years-of-rust/trait-error-1.43.0.png&quot; alt=&quot;A terminal screenshot of the 1.43.0 error message.&quot; /&gt;&lt;/p&gt;
&lt;h5&gt;&lt;a href=&quot;#second-example-help&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot; id=&quot;second-example-help&quot;&gt;&lt;/a&gt;Second Example (help)&lt;/h5&gt;
&lt;pre&gt;&lt;code class=&quot;language-rust&quot;&gt;fn main() {
    let s = &amp;quot;&amp;quot;.to_owned();
    println!(&amp;quot;{:?}&amp;quot;, s.find(&amp;quot;&amp;quot;.to_owned()));
}
&lt;/code&gt;&lt;/pre&gt;
&lt;details&gt;
 &lt;summary&gt;1.2.0 Error Message&lt;/summary&gt;
&lt;pre&gt;&lt;code&gt;   Compiling error-messages v0.1.0 (file:///Users/ep/src/rust/error-messages)
src/lib.rs:3:24: 3:43 error: the trait `core::ops::FnMut&amp;lt;(char,)&amp;gt;` is not implemented for the type `collections::string::String` [E0277]
src/lib.rs:3     println!(&amp;quot;{:?}&amp;quot;, s.find(&amp;quot;&amp;quot;.to_owned()));
                                    ^~~~~~~~~~~~~~~~~~~
note: in expansion of format_args!
&amp;lt;std macros&amp;gt;:2:25: 2:56 note: expansion site
&amp;lt;std macros&amp;gt;:1:1: 2:62 note: in expansion of print!
&amp;lt;std macros&amp;gt;:3:1: 3:54 note: expansion site
&amp;lt;std macros&amp;gt;:1:1: 3:58 note: in expansion of println!
src/lib.rs:3:5: 3:45 note: expansion site
src/lib.rs:3:24: 3:43 error: the trait `core::ops::FnOnce&amp;lt;(char,)&amp;gt;` is not implemented for the type `collections::string::String` [E0277]
src/lib.rs:3     println!(&amp;quot;{:?}&amp;quot;, s.find(&amp;quot;&amp;quot;.to_owned()));
                                    ^~~~~~~~~~~~~~~~~~~
note: in expansion of format_args!
&amp;lt;std macros&amp;gt;:2:25: 2:56 note: expansion site
&amp;lt;std macros&amp;gt;:1:1: 2:62 note: in expansion of print!
&amp;lt;std macros&amp;gt;:3:1: 3:54 note: expansion site
&amp;lt;std macros&amp;gt;:1:1: 3:58 note: in expansion of println!
src/lib.rs:3:5: 3:45 note: expansion site
error: aborting due to 2 previous errors
Could not compile `error-messages`.

To learn more, run the command again with --verbose.

&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;p&gt;&lt;img src=&quot;/images/2020-05-15-five-years-of-rust/help-error-1.2.0.png&quot; alt=&quot;A terminal screenshot of the 1.2.0 error message.&quot; /&gt;&lt;/p&gt;
&lt;details&gt;
 &lt;summary&gt;1.43.0 Error Message&lt;/summary&gt;
&lt;pre&gt;&lt;code&gt;   Compiling error-messages v0.1.0 (/Users/ep/src/rust/error-messages)
error[E0277]: expected a `std::ops::FnMut&amp;lt;(char,)&amp;gt;` closure, found `std::string::String`
 --&amp;gt; src/lib.rs:3:29
  |
3 |     println!(&amp;quot;{:?}&amp;quot;, s.find(&amp;quot;&amp;quot;.to_owned()));
  |                             ^^^^^^^^^^^^^
  |                             |
  |                             expected an implementor of trait `std::str::pattern::Pattern&amp;lt;'_&amp;gt;`
  |                             help: consider borrowing here: `&amp;amp;&amp;quot;&amp;quot;.to_owned()`
  |
  = note: the trait bound `std::string::String: std::str::pattern::Pattern&amp;lt;'_&amp;gt;` is not satisfied
  = note: required because of the requirements on the impl of `std::str::pattern::Pattern&amp;lt;'_&amp;gt;` for `std::string::String`

error: aborting due to previous error

For more information about this error, try `rustc --explain E0277`.
error: could not compile `error-messages`.

To learn more, run the command again with --verbose.
&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;p&gt;&lt;img src=&quot;/images/2020-05-15-five-years-of-rust/help-error-1.43.0.png&quot; alt=&quot;A terminal screenshot of the 1.43.0 error message.&quot; /&gt;&lt;/p&gt;
&lt;h5&gt;&lt;a href=&quot;#third-example-borrow-checker&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot; id=&quot;third-example-borrow-checker&quot;&gt;&lt;/a&gt;Third Example (Borrow checker)&lt;/h5&gt;
&lt;pre&gt;&lt;code class=&quot;language-rust&quot;&gt;fn main() {
    let mut x = 7;
    let y = &amp;amp;mut x;

    println!(&amp;quot;{} {}&amp;quot;, x, y);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;details&gt;
 &lt;summary&gt;1.2.0 Error Message&lt;/summary&gt;
&lt;pre&gt;&lt;code&gt;   Compiling error-messages v0.1.0 (file:///Users/ep/src/rust/error-messages)
src/lib.rs:5:23: 5:24 error: cannot borrow `x` as immutable because it is also borrowed as mutable
src/lib.rs:5     println!(&amp;quot;{} {}&amp;quot;, x, y);
                                   ^
note: in expansion of format_args!
&amp;lt;std macros&amp;gt;:2:25: 2:56 note: expansion site
&amp;lt;std macros&amp;gt;:1:1: 2:62 note: in expansion of print!
&amp;lt;std macros&amp;gt;:3:1: 3:54 note: expansion site
&amp;lt;std macros&amp;gt;:1:1: 3:58 note: in expansion of println!
src/lib.rs:5:5: 5:29 note: expansion site
src/lib.rs:3:18: 3:19 note: previous borrow of `x` occurs here; the mutable borrow prevents subsequent moves, borrows, or modification of `x` until the borrow ends
src/lib.rs:3     let y = &amp;amp;mut x;
                              ^
src/lib.rs:6:2: 6:2 note: previous borrow ends here
src/lib.rs:1 fn main() {
src/lib.rs:2     let mut x = 7;
src/lib.rs:3     let y = &amp;amp;mut x;
src/lib.rs:4
src/lib.rs:5     println!(&amp;quot;{} {}&amp;quot;, x, y);
src/lib.rs:6 }
             ^
error: aborting due to previous error
Could not compile `error-messages`.

To learn more, run the command again with --verbose.
&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;p&gt;&lt;img src=&quot;/images/2020-05-15-five-years-of-rust/borrow-error-1.2.0.png&quot; alt=&quot;A terminal screenshot of the 1.2.0 error message.&quot; /&gt;&lt;/p&gt;
&lt;details&gt;
 &lt;summary&gt;1.43.0 Error Message&lt;/summary&gt;
&lt;pre&gt;&lt;code&gt;   Compiling error-messages v0.1.0 (/Users/ep/src/rust/error-messages)
error[E0502]: cannot borrow `x` as immutable because it is also borrowed as mutable
 --&amp;gt; src/lib.rs:5:23
  |
3 |     let y = &amp;amp;mut x;
  |             ------ mutable borrow occurs here
4 |
5 |     println!(&amp;quot;{} {}&amp;quot;, x, y);
  |                       ^  - mutable borrow later used here
  |                       |
  |                       immutable borrow occurs here

error: aborting due to previous error

For more information about this error, try `rustc --explain E0502`.
error: could not compile `error-messages`.

To learn more, run the command again with --verbose.
&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;p&gt;&lt;img src=&quot;/images/2020-05-15-five-years-of-rust/borrow-error-1.43.0.png&quot; alt=&quot;A terminal screenshot of the 1.43.0 error message.&quot; /&gt;&lt;/p&gt;
&lt;h2&gt;&lt;a href=&quot;#quotes-from-the-teams&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot; id=&quot;quotes-from-the-teams&quot;&gt;&lt;/a&gt;Quotes from the teams&lt;/h2&gt;
&lt;p&gt;Of course we can't cover every change that has happened. So we reached out and
asked some of our teams what changes they are most proud of:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;For rustdoc, the big things were:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The automatically generated documentation for blanket implementations&lt;/li&gt;
&lt;li&gt;The search itself and its optimizations (last one being to convert it into JSON)&lt;/li&gt;
&lt;li&gt;The possibility to test more accurately doc code blocks &amp;quot;compile_fail,
should_panic, allow_fail&amp;quot;&lt;/li&gt;
&lt;li&gt;Doc tests are now generated as their own seperate binaries.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;— Guillaume Gomez (&lt;a href=&quot;https://www.rust-lang.org/governance/teams/dev-tools#rustdoc&quot;&gt;rustdoc&lt;/a&gt;)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Rust now has baseline IDE support! Between IntelliJ Rust, RLS and
rust-analyzer, I feel that most users should be able to find &amp;quot;not horrible&amp;quot;
experience for their editor of choice. Five years ago, &amp;quot;writing Rust&amp;quot; meant
using old school Vim/Emacs setup.&lt;/p&gt;
&lt;p&gt;— Aleksey Kladov (&lt;a href=&quot;https://www.rust-lang.org/governance/teams/dev-tools#ides&quot;&gt;IDEs and editors&lt;/a&gt;)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;For me that would be: Adding first class support for popular embedded
architectures and achieving a striving ecosystem to make micro controller
development with Rust an easy and safe, yet fun experience.&lt;/p&gt;
&lt;p&gt;— Daniel Egger (&lt;a href=&quot;https://www.rust-lang.org/governance/wgs/embedded&quot;&gt;Embedded WG&lt;/a&gt;)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;The release team has only been around since (roughly) early 2018, but even in
that time, we've landed ~40000 commits just in rust-lang/rust without any
significant regressions in stable.&lt;/p&gt;
&lt;p&gt;Considering how quickly we're improving the compiler and standard libraries, I
think that's really impressive (though of course the release team is not the
sole contributor here). Overall, I've found that the release team has done an
excellent job of managing to scale to the increasing traffic on issue
trackers, PRs being filed, etc.&lt;/p&gt;
&lt;p&gt;— Mark Rousskov (&lt;a href=&quot;https://www.rust-lang.org/governance/teams/operations#release&quot;&gt;Release&lt;/a&gt;)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Within the last 3 years we managed to turn &lt;a href=&quot;https://github.com/rust-lang/miri&quot;&gt;Miri&lt;/a&gt; from an experimental
interpreter into a practical tool for exploring language design and finding
bugs in real code—a great combination of PL theory and practice.  On the
theoretical side we have &lt;a href=&quot;https://github.com/rust-lang/unsafe-code-guidelines/blob/master/wip/stacked-borrows.md&quot;&gt;Stacked Borrows&lt;/a&gt;, the most concrete proposal for a
Rust aliasing model so far. On the practical side, while initially only a
few key libraries were checked in Miri by us, recently we saw a great uptake
of people using Miri to &lt;a href=&quot;https://github.com/rust-lang/miri/#bugs-found-by-miri&quot;&gt;find and fix bugs&lt;/a&gt; in their own crates and
dependencies, and a similar uptake in contributors improving Miri e.g. by
adding support for file system access, unwinding, and concurrency.&lt;/p&gt;
&lt;p&gt;— Ralf Jung (&lt;a href=&quot;https://www.rust-lang.org/governance/teams/compiler#miri&quot;&gt;Miri&lt;/a&gt;)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;If I had to pick one thing I'm most proud of, it was the work on non-lexical
lifetimes (NLL). It's not only because I think it made a big difference in
the usability of Rust, but also because of the way that we implemented it by
forming the NLL working group. This working group brought in a lot of great
contributors, many of whom are still working on the compiler today. Open
source at its best!&lt;/p&gt;
&lt;p&gt;— Niko Matsakis (&lt;a href=&quot;https://www.rust-lang.org/governance/teams/lang&quot;&gt;Language&lt;/a&gt;)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;&lt;a href=&quot;#the-community&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot; id=&quot;the-community&quot;&gt;&lt;/a&gt;The Community&lt;/h2&gt;
&lt;p&gt;As the language has changed and grown a lot in these past five years so has its
community. There's been so many great projects written in Rust, and Rust's
presence in production has grown exponentially. We wanted to share some
statistics on just how much Rust has grown.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Rust has been voted &lt;a href=&quot;https://insights.stackoverflow.com/survey/2019#most-loved-dreaded-and-wanted&quot;&gt;&amp;quot;Most Loved Programming Language&amp;quot;&lt;/a&gt; every year in the past
four Stack Overflow developer surveys since it went 1.0.&lt;/li&gt;
&lt;li&gt;We have served over 2.25 Petabytes (1PB = 1,000 TB) of different versions of the
compiler, tooling, and documentation this year alone!&lt;/li&gt;
&lt;li&gt;In the same time we have served over 170TB of crates to roughly 1.8 billion
requests on crates.io, doubling the monthly traffic compared to last year.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;When Rust turned 1.0 you could count the number of companies that were
using it in production on one hand. Today, it is being used by hundreds of
tech companies with some of the largest tech companies such as Apple, Amazon,
Dropbox, Facebook, Google, and Microsoft choosing to use Rust for its performance,
reliability, and productivity in their projects.&lt;/p&gt;
&lt;h2&gt;&lt;a href=&quot;#conclusion&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot; id=&quot;conclusion&quot;&gt;&lt;/a&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Obviously we couldn't cover every change or improvement to Rust that's happened
since 2015. What have been your favourite changes or new favourite Rust
projects? Feel free to post your answer and discussion on &lt;a href=&quot;https://users.rust-lang.org/t/five-years-of-rust/42661&quot;&gt;our
Discourse forum&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Lastly, we wanted to thank everyone who has to contributed to the Rust, whether
you contributed a new feature or fixed a typo, your work has made Rust the
amazing project it is today. We can't wait to see how Rust and its community will
continue to grow and change, and see what you all will build with Rust in the
coming decade!&lt;/p&gt;
</content>

        <author>
            <name>The Rust Core Team</name>
        </author>
    </entry>
    
    <entry>
        <title>Announcing Rust 1.43.1</title>
        <link rel="alternate" href="https://blog.rust-lang.org/2020/05/07/Rust.1.43.1.html" type="text/html" title="Announcing Rust 1.43.1" />
        <published>2020-05-07T00:00:00+00:00</published>
        <updated>2020-05-07T00:00:00+00:00</updated>
        <id>https://blog.rust-lang.org/2020/05/07/Rust.1.43.1.html</id>
        <content type="html" xml:base="https://blog.rust-lang.org/2020/05/07/Rust.1.43.1.html">&lt;p&gt;The Rust team has published a new point release of Rust, 1.43.1.
Rust is a programming language that is empowering everyone to build reliable and efficient software.&lt;/p&gt;
&lt;p&gt;If you have a previous version of Rust installed via rustup, getting Rust 1.43.1 is as easy as:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-console&quot;&gt;rustup update stable
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If you don't have it already, you can &lt;a href=&quot;https://www.rust-lang.org/install.html&quot;&gt;get &lt;code&gt;rustup&lt;/code&gt;&lt;/a&gt; from the
appropriate page on our website, and check out the &lt;a href=&quot;https://github.com/rust-lang/rust/blob/master/RELEASES.md#version-1431-2020-05-07&quot;&gt;detailed release notes for
1.43.1&lt;/a&gt; on GitHub.&lt;/p&gt;
&lt;h2&gt;&lt;a href=&quot;#whats-in-rust-1431&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot; id=&quot;whats-in-rust-1431&quot;&gt;&lt;/a&gt;What's in Rust 1.43.1&lt;/h2&gt;
&lt;p&gt;Rust 1.43.1 addresses two regressions introduced in the 1.43.0 stable release, and updates the OpenSSL version used by Cargo.&lt;/p&gt;
&lt;h3&gt;&lt;a href=&quot;#fixed-undetectable-cpu-features&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot; id=&quot;fixed-undetectable-cpu-features&quot;&gt;&lt;/a&gt;Fixed undetectable CPU features&lt;/h3&gt;
&lt;p&gt;Rust 1.27.0 introduced support for detecting x86 CPU features in the standard library, thanks to the &lt;a href=&quot;https://doc.rust-lang.org/stable/std/macro.is_x86_feature_detected.html&quot;&gt;&lt;code&gt;is_x86_feature_detected!&lt;/code&gt;&lt;/a&gt; macro. Due to an internal refactoring, Rust 1.43.0 prevented the detection of features that can't be used on stable yet (such as AVX-512), even though detecting them was allowed in the past. Rust 1.43.1 fixes this regression. More information on the regression in available in &lt;a href=&quot;https://github.com/rust-lang/rust/issues/71473&quot;&gt;issue #71473&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;&lt;a href=&quot;#fixed-broken-cargo-package---list&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot; id=&quot;fixed-broken-cargo-package---list&quot;&gt;&lt;/a&gt;Fixed broken &lt;code&gt;cargo package --list&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Rust 1.43.0 broke support for listing the files included in packages published with Cargo, when inside a workspace with path dependencies or unpublished versions. A fix for the issue is included in Rust 1.43.1. More information on the bug is available in &lt;a href=&quot;https://github.com/rust-lang/cargo/issues/8151&quot;&gt;Cargo issue #8151&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;&lt;a href=&quot;#openssl-updated-to-111g&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot; id=&quot;openssl-updated-to-111g&quot;&gt;&lt;/a&gt;OpenSSL updated to 1.1.1g&lt;/h3&gt;
&lt;p&gt;OpenSSL, one of the dependencies of Cargo, recently released a &lt;a href=&quot;https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-1967&quot;&gt;security advisory&lt;/a&gt;. Unfortunately we were not able to include the fix in time for Rust 1.43.0, so we upgraded OpenSSL in Rust 1.43.1. We have no evidence this vulnerability could compromise the security of Cargo users (if you do, &lt;a href=&quot;https://www.rust-lang.org/policies/security&quot;&gt;please follow our security policy&lt;/a&gt;).&lt;/p&gt;
&lt;h2&gt;&lt;a href=&quot;#contributors-to-1431&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot; id=&quot;contributors-to-1431&quot;&gt;&lt;/a&gt;Contributors to 1.43.1&lt;/h2&gt;
&lt;p&gt;Many people came together to create Rust 1.43.1.
We couldn't have done it without all of you. &lt;a href=&quot;https://thanks.rust-lang.org/rust/1.43.1/&quot;&gt;Thanks!&lt;/a&gt;&lt;/p&gt;
</content>

        <author>
            <name>The Rust Release Team</name>
        </author>
    </entry>
    
    <entry>
        <title>Announcing Rust 1.43.0</title>
        <link rel="alternate" href="https://blog.rust-lang.org/2020/04/23/Rust-1.43.0.html" type="text/html" title="Announcing Rust 1.43.0" />
        <published>2020-04-23T00:00:00+00:00</published>
        <updated>2020-04-23T00:00:00+00:00</updated>
        <id>https://blog.rust-lang.org/2020/04/23/Rust-1.43.0.html</id>
        <content type="html" xml:base="https://blog.rust-lang.org/2020/04/23/Rust-1.43.0.html">&lt;p&gt;The Rust team is happy to announce a new version of Rust, 1.43.0. Rust is a
programming language that is empowering everyone to build reliable and
efficient software.&lt;/p&gt;
&lt;p&gt;If you have a previous version of Rust installed via rustup, getting Rust
1.43.0 is as easy as:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-console&quot;&gt;rustup update stable
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If you don't have it already, you can &lt;a href=&quot;https://www.rust-lang.org/install.html&quot;&gt;get &lt;code&gt;rustup&lt;/code&gt;&lt;/a&gt; from the
appropriate page on our website, and check out the &lt;a href=&quot;https://github.com/rust-lang/rust/blob/master/RELEASES.md#version-1430-2020-04-23&quot;&gt;detailed release notes for
1.43.0&lt;/a&gt; on GitHub.&lt;/p&gt;
&lt;h2&gt;&lt;a href=&quot;#whats-in-1430-stable&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot; id=&quot;whats-in-1430-stable&quot;&gt;&lt;/a&gt;What's in 1.43.0 stable&lt;/h2&gt;
&lt;p&gt;This release is fairly minor. There are no new major features. We have some
new stabilized APIs, some compiler performance improvements, and a small
macro-related feature. See the &lt;a href=&quot;https://github.com/rust-lang/rust/blob/master/RELEASES.md#version-1430-2020-04-23&quot;&gt;detailed release notes&lt;/a&gt; to learn about
other changes not covered by this post.&lt;/p&gt;
&lt;h3&gt;&lt;a href=&quot;#item-fragments&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot; id=&quot;item-fragments&quot;&gt;&lt;/a&gt;&lt;code&gt;item&lt;/code&gt; fragments&lt;/h3&gt;
&lt;p&gt;In macros, you can use &lt;code&gt;item&lt;/code&gt; fragments to interpolate items into the body of traits,
impls, and extern blocks. For example:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-rust&quot;&gt;macro_rules! mac_trait {
    ($i:item) =&amp;gt; {
        trait T { $i }
    }
}
mac_trait! {
    fn foo() {}
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This will generate:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-rust&quot;&gt;trait T {
    fn foo() {}
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;&lt;a href=&quot;#type-inference-around-primitives&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot; id=&quot;type-inference-around-primitives&quot;&gt;&lt;/a&gt;Type inference around primitives&lt;/h3&gt;
&lt;p&gt;The type inference around primitives, references, and binary operations was
improved. A code sample makes this easier to understand: this code fails to
compile on Rust 1.42, but compiles in Rust 1.43.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-rust&quot;&gt;let n: f32 = 0.0 + &amp;amp;0.0;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In Rust 1.42, you would get an error that would say &amp;quot;hey, I don't know how to add
an &lt;code&gt;f64&lt;/code&gt; and an &lt;code&gt;&amp;amp;f64&lt;/code&gt; with a result of &lt;code&gt;f32&lt;/code&gt;.&amp;quot; The algorithm now correctly decides
that both &lt;code&gt;0.0&lt;/code&gt; and &lt;code&gt;&amp;amp;0.0&lt;/code&gt; should be &lt;code&gt;f32&lt;/code&gt;s instead.&lt;/p&gt;
&lt;h3&gt;&lt;a href=&quot;#new-cargo-environment-variable-for-tests&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot; id=&quot;new-cargo-environment-variable-for-tests&quot;&gt;&lt;/a&gt;New Cargo environment variable for tests&lt;/h3&gt;
&lt;p&gt;In a move to help integration testing, &lt;a href=&quot;https://github.com/rust-lang/cargo/pull/7697&quot;&gt;Cargo will set some new environment
variables&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;This is easiest to explain by example: let's say we're working on a command
line project, simply named &amp;quot;cli&amp;quot;. If we're writing an integration test, we want
to invoke that &lt;code&gt;cli&lt;/code&gt; binary and see what it does. When running tests and
benchmarks, Cargo will set an environment variable named &lt;code&gt;CARGO_BIN_EXE_cli&lt;/code&gt;,
and I can use it inside my test:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-rust&quot;&gt;let exe = env!(&amp;quot;CARGO_BIN_EXE_cli&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This makes it easier to invoke &lt;code&gt;cli&lt;/code&gt;, as we now have a path to it directly.&lt;/p&gt;
&lt;h3&gt;&lt;a href=&quot;#library-changes&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot; id=&quot;library-changes&quot;&gt;&lt;/a&gt;Library changes&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-lang/rust/pull/68952/&quot;&gt;You can now use associated constants on floats and integers directly&lt;/a&gt;, rather
than having to import the module. That is, you can now write &lt;code&gt;u32::MAX&lt;/code&gt; or &lt;code&gt;f32::NAN&lt;/code&gt;
with no &lt;code&gt;use std::u32;&lt;/code&gt; or &lt;code&gt;use std::f32;&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;There is a &lt;a href=&quot;https://github.com/rust-lang/rust/pull/67637/&quot;&gt;new &lt;code&gt;primitive&lt;/code&gt;
module&lt;/a&gt; that re-exports Rust's
primitive types. This can be useful when you're writing a macro and want to make
sure that the types aren't shadowed.&lt;/p&gt;
&lt;p&gt;Additionally, we stabilized six new APIs:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://doc.rust-lang.org/std/sync/struct.Once.html#method.is_completed&quot;&gt;&lt;code&gt;Once::is_completed&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://doc.rust-lang.org/std/f32/consts/constant.LOG10_2.html&quot;&gt;&lt;code&gt;f32::LOG10_2&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://doc.rust-lang.org/std/f32/consts/constant.LOG2_10.html&quot;&gt;&lt;code&gt;f32::LOG2_10&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://doc.rust-lang.org/std/f64/consts/constant.LOG10_2.html&quot;&gt;&lt;code&gt;f64::LOG10_2&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://doc.rust-lang.org/std/f64/consts/constant.LOG2_10.html&quot;&gt;&lt;code&gt;f64::LOG2_10&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://doc.rust-lang.org/std/iter/fn.once_with.html&quot;&gt;&lt;code&gt;iter::once_with&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a href=&quot;#other-changes&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot; id=&quot;other-changes&quot;&gt;&lt;/a&gt;Other changes&lt;/h3&gt;
&lt;p&gt;There are other changes in the Rust 1.43.0 release: check out what changed in
&lt;a href=&quot;https://github.com/rust-lang/rust/blob/master/RELEASES.md#version-1430-2020-04-23&quot;&gt;Rust&lt;/a&gt;, &lt;a href=&quot;https://github.com/rust-lang/cargo/blob/master/CHANGELOG.md#cargo-143-2020-04-23&quot;&gt;Cargo&lt;/a&gt;, and &lt;a href=&quot;https://github.com/rust-lang/rust-clippy/blob/master/CHANGELOG.md#rust-143&quot;&gt;Clippy&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;&lt;a href=&quot;#contributors-to-1430&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot; id=&quot;contributors-to-1430&quot;&gt;&lt;/a&gt;Contributors to 1.43.0&lt;/h2&gt;
&lt;p&gt;Many people came together to create Rust 1.43.0. We couldn't have done it
without all of you. &lt;a href=&quot;https://thanks.rust-lang.org/rust/1.43.0/&quot;&gt;Thanks!&lt;/a&gt;&lt;/p&gt;
</content>

        <author>
            <name>The Rust Release Team</name>
        </author>
    </entry>
    
    <entry>
        <title>Rust Survey 2019 Results</title>
        <link rel="alternate" href="https://blog.rust-lang.org/2020/04/17/Rust-survey-2019.html" type="text/html" title="Rust Survey 2019 Results" />
        <published>2020-04-17T00:00:00+00:00</published>
        <updated>2020-04-17T00:00:00+00:00</updated>
        <id>https://blog.rust-lang.org/2020/04/17/Rust-survey-2019.html</id>
        <content type="html" xml:base="https://blog.rust-lang.org/2020/04/17/Rust-survey-2019.html">&lt;blockquote&gt;
&lt;p&gt;Translation available for &lt;a href=&quot;http://www.secondstate.info/blog/rust-2019&quot;&gt;Chinese | 中文&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Greetings Rustaceans!&lt;/p&gt;
&lt;p&gt;We are happy to present the results of our fourth annual survey of our Rust community. Before we dig into the analysis, we want to give a big &amp;quot;thank you!&amp;quot; to all of the people who took the time to respond. You are vital to Rust continuing to improve year after year!&lt;/p&gt;
&lt;p&gt;Let's start by looking at the survey audience.&lt;/p&gt;
&lt;h2&gt;&lt;a href=&quot;#survey-audience&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot; id=&quot;survey-audience&quot;&gt;&lt;/a&gt;Survey Audience&lt;/h2&gt;
&lt;p&gt;The survey was available in &lt;strong&gt;14&lt;/strong&gt; different languages and we received &lt;strong&gt;3997&lt;/strong&gt; responses.&lt;/p&gt;
&lt;p&gt;Here is the language distribution of the responses we received.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;English: 69.6%&lt;/li&gt;
&lt;li&gt;Chinese: 10.8%&lt;/li&gt;
&lt;li&gt;German: 4.3%&lt;/li&gt;
&lt;li&gt;French: 3.3%&lt;/li&gt;
&lt;li&gt;Japanese: 3.0%&lt;/li&gt;
&lt;li&gt;Polish: 1.2%&lt;/li&gt;
&lt;li&gt;Portuguese: 1.2%&lt;/li&gt;
&lt;li&gt;Spanish: .9%&lt;/li&gt;
&lt;li&gt;Korean: .8%&lt;/li&gt;
&lt;li&gt;Italian: .6%&lt;/li&gt;
&lt;li&gt;Swedish: .5%&lt;/li&gt;
&lt;li&gt;Vietnamese: .2%&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In the 2019 survey, 82.8% of responders indicated they used Rust, 7.1% indicated they did not currently use Rust but had used it in the past, and 10.1% indicated that they had never used Rust.&lt;/p&gt;
&lt;p&gt;If we compare this to the 2018 survey (where 75% of responders indicated they used Rust, 8% indicated the did not currently use Rust but had used it in the past, and 8% indicated they had never used Rust) more responders were using Rust in 2019.&lt;/p&gt;
&lt;h2&gt;&lt;a href=&quot;#looking-back-on-rust-2018&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot; id=&quot;looking-back-on-rust-2018&quot;&gt;&lt;/a&gt;Looking Back on Rust 2018&lt;/h2&gt;
&lt;p&gt;In December 2018 we released the Rust 2018 edition - Rust 1.31.0. In the 2019 survey, 92% of Rust users indicated they were using the new edition. 85% said that upgrading to the Rust 2018 edition was easy.&lt;/p&gt;
&lt;p&gt;Next, we asked users to rate the improvement of key aspects of the Rust language.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/2020-03-RustSurvey/35-Adoption-Level-improvement.svg&quot; alt=&quot;How has adoption level improved&quot; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/2020-03-RustSurvey/36-Async-IO-improvement.svg&quot; alt=&quot;How has async io improved&quot; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/2020-03-RustSurvey/37-compile-time-improvement.svg&quot; alt=&quot;How has compile time improved&quot; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/2020-03-RustSurvey/38-GUI-Development-improvement.svg&quot; alt=&quot;How has GUI development improved&quot; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/2020-03-RustSurvey/39-IDE-improvement.svg&quot; alt=&quot;How has IDE support improved&quot; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/2020-03-RustSurvey/40-Library-Support-improvement.svg&quot; alt=&quot;How has library support improved&quot; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/2020-03-RustSurvey/41-Stable-Language-Features-and-Crates-improvement.svg&quot; alt=&quot;How have stable language features and crates improved&quot; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/2020-03-RustSurvey/42-Rust-documentation-improvement.svg&quot; alt=&quot;How has Rust documentation improved&quot; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/2020-03-RustSurvey/43-learning-curve-improvement.svg&quot; alt=&quot;How has the learning curve improved&quot; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/2020-03-RustSurvey/44-tools-and-support-improvement.svg&quot; alt=&quot;How has tools and support improved&quot; /&gt;&lt;/p&gt;
&lt;p&gt;Overall, many aspects of the Rust language were perceived as &amp;quot;somewhat better&amp;quot; in the 2018 edition.&lt;/p&gt;
&lt;h2&gt;&lt;a href=&quot;#conferences-and-community&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot; id=&quot;conferences-and-community&quot;&gt;&lt;/a&gt;Conferences and Community&lt;/h2&gt;
&lt;p&gt;We noticed some differences between English language and other language results. Within the non-English language survey subset, the majority of the issues and concerns identified are the same as those within the English language. However, one concern/trend stands out among the non-English speaking subset - a desire for Rust documentation in their native language, or the language they took the survey in. This was particularly notable within the Chinese-language group, though that is likely due to the higher representation.&lt;/p&gt;
&lt;p&gt;We are tracking the &lt;a href=&quot;https://github.com/rust-lang/book/issues?q=is%3Aopen+is%3Aissue+label%3ATranslations&quot;&gt;ongoing translation efforts&lt;/a&gt; with the &amp;quot;Translation&amp;quot; GitHub issue label.&lt;/p&gt;
&lt;p&gt;We received a lot of feedback on how we can improve Rust and make it feel more welcoming to more people. We can't include all of it here, so here is a summary of some of the feedback that stood out to us.&lt;/p&gt;
&lt;p&gt;People are in general asking for more learning material about Rust. In terms of expertise it's mainly beginner and intermediate level material being requested. A lot of these requests also asked for video content specifically.&lt;/p&gt;
&lt;p&gt;The common blockers that people mention to participating is that they have social anxiety, and accessibility. One of the common reasons mentioned was that some resources are hard to read for people with dyslexia.&lt;/p&gt;
&lt;p&gt;Here are some specific responses to the question &amp;quot;What action could we take to make you feel more welcome?&amp;quot;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;I feel too inexperienced and under skilled to participate in the Rust community&lt;/li&gt;
&lt;li&gt;Advertise more ways for newcomers to contribute/participate&lt;/li&gt;
&lt;li&gt;More organized mentorship, online classes&lt;/li&gt;
&lt;li&gt;Do video tutorials on how to contribute to the compiler. I'd love to contribute but I feel intimidated&lt;/li&gt;
&lt;li&gt;It's not easy to find resources for newcomers to see how Rust is being used in open source projects, so that they see the action as they're learning the language.&lt;/li&gt;
&lt;li&gt;More tutorials/blogs that explain simple rust &amp;amp; coding concepts like the reader is a complete beginner&lt;/li&gt;
&lt;li&gt;More intermediate level tutorials. We already have a million &amp;quot;Introductions to Rust&amp;quot;.&lt;/li&gt;
&lt;li&gt;Smaller groups of helping people - social anxiety is making it hard to talk in the Discord, for example&lt;/li&gt;
&lt;li&gt;Don't have synchronous meetings at late EU hours. Have fewer synchronous meetings and/or more consistently publish and aggregate meeting notes for team meetings.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;These issues are definitely ones we want to address in 2020 and beyond.&lt;/p&gt;
&lt;h2&gt;&lt;a href=&quot;#who-is-using-rust-and-what-for&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot; id=&quot;who-is-using-rust-and-what-for&quot;&gt;&lt;/a&gt;Who is using Rust and what for?&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;/images/2020-03-RustSurvey/11-How-Often-Use-Rust.svg&quot; alt=&quot;How often do you use Rust&quot; /&gt;&lt;/p&gt;
&lt;p&gt;Rust daily usage has trended slightly upward at 27.63% (it was just under 25% last year and 17.5% on 2017). Daily or weekly usage has also continued to trend slightly upward. This year it was 68.52%, last year it was 66.4%, and in 2017 it was 60.8%.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/2020-03-RustSurvey/12-How-Rate-Rust-Expertise.svg&quot; alt=&quot;How would you rate your Rust expertise&quot; /&gt;&lt;/p&gt;
&lt;p&gt;We also asked users how they would rate their Rust expertise - there is a clear peak around &amp;quot;7&amp;quot;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/2020-03-RustSurvey/29-Rust-expertise-how-long-using-Rust.svg&quot; alt=&quot;How would you rate your Rust expertise&quot; /&gt;&lt;/p&gt;
&lt;p&gt;To dig deeper into this, we correlated users' self-rated Rust expertise with how long they had been using Rust.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/2020-03-RustSurvey/24-use-rust-role-title.svg&quot; alt=&quot;What title best matches your role for Rust users&quot; /&gt;&lt;/p&gt;
&lt;p&gt;For some larger context, we examined what titles users working with Rust full time tend to have in their organization (survey respondents could select more than one).&lt;/p&gt;
&lt;p&gt;By far the most common title for a Rust user is, unsurprisingly, Programmer/Software Engineer.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/2020-03-RustSurvey/25-use-rust-industry.svg&quot; alt=&quot;What industry do you work in for Rust users&quot; /&gt;&lt;/p&gt;
&lt;p&gt;To get even more context, we asked Rust survey respondents to identify what industry they work in.&lt;/p&gt;
&lt;p&gt;For users who use Rust full time, the most common industry by far is backend web applications.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/2020-03-RustSurvey/10-Size-Of-Summed-projects.svg&quot; alt=&quot;Size of summed Rust projects&quot; /&gt;&lt;/p&gt;
&lt;p&gt;The majority of Rust projects (43%) are 1,000-10,000 lines of code. Rust projects of medium to large size (those totaling over 10k lines of code) continue to trend higher. They have grown from 8.9% in 2016, to 16% in 2017, to 23% in 2018, to &lt;strong&gt;34%&lt;/strong&gt; in 2019.&lt;/p&gt;
&lt;h2&gt;&lt;a href=&quot;#why-not-use-rust&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot; id=&quot;why-not-use-rust&quot;&gt;&lt;/a&gt;Why not use Rust?&lt;/h2&gt;
&lt;p&gt;A big part of a welcoming Rust community is reaching out to non-users as well.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/2020-03-RustSurvey/4-Why-Stopped-Rust.svg&quot; alt=&quot;Why did you stop using Rust?&quot; /&gt;&lt;/p&gt;
&lt;p&gt;When we asked why someone had stopped using Rust, the most common response was &amp;quot;My company doesn't use Rust&amp;quot; - which indicates Rust adoption is still the biggest reason. After that, learning curve, lack of needed libraries, being slowed down by switching to Rust, and lack of IDE support were the most common reasons a user stopped using Rust.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/2020-03-RustSurvey/5-Why-Never-Used-Rust.svg&quot; alt=&quot;Why have you never used Rust?&quot; /&gt;&lt;/p&gt;
&lt;p&gt;For users who indicated they had never used Rust before, most indicated either &amp;quot;I haven't learned Rust yet, but I want to&amp;quot; or &amp;quot;My company doesn't use Rust&amp;quot; - again pointing to adoption as the main hurdle.&lt;/p&gt;
&lt;p&gt;For more context, we also examined what title non-Rust users feel best matches their role.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/2020-03-RustSurvey/26-not-using-rust-title.svg&quot; alt=&quot;What title best matches your role for non Rust users&quot; /&gt;&lt;/p&gt;
&lt;p&gt;Like with Rust users, by far the most common title is Programmer/Software Engineer.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/2020-03-RustSurvey/27-not-using-rust-industry.svg&quot; alt=&quot;What industry do you work in for non Rust users&quot; /&gt;&lt;/p&gt;
&lt;p&gt;Also like with Rust users, the most common industry by far is backend web applications.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/2020-03-RustSurvey/20-Would-use-rust-more-often-if.svg&quot; alt=&quot;I would use Rust more often if...&quot; /&gt;&lt;/p&gt;
&lt;p&gt;We also asked users what would lead them to use Rust more often. Most indicated they would use Rust more if their company adopted it, if Rust had more libraries that they need, and if IDE support was better. The most common reasons after those pointed to a need to improve the learning curve and interoperability.&lt;/p&gt;
&lt;p&gt;As adoption seemed to be the biggest problem preventing some respondents from using Rust, let's dive deeper into it.&lt;/p&gt;
&lt;h2&gt;&lt;a href=&quot;#rust-adoption---a-closer-look&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot; id=&quot;rust-adoption---a-closer-look&quot;&gt;&lt;/a&gt;Rust Adoption - a Closer Look&lt;/h2&gt;
&lt;p&gt;First, we asked what would we could do to improve adoption of Rust.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/2020-03-RustSurvey/45-improve-adoption.svg&quot; alt=&quot;How can we improve Rust for better adoption&quot; /&gt;&lt;/p&gt;
&lt;p&gt;Several users gave specific examples:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&amp;quot;Smoothest learning curve as possible, as a small business even 4-6 weeks to become productive is a lot to ask&amp;quot;&lt;/li&gt;
&lt;li&gt;&amp;quot;Higher market penetration&amp;quot;&lt;/li&gt;
&lt;li&gt;&amp;quot;More stable libraries&amp;quot;&lt;/li&gt;
&lt;li&gt;&amp;quot;A full-stack web framework like Rails, Django and Phoenix&amp;quot;&lt;/li&gt;
&lt;li&gt;&amp;quot;Better documentation, more examples, recommendation on what crates to use&amp;quot;&lt;/li&gt;
&lt;li&gt;&amp;quot;More emphasis on how it is a safer alternative to C or C++ (and really should be the default usually).”&lt;/li&gt;
&lt;li&gt;&amp;quot;Improve compile times. Compiling development builds at least as fast as Go would be table stakes for us to consider Rust. (Release builds can be slow.&amp;quot;&lt;/li&gt;
&lt;li&gt;&amp;quot;Better platform support&amp;quot;&lt;/li&gt;
&lt;li&gt;&amp;quot;Security and performance, cost efficient and &amp;quot;green&amp;quot; (low carbon footprint) language&amp;quot;&lt;/li&gt;
&lt;li&gt;&amp;quot;Embedded development targeting ARM&amp;quot;&lt;/li&gt;
&lt;li&gt;&amp;quot;Better GUI framework, similar to Qt or directly using Qt via bindings.&amp;quot;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Most indicated that Rust maturity - such as more libraries and complete learning resources and more mature production capabilities - would make Rust more appealing.&lt;/p&gt;
&lt;p&gt;Let's take a closer look at each of these, starting with the need for more mature libraries.&lt;/p&gt;
&lt;h2&gt;&lt;a href=&quot;#libraries---a-closer-look&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot; id=&quot;libraries---a-closer-look&quot;&gt;&lt;/a&gt;Libraries - a Closer Look&lt;/h2&gt;
&lt;p&gt;When we asked users what libraries they consider critical to the Rust ecosystem, these were the top ten responses:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;serde&lt;/li&gt;
&lt;li&gt;rand&lt;/li&gt;
&lt;li&gt;tokio&lt;/li&gt;
&lt;li&gt;async&lt;/li&gt;
&lt;li&gt;clap&lt;/li&gt;
&lt;li&gt;regex&lt;/li&gt;
&lt;li&gt;log&lt;/li&gt;
&lt;li&gt;futures&lt;/li&gt;
&lt;li&gt;hyper&lt;/li&gt;
&lt;li&gt;lazy_static&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;/images/2020-03-RustSurvey/28-dependencies-1-0-or-above.svg&quot; alt=&quot;What dependencies are 1.0 or above&quot; /&gt;&lt;/p&gt;
&lt;p&gt;We also asked how many dependencies users were using were 1.0 or above.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;0.8% indicated &amp;quot;All&amp;quot;&lt;/li&gt;
&lt;li&gt;6.7% indicated &amp;quot;Most&amp;quot;&lt;/li&gt;
&lt;li&gt;65.9% indicated &amp;quot;Some&amp;quot;&lt;/li&gt;
&lt;li&gt;5.2% indicated &amp;quot;None&amp;quot;&lt;/li&gt;
&lt;li&gt;21.4% indicated &amp;quot;I don't know&amp;quot;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&quot;#ides-and-tooling---a-closer-look&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot; id=&quot;ides-and-tooling---a-closer-look&quot;&gt;&lt;/a&gt;IDEs and Tooling - a Closer Look&lt;/h2&gt;
&lt;p&gt;IDE support for Rust was also cited as a barrier to adoption.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/2020-03-RustSurvey/31-editor-using.svg&quot; alt=&quot;What editor are you using&quot; /&gt;&lt;/p&gt;
&lt;p&gt;When we asked users what editors they use, Vim and VSCode were the most popular by far, followed by Intellij.&lt;/p&gt;
&lt;p&gt;We also asked what IDE setups users used:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;43.3% indicated RLS&lt;/li&gt;
&lt;li&gt;21.7% indicated Intellij&lt;/li&gt;
&lt;li&gt;15.2% indicated Rust-analyzer&lt;/li&gt;
&lt;li&gt;12.4% indicated No (or CTAGS)&lt;/li&gt;
&lt;li&gt;4.2% indicated Only Racer&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;/images/2020-03-RustSurvey/32-what-platform-developing-on.svg&quot; alt=&quot;What platform are you developing on&quot; /&gt;&lt;/p&gt;
&lt;p&gt;As for platforms that users develop on - Linux and Windows continue to dominate.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;55% of Rust users develop on Linux&lt;/li&gt;
&lt;li&gt;24% develop on Windows&lt;/li&gt;
&lt;li&gt;23% develop on macOS&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We found that the vast majority of all users use the current stable version of Rust (63%). It should be noted that the survey allowed respondents to select more than one option for what Rust version they use.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;30.5% use the nightly version&lt;/li&gt;
&lt;li&gt;2.5% use the Beta release&lt;/li&gt;
&lt;li&gt;63% use the current stable version&lt;/li&gt;
&lt;li&gt;3.1% use a previous stable release&lt;/li&gt;
&lt;li&gt;0.6% use a custom fork&lt;/li&gt;
&lt;li&gt;0.3% don't know&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Surprisingly, the number of users using the Nightly compiler in their workflow is down at 20%. Last year it was at over 56%.&lt;/p&gt;
&lt;h2&gt;&lt;a href=&quot;#learning-curve---a-closer-look&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot; id=&quot;learning-curve---a-closer-look&quot;&gt;&lt;/a&gt;Learning Curve - a Closer Look&lt;/h2&gt;
&lt;p&gt;Rust is well known for its significant learning curve.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/2020-03-RustSurvey/8-How-Long-To-Be-Productive.svg&quot; alt=&quot;How long did it take to be productive&quot; /&gt;&lt;/p&gt;
&lt;p&gt;About 37% of Rust users felt productive in Rust in less than a month of use - this is not too different from the percentage last year (40%). Over 70% felt productive in their first year. Unfortunately, like last year, there is still a struggle among users - 21% indicated they did not yet feel productive.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/2020-03-RustSurvey/22-unproductive-expertise.svg&quot; alt=&quot;Expertise level of respondents who don't feel productive yet&quot; /&gt;&lt;/p&gt;
&lt;p&gt;As a point of interest, we took the subset of users who don't feel productive yet and plotted their ratings of their Rust expertise. This indicates that people who don't feel productive had low to intermediate levels of expertise - which are the groups that need the most support from our learning materials, documentation, and more.&lt;/p&gt;
&lt;h2&gt;&lt;a href=&quot;#interoperability---a-closer-look&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot; id=&quot;interoperability---a-closer-look&quot;&gt;&lt;/a&gt;Interoperability - a Closer Look&lt;/h2&gt;
&lt;p&gt;Over the years some users have expressed a desire for Rust to be more interoperable with other languages.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/2020-03-RustSurvey/23-interoperability-languages.svg&quot; alt=&quot;What languages would you want to use with Rust&quot; /&gt;&lt;/p&gt;
&lt;p&gt;When we asked users what languages they would want to be interoperable with Rust, there was a wide spread of answers, but C dominates, followed (somewhat surprisingly) by R, which is followed very closely behind by C++. It should be noted that respondents were able to select more than one language in response to this question - these percentages are based on total responses.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/2020-03-RustSurvey/30-platforms-targeting.svg&quot; alt=&quot;What platforms are you targeting&quot; /&gt;&lt;/p&gt;
&lt;p&gt;When it comes to what platforms using are targeting for their applications Linux remains the first choice with 36.9%, with Windows as second at 16.3%. Following close behind Windows are macOS and Web Assembly at 14% each. We are also seeing more users targeting Android and Apple iOS.&lt;/p&gt;
&lt;h2&gt;&lt;a href=&quot;#conclusions&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot; id=&quot;conclusions&quot;&gt;&lt;/a&gt;Conclusions&lt;/h2&gt;
&lt;p&gt;Overall our users indicated that productivity is still an important goal for their work (with or without using Rust). The results show the overriding problem hindering use of Rust is adoption. The learning curve continues to be a challenge - we appear to most need to improve our follow through for &lt;strong&gt;intermediate&lt;/strong&gt; users - but so are libraries and tooling.&lt;/p&gt;
&lt;p&gt;Thank you to all who participated in this survey - these results are immensely informative to us - especially how we can  improve both Rust the language and the entire Rust ecosystem. We look forward to continuing working for and with you for 2020 and beyond!&lt;/p&gt;
</content>

        <author>
            <name>The Rust Survey Team</name>
        </author>
    </entry>
    
    <entry>
        <title>docs.rs now allows you to choose your build targets</title>
        <link rel="alternate" href="https://blog.rust-lang.org/2020/03/15/docs-rs-opt-into-fewer-targets.html" type="text/html" title="docs.rs now allows you to choose your build targets" />
        <published>2020-03-15T00:00:00+00:00</published>
        <updated>2020-03-15T00:00:00+00:00</updated>
        <id>https://blog.rust-lang.org/2020/03/15/docs-rs-opt-into-fewer-targets.html</id>
        <content type="html" xml:base="https://blog.rust-lang.org/2020/03/15/docs-rs-opt-into-fewer-targets.html">&lt;p&gt;Recently, &lt;a href=&quot;https://docs.rs/&quot;&gt;docs.rs&lt;/a&gt; added a feature that allows crates to opt-out of building on all targets.
If you don't need to build on all targets, you can enable this feature to reduce your build times.&lt;/p&gt;
&lt;h2&gt;&lt;a href=&quot;#what-does-the-feature-do&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot; id=&quot;what-does-the-feature-do&quot;&gt;&lt;/a&gt;What does the feature do?&lt;/h2&gt;
&lt;p&gt;By default, docs.rs builds all crates published to &lt;a href=&quot;https://crates.io/&quot;&gt;crates.io&lt;/a&gt; for &lt;a href=&quot;https://docs.rs/about#metadata&quot;&gt;every tier one target&lt;/a&gt;.
However, most crates have the same content on all targets.
Of the platform-dependent crates, almost all target a single platform,
and do not need to be built on other targets.
For example, &lt;a href=&quot;https://docs.rs/winapi/&quot;&gt;&lt;code&gt;winapi&lt;/code&gt;&lt;/a&gt; only has documentation on the &lt;code&gt;x86_64-pc-windows-msvc&lt;/code&gt;
and &lt;code&gt;i686-pc-windows-msvc&lt;/code&gt; targets, and is blank on all others.&lt;/p&gt;
&lt;p&gt;This feature allows you to request building only on specific targets.
For example, &lt;a href=&quot;https://docs.rs/winapi/&quot;&gt;&lt;code&gt;winapi&lt;/code&gt;&lt;/a&gt; could opt into only building windows targets
by putting the following in its &lt;code&gt;Cargo.toml&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-toml&quot;&gt;[package.metadata.docs.rs]
# This also sets the default target to `x86_64-pc-windows-msvc`
targets = [&amp;quot;x86_64-pc-windows-msvc&amp;quot;, &amp;quot;i686-pc-windows-msvc&amp;quot;]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If you only need a single target, it's even simpler:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-toml&quot;&gt;[package.metadata.docs.rs]
# This sets the default target to `x86_64-unknown-linux-gnu`
# and only builds that target
targets = [&amp;quot;x86_64-unknown-linux-gnu&amp;quot;]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;See the &lt;a href=&quot;https://docs.rs/about#metadata&quot;&gt;docs.rs documentation&lt;/a&gt; for more details about how to opt-in.&lt;/p&gt;
&lt;h2&gt;&lt;a href=&quot;#how-does-this-help-my-crate&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot; id=&quot;how-does-this-help-my-crate&quot;&gt;&lt;/a&gt;How does this help my crate?&lt;/h2&gt;
&lt;p&gt;Instead of building for every tier-one target, you can build for only a single target,
reducing your documentation build times by a factor of 6.
This can especially help large crates or projects with many crates
that take several hours to document.&lt;/p&gt;
&lt;h2&gt;&lt;a href=&quot;#how-does-this-help-docsrs&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot; id=&quot;how-does-this-help-docsrs&quot;&gt;&lt;/a&gt;How does this help docs.rs?&lt;/h2&gt;
&lt;p&gt;Building all crates from crates.io can take a long time!
Building fewer targets will allow us to reduce wait times for every crate.
Additionally, this will decrease the growth of our storage costs, improving the sustainability of the project.&lt;/p&gt;
&lt;h2&gt;&lt;a href=&quot;#possible-future-changes&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot; id=&quot;possible-future-changes&quot;&gt;&lt;/a&gt;Possible future changes&lt;/h2&gt;
&lt;p&gt;We're considering turning this on by default in the future;
i.e. only building for one target unless multiple targets are specifically requested.
However, we don't want to break anyone's documentation, so we're making this feature opt-in  while we decide the migration strategy.&lt;/p&gt;
&lt;p&gt;This change will also make it easier for docs.rs to build
for targets that are not tier one, such as embedded targets.&lt;/p&gt;
&lt;h2&gt;&lt;a href=&quot;#how-can-i-learn-more&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot; id=&quot;how-can-i-learn-more&quot;&gt;&lt;/a&gt;How can I learn more?&lt;/h2&gt;
&lt;p&gt;You can learn more about the change in &lt;a href=&quot;https://github.com/rust-lang/docs.rs/issues/343&quot;&gt;the issue proposing it&lt;/a&gt; and &lt;a href=&quot;https://github.com/rust-lang/docs.rs/pull/632&quot;&gt;the PR with the implementation&lt;/a&gt;. Details on building non-tier-one targets are also available &lt;a href=&quot;https://github.com/rust-lang/docs.rs/issues/563#issuecomment-573321498&quot;&gt;in the issue requesting the feature&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;More information on targets and what it means to be a tier-one target is available in the &lt;a href=&quot;https://forge.rust-lang.org/release/platform-support.html&quot;&gt;platform support&lt;/a&gt; page.&lt;/p&gt;
</content>

        <author>
            <name>Joshua Nelson</name>
        </author>
    </entry>
    
</feed>

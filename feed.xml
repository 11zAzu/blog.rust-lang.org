<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
    <generator uri="https://blog.rust-lang.org/" version="0.1.0">Rust Blog</generator>
    <link href="https://blog.rust-lang.org/feed.xml" rel="self" type="application/atom+xml" />
    <link href="https://blog.rust-lang.org/" rel="alternate" type="text/html" />
    <id>https://blog.rust-lang.org/</id>
    <title>Rust Blog</title>
    <subtitle>Empowering everyone to build reliable and efficient software.</subtitle>
    <author>
        <name>Maintained by the Rust Team.</name>
        <uri>https://github.com/rust-lang/blog.rust-lang.org/</uri>
    </author>
    <updated>2021-05-10T14:40:39+00:00</updated>

    
    <entry>
        <title>Announcing Rust 1.52.1</title>
        <link rel="alternate" href="https://blog.rust-lang.org/2021/05/10/Rust-1.52.1.html" type="text/html" title="Announcing Rust 1.52.1" />
        <published>2021-05-10T00:00:00+00:00</published>
        <updated>2021-05-10T00:00:00+00:00</updated>
        <id>https://blog.rust-lang.org/2021/05/10/Rust-1.52.1.html</id>
        <content type="html" xml:base="https://blog.rust-lang.org/2021/05/10/Rust-1.52.1.html">&lt;p&gt;The Rust team has prepared a new release, 1.52.1, working around a bug in
incremental compilation which was made into a compiler error in 1.52.0. We
recommend all Rust users, including those currently using stable versions prior
to 1.52.0, upgrade to 1.52.1 or disable incremental compilation. Guidance on how
to do so is available below.&lt;/p&gt;
&lt;p&gt;If you have a previous version of Rust installed via rustup, getting Rust
1.52.1 is as easy as:&lt;/p&gt;
&lt;pre&gt;&lt;code class&#x3D;&quot;language-console&quot;&gt;rustup update stable
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If you don&#x27;t have it already, you can &lt;a href&#x3D;&quot;https://www.rust-lang.org/install.html&quot;&gt;get &lt;code&gt;rustup&lt;/code&gt;&lt;/a&gt;
from the appropriate page on our website.&lt;/p&gt;
&lt;h1&gt;&lt;a href&#x3D;&quot;#summary&quot; aria-hidden&#x3D;&quot;true&quot; class&#x3D;&quot;anchor&quot; id&#x3D;&quot;summary&quot;&gt;&lt;/a&gt;Summary&lt;/h1&gt;
&lt;p&gt;This release works around broken builds on 1.52.0, which are caused by newly
added verification. The bugs this verification detects are present in all Rust
versions&lt;sup class&#x3D;&quot;footnote-ref&quot;&gt;&lt;a href&#x3D;&quot;#fn1&quot; id&#x3D;&quot;fnref1&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;, and can trigger miscompilations in incremental builds, so downgrading
to a prior stable version is not a fix.&lt;/p&gt;
&lt;p&gt;Users are encouraged to upgrade to 1.52.1 or disable incremental in their local
environment if on a prior version: please see the &lt;a href&#x3D;&quot;#what-should-a-rust-programmer-do-in-response&quot;&gt;what you should do&lt;/a&gt;
section for details on how to do so.&lt;/p&gt;
&lt;p&gt;Incremental compilation is off by default for release builds, so few
production builds should be affected (only for users who have opted in).&lt;/p&gt;
&lt;p&gt;Miscompilations that can arise from the bugs in incremental compilation generate incorrect code in final
artifacts, essentially producing malformed binaries, which means that in theory
any behavior is possible. In practice we are currently only aware of one
particular known miscompilation, but bugs due to incremental are notoriously
hard to track down: users frequently simply rebuild after some light editing if
they see unexpected results from their binaries, and this often causes
sufficient recompilation to fix the bug(s).&lt;/p&gt;
&lt;p&gt;This post is going to:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Explain &lt;a href&#x3D;&quot;#what-does-the-error-look-like&quot;&gt;what the errors look like&lt;/a&gt;,&lt;/li&gt;
&lt;li&gt;Explain &lt;a href&#x3D;&quot;#what-are-fingerprints-why-are-we-checking-them&quot;&gt;what the check does&lt;/a&gt;, at a high level,&lt;/li&gt;
&lt;li&gt;Explain &lt;a href&#x3D;&quot;#how-does-this-show-up&quot;&gt;how the check is presenting itself&lt;/a&gt; in the Rust 1.52.0 release,&lt;/li&gt;
&lt;li&gt;Tell you &lt;a href&#x3D;&quot;#what-should-a-rust-programmer-do-in-response&quot;&gt;what you should do&lt;/a&gt; if you see an unstable fingerprint on your project,&lt;/li&gt;
&lt;li&gt;Describe our plans for &lt;a href&#x3D;&quot;#what-is-the-rust-project-going-to-do-to-fix-this&quot;&gt;how the Rust project will address&lt;/a&gt; the problems discussed here.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;&lt;a href&#x3D;&quot;#what-does-the-error-look-like&quot; aria-hidden&#x3D;&quot;true&quot; class&#x3D;&quot;anchor&quot; id&#x3D;&quot;what-does-the-error-look-like&quot;&gt;&lt;/a&gt;What does the error look like?&lt;/h2&gt;
&lt;p&gt;The error message looks something like this, with the key piece being the &amp;quot;found
unstable fingerprints&amp;quot; text.&lt;/p&gt;
&lt;pre&gt;&lt;code class&#x3D;&quot;language-text&quot;&gt;thread &#x27;rustc&#x27; panicked at &#x27;assertion failed: &#x60;(left &#x3D;&#x3D; right)&#x60;
  left: &#x60;Some(Fingerprint(4565771098143344972, 7869445775526300234))&#x60;,
  right: &#x60;Some(Fingerprint(14934403843752251060, 623484215826468126))&#x60;: found unstable fingerprints for &amp;lt;massive text describing rustc internals elided&amp;gt;

error: internal compiler error: unexpected panic

note: the compiler unexpectedly panicked. this is a bug.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This is the error caused by the internal consistency check, and as stated in the diagnostic, it yields an &amp;quot;Internal Compiler Error&amp;quot; (or ICE). In other words, it represents a bug in the internals of the Rust compiler itself. In &lt;em&gt;this&lt;/em&gt; case, the ICE is revealing a bug in incremental compilation that predates the 1.52.0 release and could result in miscompilation if it had not been caught.&lt;/p&gt;
&lt;h2&gt;&lt;a href&#x3D;&quot;#what-are-fingerprints-why-are-we-checking-them&quot; aria-hidden&#x3D;&quot;true&quot; class&#x3D;&quot;anchor&quot; id&#x3D;&quot;what-are-fingerprints-why-are-we-checking-them&quot;&gt;&lt;/a&gt;What are fingerprints? Why are we checking them?&lt;/h2&gt;
&lt;p&gt;The Rust compiler has support for &amp;quot;incremental compilation&amp;quot;, which has been described in a &lt;a href&#x3D;&quot;https://blog.rust-lang.org/2016/09/08/incremental.html&quot;&gt;2016 blog post&lt;/a&gt;. When incremental compilation is turned on, the compiler breaks the input source into pieces, and tracks how those input pieces influence the final build product. Then, when the inputs change, it detects this and reuses artifacts from previous builds, striving to expend effort solely on building the parts that need to respond to the changes to the input source code.&lt;/p&gt;
&lt;p&gt;Fingerprints are part of our architecture for detecting when inputs change. More specifically, a fingerprint (along with some other state to establish context) is a 128-bit value intended to uniquely identify internal values used within the compiler. Some compiler-internal results are stored on disk (&amp;quot;cached&amp;quot;) between runs. Fingerprints are used to validate that a newly computed result is unchanged from the cached result. (More details about this are available in the &lt;a href&#x3D;&quot;https://rustc-dev-guide.rust-lang.org/queries/incremental-compilation-in-detail.html#checking-query-results-for-changes-hashstable-and-fingerprints&quot;&gt;relevant chapter of the rustc dev guide&lt;/a&gt;.)&lt;/p&gt;
&lt;p&gt;The fingerprint stability check is a safeguard asserting internal consistency of
the fingerprints. Sometimes the compiler is forced to rerun a query, and expects
that the output is the same as from a prior incremental compilation session. The
newly enabled verification checks that the value is indeed as expected, rather
than assuming so. In some cases, due to bugs in the compiler&#x27;s implementation,
this was not actually the case.&lt;/p&gt;
&lt;h2&gt;&lt;a href&#x3D;&quot;#history&quot; aria-hidden&#x3D;&quot;true&quot; class&#x3D;&quot;anchor&quot; id&#x3D;&quot;history&quot;&gt;&lt;/a&gt;History&lt;/h2&gt;
&lt;p&gt;We &lt;a href&#x3D;&quot;https://github.com/rust-lang/rust/pull/45867&quot;&gt;initially added&lt;/a&gt; these fingerprint checks as a tool to use when
developing rustc itself, back in 2017. It was solely provided via an unstable
&lt;code&gt;-Z&lt;/code&gt; flag, only available to nightly and development builds.&lt;/p&gt;
&lt;p&gt;More recently, in March, we encountered a &lt;a href&#x3D;&quot;https://github.com/rust-lang/rust/issues/82920&quot;&gt;miscompilation&lt;/a&gt; that led us to &lt;a href&#x3D;&quot;https://github.com/rust-lang/rust/pull/83007&quot;&gt;turn on &lt;code&gt;verify-ich&lt;/code&gt; by default&lt;/a&gt;. The Rust compiler team decided it was better to catch fingerprint problems and abort compilation, rather than allow for potential miscompilations (and subsequent misbehavior) to sneak into Rust programmer&#x27;s binaries.&lt;/p&gt;
&lt;p&gt;When we first turned on the fingerprint checks by default, there was a steady
stream of issues filed by users of the nightly (and beta) toolchains, and steady
progress has been made on identifying fixes, a number of which have already
landed.&lt;/p&gt;
&lt;p&gt;In the past week, we had started &lt;a href&#x3D;&quot;https://github.com/rust-lang/rust/issues/84970&quot;&gt;making plans&lt;/a&gt; to improve the
user-experience, so that the diagnostic issued by the check would do a better
job of telling the programmer what to do in response. Unfortunately, this was
done under the assumption that the new verification would ship in 1.53, not
1.52.&lt;/p&gt;
&lt;p&gt;It turns out &lt;code&gt;verify-ich&lt;/code&gt; was turned on in version 1.52.0, which was &lt;a href&#x3D;&quot;/2021/05/06/Rust-1.52.0.html&quot;&gt;released recently&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Today&#x27;s new release, 1.52.1, works around the breakage caused by the newly added
verification by temporarily changing the defaults in the Rust compiler to disable
incremental unless the user knowingly opts in.&lt;/p&gt;
&lt;h2&gt;&lt;a href&#x3D;&quot;#how-does-this-show-up&quot; aria-hidden&#x3D;&quot;true&quot; class&#x3D;&quot;anchor&quot; id&#x3D;&quot;how-does-this-show-up&quot;&gt;&lt;/a&gt;How does this show up&lt;/h2&gt;
&lt;p&gt;Essentially, for some crates, certain sequences of edit-compile cycles will cause &lt;code&gt;rustc&lt;/code&gt; to hit the &amp;quot;unstable fingerprints&amp;quot; ICE. I showed one example at the start of this blog post.&lt;/p&gt;
&lt;p&gt;Another recent example looks &lt;a href&#x3D;&quot;https://github.com/rust-lang/rust/issues/85039&quot;&gt;like this&lt;/a&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class&#x3D;&quot;language-text&quot;&gt;thread &#x27;rustc&#x27; panicked at &#x27;found unstable fingerprints for predicates_of(&amp;lt;massive text describing rustc internals elided&amp;gt;)&#x27;, /rustc/.../compiler/rustc_query_system/src/query/plumbing.rs:593:5
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;They all arise from inconsistencies when comparing the incremental-compilation cache stored on disk against the values computed during a current &lt;code&gt;rustc&lt;/code&gt; invocation, which means they all arise from using incremental compilation.&lt;/p&gt;
&lt;p&gt;There are several ways that you may have incremental compilation turned on:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;You may be building with the &lt;code&gt;dev&lt;/code&gt; or &lt;code&gt;test&lt;/code&gt; &lt;a href&#x3D;&quot;https://doc.rust-lang.org/cargo/reference/profiles.html&quot;&gt;profiles&lt;/a&gt; which default to having incremental compilation enabled.&lt;/li&gt;
&lt;li&gt;You may have set the &lt;a href&#x3D;&quot;https://doc.rust-lang.org/cargo/reference/environment-variables.html#environment-variables-cargo-reads&quot;&gt;environment variable&lt;/a&gt; &lt;code&gt;CARGO_INCREMENTAL&#x3D;1&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;You may have enabled the &lt;code&gt;build.incremental&lt;/code&gt; &lt;a href&#x3D;&quot;https://doc.rust-lang.org/cargo/reference/config.html#buildincremental&quot;&gt;setting in your Cargo config&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;You may have enabled the &lt;code&gt;incremental&lt;/code&gt; &lt;a href&#x3D;&quot;https://doc.rust-lang.org/cargo/reference/profiles.html#incremental&quot;&gt;setting in your Cargo.toml&lt;/a&gt; for a given profile&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;If your project has not adjusted the defaults, then when running &lt;code&gt;cargo build --release&lt;/code&gt; or otherwise in the &lt;code&gt;release&lt;/code&gt; profile configuration incremental is
disabled on all Rust versions&lt;sup class&#x3D;&quot;footnote-ref&quot;&gt;&lt;a href&#x3D;&quot;#fn1&quot; id&#x3D;&quot;fnref1&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;, and these issues should not affect your release
builds.&lt;/p&gt;
&lt;h2&gt;&lt;a href&#x3D;&quot;#what-should-a-rust-programmer-do-in-response&quot; aria-hidden&#x3D;&quot;true&quot; class&#x3D;&quot;anchor&quot; id&#x3D;&quot;what-should-a-rust-programmer-do-in-response&quot;&gt;&lt;/a&gt;What should a Rust programmer do in response&lt;/h2&gt;
&lt;p&gt;The Internal Compiler Error asks you to report a bug, and if you can do so, we still want that information. We &lt;em&gt;want&lt;/em&gt; to know about the cases that are failing.&lt;/p&gt;
&lt;p&gt;But regardless of whether or not you file a bug, the problem can be worked around on your end by either:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;upgrading to 1.52.1, if you have not yet done so (which will disable
incremental for you), or&lt;/li&gt;
&lt;li&gt;deleting your incremental compilation cache (e.g. by running &lt;code&gt;cargo clean&lt;/code&gt;), or&lt;/li&gt;
&lt;li&gt;forcing incremental compilation to be disabled, by setting &lt;code&gt;CARGO_INCREMENTAL&#x3D;0&lt;/code&gt; in your environment or &lt;code&gt;build.incremental&lt;/code&gt; to &lt;code&gt;false&lt;/code&gt; in the &lt;code&gt;config.toml&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;We recommend that users of 1.52.0 upgrade to 1.52.1, which disables incremental
compilation.&lt;/p&gt;
&lt;p&gt;We do &lt;em&gt;not&lt;/em&gt; recommend that users of 1.52.0 downgrade to an earlier version of Rust in response to this problem. As noted above, there is at least one instance of a silent &lt;a href&#x3D;&quot;https://github.com/rust-lang/rust/issues/82920&quot;&gt;miscompilation&lt;/a&gt; caused by incremental compilation that was not caught until we added the fingerprint checking.&lt;/p&gt;
&lt;p&gt;If a user is willing to deal with the incremental verification ICE&#x27;s, and wishes
to opt back into the 1.52.0 behavior, they may set &lt;code&gt;RUSTC_FORCE_INCREMENTAL&lt;/code&gt; to
&lt;code&gt;1&lt;/code&gt; in their environment. The Rust compiler will then respect the
&lt;code&gt;-Cincremental&lt;/code&gt; option passed by Cargo, and things will work as before, though
with the added verification. Note that this flag does not enable incremental if
it has not already been separately enabled (whether by Cargo or otherwise).&lt;/p&gt;
&lt;p&gt;If you are currently using a toolchain prior to 1.52.0, and wish to continue
doing so, we recommend that you disable incremental compilation to avoid hitting
silent miscompilations.&lt;/p&gt;
&lt;p&gt;On all Rust builds since incremental has landed, it has been a major
improvement to compile times for many users, and has only improved over time. We
acknowledge that the workarounds presented here and recommendations are painful,
and will be working hard to ensure the situation is as temporary as possible.&lt;/p&gt;
&lt;h2&gt;&lt;a href&#x3D;&quot;#what-is-the-rust-project-going-to-do-to-fix-this&quot; aria-hidden&#x3D;&quot;true&quot; class&#x3D;&quot;anchor&quot; id&#x3D;&quot;what-is-the-rust-project-going-to-do-to-fix-this&quot;&gt;&lt;/a&gt;What is the Rust project going to do to fix this&lt;/h2&gt;
&lt;h3&gt;&lt;a href&#x3D;&quot;#short-term-plan&quot; aria-hidden&#x3D;&quot;true&quot; class&#x3D;&quot;anchor&quot; id&#x3D;&quot;short-term-plan&quot;&gt;&lt;/a&gt;Short-term plan&lt;/h3&gt;
&lt;p&gt;We have issued 1.52.1 today which:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Disables incremental compilation in the Rust compiler (unless asked for by a
new environment variable, &lt;code&gt;RUSTC_FORCE_INCREMENTAL&#x3D;1&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;Improves diagnostic output for the new verification if incremental compilation is enabled,
indicating how to work around the bugs by purging incremental state or
disabling incremental.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This is intended to be a mitigation that helps the majority of Rust users have
an upgrade path to a safe Rust compiler which does not have the risk of
miscompiling their code, but also provide the option for users willing to deal
with the errors to do so.&lt;/p&gt;
&lt;p&gt;We expect to continue to actively invest in fixing the bugs, and depending on
our confidence in the fixes, may issue a 1.52.2 point release which backports
those fixes to the stable channel. Users wishing to help us test can use the
nightly channel, and report bugs to rust-lang/rust with any ICEs they
are seeing.&lt;/p&gt;
&lt;p&gt;We are also currently not planning to disable incremental on the beta channel,
but this decision has not been firmly committed to. A number of fixes are
available on 1.53 beta today, so users who wish to continue using incremental
may want to switch to that. Nightly will always have the latest in fixes, of
course.&lt;/p&gt;
&lt;h3&gt;&lt;a href&#x3D;&quot;#long-term-plan&quot; aria-hidden&#x3D;&quot;true&quot; class&#x3D;&quot;anchor&quot; id&#x3D;&quot;long-term-plan&quot;&gt;&lt;/a&gt;Long-term plan&lt;/h3&gt;
&lt;p&gt;The long-term plan is to fix the bugs! Incremental compilation is the only realistic way for the Rust compiler to be able to provide a fast edit-compile-run cycle for all of its programmers, and so we need to address &lt;a href&#x3D;&quot;https://github.com/rust-lang/rust/issues?q&#x3D;is%3Aissue+is%3Aopen+unstable+fingerprints&quot;&gt;all of the issues&lt;/a&gt; that have been identified thus far via &lt;code&gt;verify-ich&lt;/code&gt;. (There are 32 such issues as of this writing, though many are duplicates.)&lt;/p&gt;
&lt;p&gt;We are actively investing in this, and a number of bugs have already been
identified and fixed. Depending on the state of the fixes, future stable
releases (1.53 and onwards) will likely re-enable incremental compilation.&lt;/p&gt;
&lt;p&gt;The Rust teams will also be developing plans to ensure we have better tracking
systems in place in the future for bugs, both to prevent situations like this
from arising again, but also to further increase the stability of our releases
by tracking bugs more accurately as they propagate across channels.&lt;/p&gt;
&lt;section class&#x3D;&quot;footnotes&quot;&gt;
&lt;ol&gt;
&lt;li id&#x3D;&quot;fn1&quot;&gt;
&lt;p&gt;Since incremental was first enabled, which was in Rust 1.24. &lt;a href&#x3D;&quot;#fnref1&quot; class&#x3D;&quot;footnote-backref&quot;&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</content>

        <author>
            <name>Felix Klock, Mark Rousskov</name>
        </author>
    </entry>
    
    <entry>
        <title>Announcing Rust 1.52.0</title>
        <link rel="alternate" href="https://blog.rust-lang.org/2021/05/06/Rust-1.52.0.html" type="text/html" title="Announcing Rust 1.52.0" />
        <published>2021-05-06T00:00:00+00:00</published>
        <updated>2021-05-06T00:00:00+00:00</updated>
        <id>https://blog.rust-lang.org/2021/05/06/Rust-1.52.0.html</id>
        <content type="html" xml:base="https://blog.rust-lang.org/2021/05/06/Rust-1.52.0.html">&lt;p&gt;The Rust team is happy to announce a new version of Rust, 1.52.0. Rust is a
programming language that is empowering everyone to build reliable and
efficient software.&lt;/p&gt;
&lt;p&gt;If you have a previous version of Rust installed via rustup, getting Rust
1.52.0 is as easy as:&lt;/p&gt;
&lt;pre&gt;&lt;code class&#x3D;&quot;language-console&quot;&gt;rustup update stable
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If you don&#x27;t have it already, you can &lt;a href&#x3D;&quot;https://www.rust-lang.org/install.html&quot;&gt;get &lt;code&gt;rustup&lt;/code&gt;&lt;/a&gt;
from the appropriate page on our website, and check out the
&lt;a href&#x3D;&quot;https://github.com/rust-lang/rust/blob/master/RELEASES.md#version-1520-2021-05-06&quot;&gt;detailed release notes for 1.52.0&lt;/a&gt; on GitHub.&lt;/p&gt;
&lt;h2&gt;&lt;a href&#x3D;&quot;#whats-in-1520-stable&quot; aria-hidden&#x3D;&quot;true&quot; class&#x3D;&quot;anchor&quot; id&#x3D;&quot;whats-in-1520-stable&quot;&gt;&lt;/a&gt;What&#x27;s in 1.52.0 stable&lt;/h2&gt;
&lt;p&gt;The most significant change in this release is not to the language or standard
libraries, but rather an enhancement to tooling support for Clippy.&lt;/p&gt;
&lt;p&gt;Previously, running &lt;code&gt;cargo check&lt;/code&gt; followed by &lt;code&gt;cargo clippy&lt;/code&gt; wouldn&#x27;t actually
run Clippy: the build caching in Cargo didn&#x27;t differentiate between the two. In
1.52, however, this has been fixed, which means that users will get the expected
behavior independent of the order in which they run the two commands.&lt;/p&gt;
&lt;h3&gt;&lt;a href&#x3D;&quot;#stabilized-apis&quot; aria-hidden&#x3D;&quot;true&quot; class&#x3D;&quot;anchor&quot; id&#x3D;&quot;stabilized-apis&quot;&gt;&lt;/a&gt;Stabilized APIs&lt;/h3&gt;
&lt;p&gt;The following methods were stabilized.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://doc.rust-lang.org/stable/std/fmt/struct.Arguments.html#method.as_str&quot;&gt;&lt;code&gt;Arguments::as_str&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://doc.rust-lang.org/std/primitive.char.html#associatedconstant.MAX&quot;&gt;&lt;code&gt;char::MAX&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://doc.rust-lang.org/std/primitive.char.html#associatedconstant.REPLACEMENT_CHARACTER&quot;&gt;&lt;code&gt;char::REPLACEMENT_CHARACTER&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://doc.rust-lang.org/std/primitive.char.html#associatedconstant.UNICODE_VERSION&quot;&gt;&lt;code&gt;char::UNICODE_VERSION&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://doc.rust-lang.org/std/primitive.char.html#method.decode_utf16&quot;&gt;&lt;code&gt;char::decode_utf16&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://doc.rust-lang.org/std/primitive.char.html#method.from_digit&quot;&gt;&lt;code&gt;char::from_digit&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://doc.rust-lang.org/std/primitive.char.html#method.from_u32_unchecked&quot;&gt;&lt;code&gt;char::from_u32_unchecked&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://doc.rust-lang.org/std/primitive.char.html#method.from_u32&quot;&gt;&lt;code&gt;char::from_u32&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://doc.rust-lang.org/stable/std/primitive.slice.html#method.partition_point&quot;&gt;&lt;code&gt;slice::partition_point&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://doc.rust-lang.org/stable/std/primitive.str.html#method.rsplit_once&quot;&gt;&lt;code&gt;str::rsplit_once&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://doc.rust-lang.org/stable/std/primitive.str.html#method.split_once&quot;&gt;&lt;code&gt;str::split_once&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The following previously stable APIs are now &lt;code&gt;const&lt;/code&gt;.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://doc.rust-lang.org/stable/std/primitive.char.html#method.len_utf8&quot;&gt;&lt;code&gt;char::len_utf8&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://doc.rust-lang.org/stable/std/primitive.char.html#method.len_utf16&quot;&gt;&lt;code&gt;char::len_utf16&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://doc.rust-lang.org/stable/std/primitive.char.html#method.to_ascii_uppercase&quot;&gt;&lt;code&gt;char::to_ascii_uppercase&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://doc.rust-lang.org/stable/std/primitive.char.html#method.to_ascii_lowercase&quot;&gt;&lt;code&gt;char::to_ascii_lowercase&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://doc.rust-lang.org/stable/std/primitive.char.html#method.eq_ignore_ascii_case&quot;&gt;&lt;code&gt;char::eq_ignore_ascii_case&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://doc.rust-lang.org/stable/std/primitive.u8.html#method.to_ascii_uppercase&quot;&gt;&lt;code&gt;u8::to_ascii_uppercase&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://doc.rust-lang.org/stable/std/primitive.u8.html#method.to_ascii_lowercase&quot;&gt;&lt;code&gt;u8::to_ascii_lowercase&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://doc.rust-lang.org/stable/std/primitive.u8.html#method.eq_ignore_ascii_case&quot;&gt;&lt;code&gt;u8::eq_ignore_ascii_case&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a href&#x3D;&quot;#other-changes&quot; aria-hidden&#x3D;&quot;true&quot; class&#x3D;&quot;anchor&quot; id&#x3D;&quot;other-changes&quot;&gt;&lt;/a&gt;Other changes&lt;/h3&gt;
&lt;p&gt;There are other changes in the Rust 1.52.0 release: check out what changed in &lt;a href&#x3D;&quot;https://github.com/rust-lang/rust/blob/master/RELEASES.md#version-1520-2021-05-06&quot;&gt;Rust&lt;/a&gt;, &lt;a href&#x3D;&quot;https://github.com/rust-lang/cargo/blob/master/CHANGELOG.md#cargo-152-2021-05-06&quot;&gt;Cargo&lt;/a&gt;, and &lt;a href&#x3D;&quot;https://github.com/rust-lang/rust-clippy/blob/master/CHANGELOG.md#rust-152&quot;&gt;Clippy&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;&lt;a href&#x3D;&quot;#contributors-to-1520&quot; aria-hidden&#x3D;&quot;true&quot; class&#x3D;&quot;anchor&quot; id&#x3D;&quot;contributors-to-1520&quot;&gt;&lt;/a&gt;Contributors to 1.52.0&lt;/h3&gt;
&lt;p&gt;Many people came together to create Rust 1.52.0. We couldn&#x27;t have done it without all of you. &lt;a href&#x3D;&quot;https://thanks.rust-lang.org/rust/1.52.0/&quot;&gt;Thanks!&lt;/a&gt;&lt;/p&gt;
</content>

        <author>
            <name>The Rust Release Team</name>
        </author>
    </entry>
    
    <entry>
        <title>Announcing Rustup 1.24.1</title>
        <link rel="alternate" href="https://blog.rust-lang.org/2021/04/29/Rustup-1.24.1.html" type="text/html" title="Announcing Rustup 1.24.1" />
        <published>2021-04-29T00:00:00+00:00</published>
        <updated>2021-04-29T00:00:00+00:00</updated>
        <id>https://blog.rust-lang.org/2021/04/29/Rustup-1.24.1.html</id>
        <content type="html" xml:base="https://blog.rust-lang.org/2021/04/29/Rustup-1.24.1.html">&lt;p&gt;The rustup working group is happy to announce the release of rustup version 1.24.1. &lt;a href&#x3D;&quot;https://rustup.rs&quot;&gt;Rustup&lt;/a&gt; is the recommended tool to install &lt;a href&#x3D;&quot;https://www.rust-lang.org&quot;&gt;Rust&lt;/a&gt;, a programming language that is empowering everyone to build reliable and efficient software.&lt;/p&gt;
&lt;p&gt;If you have a previous version of rustup installed, getting rustup 1.24.1 is as easy as closing your IDE and running:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;rustup self update
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Rustup will also automatically update itself at the end of a normal toolchain update:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;rustup update
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If you don&#x27;t have it already, you can &lt;a href&#x3D;&quot;https://rustup.rs&quot;&gt;get rustup&lt;/a&gt; from the appropriate page on our website.&lt;/p&gt;
&lt;h2&gt;&lt;a href&#x3D;&quot;#whats-new-in-rustup-1241&quot; aria-hidden&#x3D;&quot;true&quot; class&#x3D;&quot;anchor&quot; id&#x3D;&quot;whats-new-in-rustup-1241&quot;&gt;&lt;/a&gt;What&#x27;s new in rustup 1.24.1&lt;/h2&gt;
&lt;p&gt;Firstly, if you have not read the &lt;a href&#x3D;&quot;https://blog.rust-lang.org/2021/04/27/Rustup-1.24.0.html&quot;&gt;previous announcement&lt;/a&gt; then in brief, 1.24
introduces better support for low memory systems, installs itself into the Add/Remove programs
list on Windows, and now supports using &lt;code&gt;rust-toolchain.toml&lt;/code&gt; files.&lt;/p&gt;
&lt;p&gt;Shortly after publishing the 1.24.0 release of Rustup, we got reports of &lt;a href&#x3D;&quot;https://github.com/rust-lang/rustup/issues/2737&quot;&gt;a regression&lt;/a&gt;
preventing users from running &lt;code&gt;rustfmt&lt;/code&gt; and &lt;code&gt;cargo fmt&lt;/code&gt; after upgrading to
Rustup 1.24.0. To limit the damage we &lt;strong&gt;reverted&lt;/strong&gt; the release to version
1.23.1. The only substantive change between 1.24.0 and 1.24.1 is to correct this regression.&lt;/p&gt;
&lt;h3&gt;&lt;a href&#x3D;&quot;#other-changes&quot; aria-hidden&#x3D;&quot;true&quot; class&#x3D;&quot;anchor&quot; id&#x3D;&quot;other-changes&quot;&gt;&lt;/a&gt;Other changes&lt;/h3&gt;
&lt;p&gt;You can check out all the changes to Rustup for 1.24.0 and 1.24.1 in the &lt;a href&#x3D;&quot;https://github.com/rust-lang/rustup/blob/stable/CHANGELOG.md&quot;&gt;changelog&lt;/a&gt;!&lt;/p&gt;
&lt;p&gt;Rustup&#x27;s documentation is also available in &lt;a href&#x3D;&quot;https://rust-lang.github.io/rustup/&quot;&gt;the rustup book&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;&lt;a href&#x3D;&quot;#thanks&quot; aria-hidden&#x3D;&quot;true&quot; class&#x3D;&quot;anchor&quot; id&#x3D;&quot;thanks&quot;&gt;&lt;/a&gt;Thanks&lt;/h2&gt;
&lt;p&gt;Thanks again to all the contributors who made rustup 1.24.0 and 1.24.1 possible!&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Alex Chan&lt;/li&gt;
&lt;li&gt;Aloïs Micard&lt;/li&gt;
&lt;li&gt;Andrew Norton&lt;/li&gt;
&lt;li&gt;Avery Harnish&lt;/li&gt;
&lt;li&gt;chansuke&lt;/li&gt;
&lt;li&gt;Daniel Alley&lt;/li&gt;
&lt;li&gt;Daniel Silverstone&lt;/li&gt;
&lt;li&gt;Eduard Miller&lt;/li&gt;
&lt;li&gt;Eric Huss&lt;/li&gt;
&lt;li&gt;est31&lt;/li&gt;
&lt;li&gt;Gareth Hubball&lt;/li&gt;
&lt;li&gt;Gurkenglas&lt;/li&gt;
&lt;li&gt;Jakub Stasiak&lt;/li&gt;
&lt;li&gt;Joshua Nelson&lt;/li&gt;
&lt;li&gt;Jubilee (workingjubilee)&lt;/li&gt;
&lt;li&gt;kellda&lt;/li&gt;
&lt;li&gt;Michael Cooper&lt;/li&gt;
&lt;li&gt;Philipp Oppermann&lt;/li&gt;
&lt;li&gt;Robert Collins&lt;/li&gt;
&lt;li&gt;SHA Miao&lt;/li&gt;
&lt;li&gt;skim (sl4m)&lt;/li&gt;
&lt;li&gt;Tudor Brindus&lt;/li&gt;
&lt;li&gt;Vasili (3point2)&lt;/li&gt;
&lt;li&gt;наб (nabijaczleweli)&lt;/li&gt;
&lt;li&gt;二手掉包工程师 (hi-rustin)&lt;/li&gt;
&lt;/ul&gt;
</content>

        <author>
            <name>The Rustup Working Group</name>
        </author>
    </entry>
    
    <entry>
        <title>Announcing Rustup 1.24.0</title>
        <link rel="alternate" href="https://blog.rust-lang.org/2021/04/27/Rustup-1.24.0.html" type="text/html" title="Announcing Rustup 1.24.0" />
        <published>2021-04-27T00:00:00+00:00</published>
        <updated>2021-04-27T00:00:00+00:00</updated>
        <id>https://blog.rust-lang.org/2021/04/27/Rustup-1.24.0.html</id>
        <content type="html" xml:base="https://blog.rust-lang.org/2021/04/27/Rustup-1.24.0.html">&lt;blockquote&gt;
&lt;p&gt;Shortly after publishing the release we got reports of &lt;a href&#x3D;&quot;https://github.com/rust-lang/rustup/issues/2737&quot;&gt;a regression&lt;/a&gt;
preventing users from running &lt;code&gt;rustfmt&lt;/code&gt; and &lt;code&gt;cargo fmt&lt;/code&gt; after upgrading to
Rustup 1.24.0. To limit the damage we &lt;strong&gt;reverted&lt;/strong&gt; the release to version
1.23.1.&lt;/p&gt;
&lt;p&gt;If you have been affected by this issue you can revert to version 1.23.1 by
running the following command:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;rustup self update
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;The rustup working group is happy to announce the release of rustup version 1.24.0. &lt;a href&#x3D;&quot;https://rustup.rs&quot;&gt;Rustup&lt;/a&gt; is the recommended tool to install &lt;a href&#x3D;&quot;https://www.rust-lang.org&quot;&gt;Rust&lt;/a&gt;, a programming language that is empowering everyone to build reliable and efficient software.&lt;/p&gt;
&lt;p&gt;If you have a previous version of rustup installed, getting rustup 1.24.0 is as easy as closing your IDE and running:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;rustup self update
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Rustup will also automatically update itself at the end of a normal toolchain update:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;rustup update
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If you don&#x27;t have it already, you can &lt;a href&#x3D;&quot;https://rustup.rs&quot;&gt;get rustup&lt;/a&gt; from the appropriate page on our website.&lt;/p&gt;
&lt;h2&gt;&lt;a href&#x3D;&quot;#whats-new-in-rustup-1240&quot; aria-hidden&#x3D;&quot;true&quot; class&#x3D;&quot;anchor&quot; id&#x3D;&quot;whats-new-in-rustup-1240&quot;&gt;&lt;/a&gt;What&#x27;s new in rustup 1.24.0&lt;/h2&gt;
&lt;h3&gt;&lt;a href&#x3D;&quot;#support-of-rust-toolchaintoml-as-a-filename-for-specifying-toolchains&quot; aria-hidden&#x3D;&quot;true&quot; class&#x3D;&quot;anchor&quot; id&#x3D;&quot;support-of-rust-toolchaintoml-as-a-filename-for-specifying-toolchains&quot;&gt;&lt;/a&gt;Support of &lt;code&gt;rust-toolchain.toml&lt;/code&gt; as a filename for specifying toolchains.&lt;/h3&gt;
&lt;p&gt;Last year we released a new &lt;code&gt;toml&lt;/code&gt; format for the &lt;code&gt;rust-toolchain&lt;/code&gt; file. In order to bring Rustup closer into line with Cargo&#x27;s behaviour around &lt;code&gt;.cargo/config&lt;/code&gt; we now support the &lt;code&gt;.toml&lt;/code&gt; extension for that file. If you call the toolchain file &lt;code&gt;rust-toolchain.toml&lt;/code&gt; then you &lt;em&gt;must&lt;/em&gt; use the &lt;code&gt;toml&lt;/code&gt; format, rather than the legacy one-line format.&lt;/p&gt;
&lt;p&gt;If both &lt;code&gt;rust-toolchain&lt;/code&gt; and &lt;code&gt;rust-toolchain.toml&lt;/code&gt; are present, then the former will win out over the latter to ensure compatibility between Rustup versions.&lt;/p&gt;
&lt;h3&gt;&lt;a href&#x3D;&quot;#better-support-for-low-memory-systems&quot; aria-hidden&#x3D;&quot;true&quot; class&#x3D;&quot;anchor&quot; id&#x3D;&quot;better-support-for-low-memory-systems&quot;&gt;&lt;/a&gt;Better support for low-memory systems&lt;/h3&gt;
&lt;p&gt;Rustup&#x27;s component unpacker has been changed to have a smaller memory footprint when unpacking large components. This should permit users of memory-constrained systems such as some Raspberry Pi systems to install newer Rust toolchains which contain particularly large files.&lt;/p&gt;
&lt;h3&gt;&lt;a href&#x3D;&quot;#better-support-for-windows-addremove-programs&quot; aria-hidden&#x3D;&quot;true&quot; class&#x3D;&quot;anchor&quot; id&#x3D;&quot;better-support-for-windows-addremove-programs&quot;&gt;&lt;/a&gt;Better support for Windows Add/Remove programs&lt;/h3&gt;
&lt;p&gt;Fresh installations of Rustup on Windows will now install themselves into the program list so that you can trigger the uninstallation of Rustup via the Add/Remove programs dialogs similar to any other Windows program.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;This will only take effect on installation, so you will need to rerun &lt;code&gt;rustup-init.exe&lt;/code&gt; if you want this on your PC.&lt;/em&gt;&lt;/p&gt;
&lt;h3&gt;&lt;a href&#x3D;&quot;#other-changes&quot; aria-hidden&#x3D;&quot;true&quot; class&#x3D;&quot;anchor&quot; id&#x3D;&quot;other-changes&quot;&gt;&lt;/a&gt;Other changes&lt;/h3&gt;
&lt;p&gt;There are more changes in rustup 1.24.0: check them out in the &lt;a href&#x3D;&quot;https://github.com/rust-lang/rustup/blob/stable/CHANGELOG.md&quot;&gt;changelog&lt;/a&gt;!&lt;/p&gt;
&lt;p&gt;Rustup&#x27;s documentation is also available in &lt;a href&#x3D;&quot;https://rust-lang.github.io/rustup/&quot;&gt;the rustup book&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;&lt;a href&#x3D;&quot;#thanks&quot; aria-hidden&#x3D;&quot;true&quot; class&#x3D;&quot;anchor&quot; id&#x3D;&quot;thanks&quot;&gt;&lt;/a&gt;Thanks&lt;/h2&gt;
&lt;p&gt;Thanks to all the contributors who made rustup 1.24.0 possible!&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Alex Chan&lt;/li&gt;
&lt;li&gt;Aloïs Micard&lt;/li&gt;
&lt;li&gt;Andrew Norton&lt;/li&gt;
&lt;li&gt;Avery Harnish&lt;/li&gt;
&lt;li&gt;chansuke&lt;/li&gt;
&lt;li&gt;Daniel Alley&lt;/li&gt;
&lt;li&gt;Daniel Silverstone&lt;/li&gt;
&lt;li&gt;Eduard Miller&lt;/li&gt;
&lt;li&gt;Eric Huss&lt;/li&gt;
&lt;li&gt;est31&lt;/li&gt;
&lt;li&gt;Gareth Hubball&lt;/li&gt;
&lt;li&gt;Gurkenglas&lt;/li&gt;
&lt;li&gt;Jakub Stasiak&lt;/li&gt;
&lt;li&gt;Joshua Nelson&lt;/li&gt;
&lt;li&gt;Jubilee (workingjubilee)&lt;/li&gt;
&lt;li&gt;kellda&lt;/li&gt;
&lt;li&gt;Michael Cooper&lt;/li&gt;
&lt;li&gt;Philipp Oppermann&lt;/li&gt;
&lt;li&gt;Robert Collins&lt;/li&gt;
&lt;li&gt;SHA Miao&lt;/li&gt;
&lt;li&gt;skim (sl4m)&lt;/li&gt;
&lt;li&gt;Tudor Brindus&lt;/li&gt;
&lt;li&gt;Vasili (3point2)&lt;/li&gt;
&lt;li&gt;наб (nabijaczleweli)&lt;/li&gt;
&lt;li&gt;二手掉包工程师 (hi-rustin)&lt;/li&gt;
&lt;/ul&gt;
</content>

        <author>
            <name>The Rustup Working Group</name>
        </author>
    </entry>
    
    <entry>
        <title>Brainstorming Async Rust&#x27;s Shiny Future</title>
        <link rel="alternate" href="https://blog.rust-lang.org/2021/04/14/async-vision-doc-shiny-future.html" type="text/html" title="Brainstorming Async Rust&#x27;s Shiny Future" />
        <published>2021-04-14T00:00:00+00:00</published>
        <updated>2021-04-14T00:00:00+00:00</updated>
        <id>https://blog.rust-lang.org/2021/04/14/async-vision-doc-shiny-future.html</id>
        <content type="html" xml:base="https://blog.rust-lang.org/2021/04/14/async-vision-doc-shiny-future.html">&lt;p&gt;On March 18th, we &lt;a href&#x3D;&quot;https://blog.rust-lang.org/2021/03/18/async-vision-doc.html&quot;&gt;announced the start of the Async Vision Doc&lt;/a&gt; process. Since then, we&#x27;ve landed &lt;a href&#x3D;&quot;https://rust-lang.github.io/wg-async-foundations/vision/status_quo.html&quot;&gt;24 &amp;quot;status quo&amp;quot; stories&lt;/a&gt; and we have &lt;a href&#x3D;&quot;https://github.com/rust-lang/wg-async-foundations/pulls&quot;&gt;4 more stories in open PRs&lt;/a&gt;; &lt;a href&#x3D;&quot;https://twitter.com/ryan_levick/&quot;&gt;Ryan Levick&lt;/a&gt; and &lt;a href&#x3D;&quot;https://twitter.com/nikomatsakis/&quot;&gt;I&lt;/a&gt; have also hosted more than ten collaborative writing sessions over the course of the last few weeks, and we have &lt;a href&#x3D;&quot;https://smallcultfollowing.com/babysteps/blog/2021/04/12/async-vision-doc-writing-sessions-v/&quot;&gt;more scheduled for this week&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Now that we have a good base of &amp;quot;status quo&amp;quot; stories, we are starting to imagine what the &lt;a href&#x3D;&quot;https://rust-lang.github.io/wg-async-foundations/vision/shiny_future.html&quot;&gt;✨ &amp;quot;shiny future&amp;quot; ✨&lt;/a&gt; might look like. &lt;strong&gt;We want your help!&lt;/strong&gt; If you have a great idea for Async Rust&lt;sup class&#x3D;&quot;footnote-ref&quot;&gt;&lt;a href&#x3D;&quot;#fn1&quot; id&#x3D;&quot;fnref1&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;, then &lt;a href&#x3D;&quot;https://rust-lang.github.io/wg-async-foundations/vision/shiny_future/template.html&quot;&gt;take a look at the template and open a PR&lt;/a&gt;! Alternatively, if you have an idea for a story but would like to discuss it before writing, you can &lt;a href&#x3D;&quot;https://github.com/rust-lang/wg-async-foundations/issues/new/choose&quot;&gt;open a &amp;quot;shiny future&amp;quot; issue&lt;/a&gt;. Also, we would still love to get more &lt;a href&#x3D;&quot;https://rust-lang.github.io/wg-async-foundations/vision/status_quo.html&quot;&gt;&amp;quot;status quo&amp;quot; stories&lt;/a&gt;, so please continue to share those.&lt;/p&gt;
&lt;p&gt;When writing &amp;quot;shiny future&amp;quot; stories, the goal is to focus on the &lt;strong&gt;experience&lt;/strong&gt; of Rust&#x27;s users first and foremost, and not so much on the specific technical details. In fact, you don&#x27;t even have to know exactly how the experience will be achieved. We have a few years to figure that out, after all. 🚀&lt;/p&gt;
&lt;p&gt;Every &amp;quot;shiny future&amp;quot; story is a &amp;quot;retelling&amp;quot; of one or more &amp;quot;status quo&amp;quot; stories. The idea is to replay the same scenario but hopefully with a happier ending, as a result of the improvements we&#x27;ve made. If you don&#x27;t see a &amp;quot;status quo&amp;quot; story that is right for telling your &amp;quot;shiny future&amp;quot; story, though, that&#x27;s no problem! Write up your story and we&#x27;ll figure out the &amp;quot;status quo&amp;quot; story it addresses. There is always the option of writing a new &amp;quot;status quo&amp;quot; story, too; we are still requesting &amp;quot;status quo&amp;quot; and &amp;quot;shiny future&amp;quot; stories, and we will do so right up until the end.&lt;/p&gt;
&lt;p&gt;If you&#x27;d like to see what a &amp;quot;shiny future&amp;quot; story looks like, we have merged one example, &lt;a href&#x3D;&quot;https://rust-lang.github.io/wg-async-foundations/vision/shiny_future/barbara_makes_a_wish.html&quot;&gt;Barbara Makes a Wish&lt;/a&gt;. This story describes Barbara&#x27;s experiences using a nifty new tool that gives her lots of information about the state of her async executor. It is a &amp;quot;retelling&amp;quot; of the &amp;quot;status quo&amp;quot; story &lt;a href&#x3D;&quot;https://rust-lang.github.io/wg-async-foundations/vision/status_quo/barbara_wants_async_insights.html&quot;&gt;Barbara Wants Async Insights&lt;/a&gt;.&lt;/p&gt;
&lt;h4&gt;&lt;a href&#x3D;&quot;#what-is-the-async-vision-doc-and-how-does-it-work&quot; aria-hidden&#x3D;&quot;true&quot; class&#x3D;&quot;anchor&quot; id&#x3D;&quot;what-is-the-async-vision-doc-and-how-does-it-work&quot;&gt;&lt;/a&gt;What is the async vision doc and how does it work?&lt;/h4&gt;
&lt;p&gt;Here is the idea in a nutshell:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;We are launching a collaborative effort to build a shared &lt;a href&#x3D;&quot;https://rust-lang.github.io/wg-async-foundations/vision.html#-the-vision&quot;&gt;vision document&lt;/a&gt; for Async Rust. &lt;strong&gt;Our goal is to engage the entire community in a collective act of the imagination:&lt;/strong&gt; how can we make the end-to-end experience of using Async I/O not only a pragmatic choice, but a &lt;em&gt;joyful&lt;/em&gt; one?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;As described in the &lt;a href&#x3D;&quot;https://blog.rust-lang.org/2021/03/18/async-vision-doc.html&quot;&gt;original announcement&lt;/a&gt;, the &lt;a href&#x3D;&quot;https://rust-lang.github.io/wg-async-foundations/vision.html#-the-vision&quot;&gt;vision document&lt;/a&gt; is structured as a series of &amp;quot;status quo&amp;quot; and &amp;quot;shiny future&amp;quot; stories. Each story describes the experiences of one or more of our four &lt;a href&#x3D;&quot;https://rust-lang.github.io/wg-async-foundations/vision/characters.html&quot;&gt;characters&lt;/a&gt; as they go about achieving their goals using Async Rust.&lt;/p&gt;
&lt;p&gt;The &amp;quot;status quo&amp;quot; stories describe the experiences that users have today. They are an amalgamation of the real experiences of people using Async Rust, as reported to us by interviews, blog posts, and tweets. The goal with these stories is to help us understand and gauge the cumulative impact that problems can have on our users.&lt;/p&gt;
&lt;p&gt;The &amp;quot;shiny future&amp;quot; stories describe those some characters achieving those same goals, but looking forward a few years into the future. They are meant to illustrate the experience we are aiming towards, and to give the overall context for the RFCs and other kinds of changes we want to pursue.&lt;/p&gt;
&lt;h3&gt;&lt;a href&#x3D;&quot;#the-brainstorming-period-and-what-comes-next&quot; aria-hidden&#x3D;&quot;true&quot; class&#x3D;&quot;anchor&quot; id&#x3D;&quot;the-brainstorming-period-and-what-comes-next&quot;&gt;&lt;/a&gt;The brainstorming period and what comes next&lt;/h3&gt;
&lt;p&gt;We are currently in the midst of the &lt;a href&#x3D;&quot;https://rust-lang.github.io/wg-async-foundations/vision/how_to_vision.html#brainstorming&quot;&gt;brainstorming period&lt;/a&gt;. This means that we are seeking to collect as many stories -- both about the &amp;quot;status quo&amp;quot; and the &amp;quot;shiny future&amp;quot; -- as we can. The brainstorming period lasts until the end of April. After that, the &lt;a href&#x3D;&quot;https://rust-lang.github.io/wg-async-foundations/#leads&quot;&gt;working group leads&lt;/a&gt; are going to merge the remaining stories and get to work drafting a synthesized vision document that incorporates elements of the various stories that have been submitted.&lt;/p&gt;
&lt;p&gt;Going forward, we plan to revisit the vision document regularly. We fully expect that some aspects of the &amp;quot;shiny future&amp;quot; stories we write are going to be wrong, sometimes very wrong. We will be regularly returning to the vision document to check how things are going and adjust our trajectory appropriately.&lt;/p&gt;
&lt;h3&gt;&lt;a href&#x3D;&quot;#this-sounds-cool-how-can-i-get-involved&quot; aria-hidden&#x3D;&quot;true&quot; class&#x3D;&quot;anchor&quot; id&#x3D;&quot;this-sounds-cool-how-can-i-get-involved&quot;&gt;&lt;/a&gt;This sounds cool, how can I get involved?&lt;/h3&gt;
&lt;p&gt;If you&#x27;d like to help, we&#x27;d love to have you! If you&#x27;ve got an idea for a story, then feel free to create a PR to the wg-async-foundations repository based on one of the following templates:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://rust-lang.github.io/wg-async-foundations/vision/status_quo/template.html&quot;&gt;Template for &amp;quot;status quo&amp;quot; stories&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://rust-lang.github.io/wg-async-foundations/vision/shiny_future/template.html&quot;&gt;Template for &amp;quot;shiny future&amp;quot; stories&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you&#x27;d like a bit more inspiration, then you can join &lt;a href&#x3D;&quot;https://twitter.com/ryan_levick/&quot;&gt;Ryan Levick&lt;/a&gt; and &lt;a href&#x3D;&quot;https://twitter.com/nikomatsakis/&quot;&gt;I&lt;/a&gt; at one of our vision doc writing sessions. We have &lt;a href&#x3D;&quot;https://smallcultfollowing.com/babysteps/blog/2021/04/12/async-vision-doc-writing-sessions-v/&quot;&gt;more sessions scheduled this week&lt;/a&gt; and you can look for announcements from us on twitter or check the &lt;code&gt;#wg-async-foundations&lt;/code&gt; stream on &lt;a href&#x3D;&quot;https://rust-lang.zulipchat.com/&quot;&gt;the rust-lang Zulip&lt;/a&gt;.&lt;/p&gt;
&lt;section class&#x3D;&quot;footnotes&quot;&gt;
&lt;ol&gt;
&lt;li id&#x3D;&quot;fn1&quot;&gt;
&lt;p&gt;Don&#x27;t be modest. You know you do. &lt;a href&#x3D;&quot;#fnref1&quot; class&#x3D;&quot;footnote-backref&quot;&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</content>

        <author>
            <name>Niko Matsakis</name>
        </author>
    </entry>
    
    <entry>
        <title>Announcing Rust 1.51.0</title>
        <link rel="alternate" href="https://blog.rust-lang.org/2021/03/25/Rust-1.51.0.html" type="text/html" title="Announcing Rust 1.51.0" />
        <published>2021-03-25T00:00:00+00:00</published>
        <updated>2021-03-25T00:00:00+00:00</updated>
        <id>https://blog.rust-lang.org/2021/03/25/Rust-1.51.0.html</id>
        <content type="html" xml:base="https://blog.rust-lang.org/2021/03/25/Rust-1.51.0.html">&lt;p&gt;The Rust team is happy to announce a new version of Rust, 1.51.0. Rust is a
programming language that is empowering everyone to build reliable and
efficient software.&lt;/p&gt;
&lt;p&gt;If you have a previous version of Rust installed via rustup, getting Rust
1.51.0 is as easy as:&lt;/p&gt;
&lt;pre&gt;&lt;code class&#x3D;&quot;language-console&quot;&gt;rustup update stable
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If you don&#x27;t have it already, you can &lt;a href&#x3D;&quot;https://www.rust-lang.org/install.html&quot;&gt;get &lt;code&gt;rustup&lt;/code&gt;&lt;/a&gt;
from the appropriate page on our website, and check out the
&lt;a href&#x3D;&quot;https://github.com/rust-lang/rust/blob/master/RELEASES.md#version-1510-2021-03-25&quot;&gt;detailed release notes for 1.51.0&lt;/a&gt; on GitHub.&lt;/p&gt;
&lt;h2&gt;&lt;a href&#x3D;&quot;#whats-in-1510-stable&quot; aria-hidden&#x3D;&quot;true&quot; class&#x3D;&quot;anchor&quot; id&#x3D;&quot;whats-in-1510-stable&quot;&gt;&lt;/a&gt;What&#x27;s in 1.51.0 stable&lt;/h2&gt;
&lt;p&gt;This release represents one of the largest additions to the Rust language and Cargo in quite a while, stabilizing an MVP of const generics and a new feature resolver for Cargo. Let&#x27;s dive right into it!&lt;/p&gt;
&lt;h3&gt;&lt;a href&#x3D;&quot;#const-generics-mvp&quot; aria-hidden&#x3D;&quot;true&quot; class&#x3D;&quot;anchor&quot; id&#x3D;&quot;const-generics-mvp&quot;&gt;&lt;/a&gt;Const Generics MVP&lt;/h3&gt;
&lt;p&gt;Before this release, Rust allowed you to have your types be parameterized over lifetimes or types. For example if we wanted to have a &lt;code&gt;struct&lt;/code&gt; that is generic over the element type of an array, we&#x27;d write the following:&lt;/p&gt;
&lt;pre&gt;&lt;code class&#x3D;&quot;language-rust&quot;&gt;struct FixedArray&amp;lt;T&amp;gt; {
              // ^^^ Type generic definition
    list: [T; 32]
        // ^ Where we&#x27;re using it.
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If we then use &lt;code&gt;FixedArray&amp;lt;u8&amp;gt;&lt;/code&gt;, the compiler will make a monomorphic version of &lt;code&gt;FixedArray&lt;/code&gt; that looks like:&lt;/p&gt;
&lt;pre&gt;&lt;code class&#x3D;&quot;language-rust&quot;&gt;struct FixedArray&amp;lt;u8&amp;gt; {
    list: [u8; 32]
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This is a powerful feature that allows you to write reusable code with no runtime overhead. However, until this release it hasn&#x27;t been possible to easily be generic over the &lt;em&gt;values&lt;/em&gt; of those types. This was most notable in arrays which include their length in their type definition (&lt;code&gt;[T; N]&lt;/code&gt;), which previously you could not be generic over. Now with 1.51.0 you can write code that is generic over the values of any integer, &lt;code&gt;bool&lt;/code&gt;, or &lt;code&gt;char&lt;/code&gt; type! (Using &lt;code&gt;struct&lt;/code&gt; or &lt;code&gt;enum&lt;/code&gt; values is still unstable.)&lt;/p&gt;
&lt;p&gt;This change now lets us have our own array struct that&#x27;s generic over its type &lt;em&gt;and&lt;/em&gt; its length. Let&#x27;s look at an example definition, and how it can be used.&lt;/p&gt;
&lt;pre&gt;&lt;code class&#x3D;&quot;language-rust&quot;&gt;struct Array&amp;lt;T, const LENGTH: usize&amp;gt; {
    //          ^^^^^^^^^^^^^^^^^^^ Const generic definition.
    list: [T; LENGTH]
    //        ^^^^^^ We use it here.
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now if we then used &lt;code&gt;Array&amp;lt;u8, 32&amp;gt;&lt;/code&gt;, the compiler will make a monomorphic version of &lt;code&gt;Array&lt;/code&gt; that looks like:&lt;/p&gt;
&lt;pre&gt;&lt;code class&#x3D;&quot;language-rust&quot;&gt;struct Array&amp;lt;u8, 32&amp;gt; {
    list: [u8; 32]
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Const generics adds an important new tool for library designers in creating new, powerful compile-time safe APIs. If you&#x27;d like to learn more about const generics you can also check out the &lt;a href&#x3D;&quot;https://blog.rust-lang.org/2021/02/26/const-generics-mvp-beta.html&quot;&gt;&amp;quot;Const Generics MVP Hits Beta&amp;quot;&lt;/a&gt; blog post for more information about the feature and its current restrictions. We can&#x27;t wait to see what new libraries and APIs you create!&lt;/p&gt;
&lt;h3&gt;&lt;a href&#x3D;&quot;#arrayintoiter-stabilisation&quot; aria-hidden&#x3D;&quot;true&quot; class&#x3D;&quot;anchor&quot; id&#x3D;&quot;arrayintoiter-stabilisation&quot;&gt;&lt;/a&gt;&lt;code&gt;array::IntoIter&lt;/code&gt; Stabilisation&lt;/h3&gt;
&lt;p&gt;As part of const generics stabilising, we&#x27;re also stabilising a new API that uses it, &lt;code&gt;std::array::IntoIter&lt;/code&gt;. &lt;code&gt;IntoIter&lt;/code&gt; allows you to create a by value iterator over any array. Previously there wasn&#x27;t a convenient way to iterate over owned values of an array, only references to them.&lt;/p&gt;
&lt;pre&gt;&lt;code class&#x3D;&quot;language-rust&quot;&gt;fn main() {
  let array &#x3D; [1, 2, 3, 4, 5];
  
  // Previously
  for item in array.iter().copied() {
      println!(&amp;quot;{}&amp;quot;, item);
  }
  
  // Now
  for item in std::array::IntoIter::new(array) {
      println!(&amp;quot;{}&amp;quot;, item);
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Note that this is added as a separate method instead of &lt;code&gt;.into_iter()&lt;/code&gt; on arrays, as that currently introduces some amount of breakage; currently &lt;code&gt;.into_iter()&lt;/code&gt; refers to the slice by-reference iterator. We&#x27;re exploring ways to make this more ergonomic in the future.&lt;/p&gt;
&lt;h3&gt;&lt;a href&#x3D;&quot;#cargos-new-feature-resolver&quot; aria-hidden&#x3D;&quot;true&quot; class&#x3D;&quot;anchor&quot; id&#x3D;&quot;cargos-new-feature-resolver&quot;&gt;&lt;/a&gt;Cargo&#x27;s New Feature Resolver&lt;/h3&gt;
&lt;p&gt;Dependency management is a hard problem, and one of the hardest parts of it is just picking what &lt;em&gt;version&lt;/em&gt; of a dependency to use when it&#x27;s depended on by two different packages. This doesn&#x27;t just include its version number, but also what features are or aren&#x27;t enabled for the package. Cargo&#x27;s default behaviour is to merge features for a single package when it&#x27;s referred to multiple times in the dependency graph.&lt;/p&gt;
&lt;p&gt;For example, let&#x27;s say you had a dependency called &lt;code&gt;foo&lt;/code&gt; with features A and B, which was being used by packages &lt;code&gt;bar&lt;/code&gt; and &lt;code&gt;baz&lt;/code&gt;, but &lt;code&gt;bar&lt;/code&gt; depends on &lt;code&gt;foo+A&lt;/code&gt; and &lt;code&gt;baz&lt;/code&gt; depends on &lt;code&gt;foo+B&lt;/code&gt;. Cargo will merge both of those features and compile &lt;code&gt;foo&lt;/code&gt; as &lt;code&gt;foo+AB&lt;/code&gt;. This has a benefit that you only have to compile &lt;code&gt;foo&lt;/code&gt; once, and then it can be reused for both &lt;code&gt;bar&lt;/code&gt; and &lt;code&gt;baz&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;However, this also comes with a downside. What if a feature enabled in a build-dependency is not compatible with the target you are building for?&lt;/p&gt;
&lt;p&gt;A common example of this in the ecosystem is the optional &lt;code&gt;std&lt;/code&gt; feature included in many &lt;code&gt;#![no_std]&lt;/code&gt; crates, that allows crates to provide added functionality when &lt;code&gt;std&lt;/code&gt; is available. Now imagine you want to use the &lt;code&gt;#![no_std]&lt;/code&gt; version of &lt;code&gt;foo&lt;/code&gt; in your &lt;code&gt;#![no_std]&lt;/code&gt; binary, and use the &lt;code&gt;foo&lt;/code&gt; at build time in your &lt;code&gt;build.rs&lt;/code&gt;. If your build time dependency depends on &lt;code&gt;foo+std&lt;/code&gt;, your binary now also depends on &lt;code&gt;foo+std&lt;/code&gt;, which means it will no longer compile because &lt;code&gt;std&lt;/code&gt; is not available for your target platform.&lt;/p&gt;
&lt;p&gt;This has been a long-standing issue in cargo, and with this release there&#x27;s a new &lt;code&gt;resolver&lt;/code&gt; option in your &lt;code&gt;Cargo.toml&lt;/code&gt;, where you can set &lt;code&gt;resolver&#x3D;&amp;quot;2&amp;quot;&lt;/code&gt; to tell cargo to try a new approach to resolving features. You can check out &lt;a href&#x3D;&quot;https://rust-lang.github.io/rfcs/2957-cargo-features2.html&quot;&gt;RFC 2957&lt;/a&gt; for a detailed description of the behaviour, which can be summarised as follows.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Dev dependencies&lt;/strong&gt; — When a package is shared as a normal dependency and a dev-dependency, the dev-dependency features are only enabled if the current build is including dev-dependencies.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Host Dependencies&lt;/strong&gt; — When a package is shared as a normal dependency and a build-dependency or proc-macro, the features for the normal dependency are kept independent of the build-dependency or proc-macro.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Target dependencies&lt;/strong&gt; — When a package appears multiple times in the build graph, and one of those instances is a target-specific dependency, then the features of the target-specific dependency are only enabled if the target is currently being built.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;While this can lead to some crates compiling more than once, this should provide a much more intuitive development experience when using features with cargo. If you&#x27;d like to know more, you can also read the &lt;a href&#x3D;&quot;https://doc.rust-lang.org/nightly/cargo/reference/features.html#feature-resolver-version-2&quot;&gt;&amp;quot;Feature Resolver&amp;quot;&lt;/a&gt; section in the Cargo Book for more information. We&#x27;d like to thank the cargo team and everyone involved for all their hard work in designing and implementing the new resolver!&lt;/p&gt;
&lt;pre&gt;&lt;code class&#x3D;&quot;language-toml&quot;&gt;[package]
resolver &#x3D; &amp;quot;2&amp;quot;
# Or if you&#x27;re using a workspace
[workspace]
resolver &#x3D; &amp;quot;2&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;&lt;a href&#x3D;&quot;#splitting-debug-information&quot; aria-hidden&#x3D;&quot;true&quot; class&#x3D;&quot;anchor&quot; id&#x3D;&quot;splitting-debug-information&quot;&gt;&lt;/a&gt;Splitting Debug Information&lt;/h3&gt;
&lt;p&gt;While not often highlighted in the release, the Rust teams are constantly working on improving Rust&#x27;s compile times, and this release marks one of the largest improvements in a long time for Rust on macOS. Debug information maps the binary code back to your source code, so that the program can give you more information about what went wrong at runtime. In macOS, debug info was previously collected into a single &lt;code&gt;.dSYM&lt;/code&gt; folder using a tool called &lt;code&gt;dsymutil&lt;/code&gt;, which can take some time and use up quite a bit of disk space.&lt;/p&gt;
&lt;p&gt;Collecting all of the debuginfo into this directory helps in finding it at runtime, particularly if the binary is being moved. However, it does have the drawback that even when you make a small change to your program, &lt;code&gt;dsymutil&lt;/code&gt; will need to run over the entire final binary to produce the final &lt;code&gt;.dSYM&lt;/code&gt; folder. This can sometimes add a lot to the build time, especially for larger projects, as all dependencies always get recollected, but this has been a necessary step as without it Rust&#x27;s standard library didn&#x27;t know how to load the debug info on macOS.&lt;/p&gt;
&lt;p&gt;Recently, Rust backtraces switched to using a different backend which supports loading debuginfo without needing to run &lt;code&gt;dsymutil&lt;/code&gt;, and we&#x27;ve stabilized support for skipping the &lt;code&gt;dsymutil&lt;/code&gt; run. This can significantly speed up builds that include debuginfo and significantly reduce the amount of disk space used. We haven&#x27;t run extensive benchmarks, but have seen a lot of reports of people&#x27;s builds being a lot faster on macOS with this behavior.&lt;/p&gt;
&lt;p&gt;You can enable this new behaviour by setting the &lt;code&gt;-Csplit-debuginfo&#x3D;unpacked&lt;/code&gt; flag when running &lt;code&gt;rustc&lt;/code&gt;, or by setting the &lt;a href&#x3D;&quot;https://doc.rust-lang.org/nightly/cargo/reference/profiles.html#split-debuginfo&quot;&gt;&lt;code&gt;split-debuginfo&lt;/code&gt;&lt;/a&gt; &lt;code&gt;[profile]&lt;/code&gt; option to &lt;code&gt;unpacked&lt;/code&gt; in Cargo. The &amp;quot;unpacked&amp;quot; option instructs rustc to leave the .o object files in the build output directory instead of deleting them, and skips the step of running dsymutil. Rust&#x27;s backtrace support is smart enough to know how to find these .o files. Tools such as lldb also know how to do this. This should work as long as you don&#x27;t need to move the binary to a different location while retaining the debug information.&lt;/p&gt;
&lt;pre&gt;&lt;code class&#x3D;&quot;language-toml&quot;&gt;[profile.dev]
split-debuginfo &#x3D; &amp;quot;unpacked&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;&lt;a href&#x3D;&quot;#stabilized-apis&quot; aria-hidden&#x3D;&quot;true&quot; class&#x3D;&quot;anchor&quot; id&#x3D;&quot;stabilized-apis&quot;&gt;&lt;/a&gt;Stabilized APIs&lt;/h3&gt;
&lt;p&gt;In total, this release saw the stabilisation of 18 new methods for various types like &lt;code&gt;slice&lt;/code&gt; and &lt;code&gt;Peekable&lt;/code&gt;. One notable addition is the stabilisation of &lt;code&gt;ptr::addr_of!&lt;/code&gt; and &lt;code&gt;ptr::addr_of_mut!&lt;/code&gt;, which allow you to create raw pointers to unaligned fields. Previously this wasn&#x27;t possible because Rust requires &lt;code&gt;&amp;amp;/&amp;amp;mut&lt;/code&gt; to be aligned and point to initialized data, and &lt;code&gt;&amp;amp;addr as *const _&lt;/code&gt; would then cause undefined behaviour as &lt;code&gt;&amp;amp;addr&lt;/code&gt; needs to be aligned. These two macros now let you safely create unaligned pointers.&lt;/p&gt;
&lt;pre&gt;&lt;code class&#x3D;&quot;language-rust&quot;&gt;use std::ptr;

#[repr(packed)]
struct Packed {
    f1: u8,
    f2: u16,
}

let packed &#x3D; Packed { f1: 1, f2: 2 };
// &#x60;&amp;amp;packed.f2&#x60; would create an unaligned reference, and thus be Undefined Behavior!
let raw_f2 &#x3D; ptr::addr_of!(packed.f2);
assert_eq!(unsafe { raw_f2.read_unaligned() }, 2);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The following methods were stabilised.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://doc.rust-lang.org/stable/std/sync/struct.Arc.html#method.decrement_strong_count&quot;&gt;&lt;code&gt;Arc::decrement_strong_count&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://doc.rust-lang.org/stable/std/sync/struct.Arc.html#method.increment_strong_count&quot;&gt;&lt;code&gt;Arc::increment_strong_count&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://doc.rust-lang.org/stable/std/sync/struct.Once.html#method.call_once_force&quot;&gt;&lt;code&gt;Once::call_once_force&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://doc.rust-lang.org/stable/std/iter/struct.Peekable.html#method.next_if_eq&quot;&gt;&lt;code&gt;Peekable::next_if_eq&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://doc.rust-lang.org/stable/std/iter/struct.Peekable.html#method.next_if&quot;&gt;&lt;code&gt;Peekable::next_if&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://doc.rust-lang.org/stable/std/io/trait.Seek.html#method.stream_position&quot;&gt;&lt;code&gt;Seek::stream_position&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://doc.rust-lang.org/stable/std/array/struct.IntoIter.html&quot;&gt;&lt;code&gt;array::IntoIter&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://doc.rust-lang.org/stable/std/panic/fn.panic_any.html&quot;&gt;&lt;code&gt;panic::panic_any&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://doc.rust-lang.org/stable/std/ptr/macro.addr_of.html&quot;&gt;&lt;code&gt;ptr::addr_of!&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://doc.rust-lang.org/stable/std/ptr/macro.addr_of_mut.html&quot;&gt;&lt;code&gt;ptr::addr_of_mut!&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://doc.rust-lang.org/stable/std/primitive.slice.html#method.fill_with&quot;&gt;&lt;code&gt;slice::fill_with&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://doc.rust-lang.org/stable/std/primitive.slice.html#method.split_inclusive_mut&quot;&gt;&lt;code&gt;slice::split_inclusive_mut&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://doc.rust-lang.org/stable/std/primitive.slice.html#method.split_inclusive&quot;&gt;&lt;code&gt;slice::split_inclusive&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://doc.rust-lang.org/stable/std/primitive.slice.html#method.strip_prefix&quot;&gt;&lt;code&gt;slice::strip_prefix&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://doc.rust-lang.org/stable/std/primitive.slice.html#method.strip_suffix&quot;&gt;&lt;code&gt;slice::strip_suffix&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://doc.rust-lang.org/stable/std/primitive.str.html#method.split_inclusive&quot;&gt;&lt;code&gt;str::split_inclusive&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://doc.rust-lang.org/stable/std/sync/struct.OnceState.html&quot;&gt;&lt;code&gt;sync::OnceState&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://doc.rust-lang.org/stable/std/task/trait.Wake.html&quot;&gt;&lt;code&gt;task::Wake&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a href&#x3D;&quot;#other-changes&quot; aria-hidden&#x3D;&quot;true&quot; class&#x3D;&quot;anchor&quot; id&#x3D;&quot;other-changes&quot;&gt;&lt;/a&gt;Other changes&lt;/h3&gt;
&lt;p&gt;There are other changes in the Rust 1.51.0 release: check out what changed in &lt;a href&#x3D;&quot;https://github.com/rust-lang/rust/blob/master/RELEASES.md#version-1510-2021-03-25&quot;&gt;Rust&lt;/a&gt;, &lt;a href&#x3D;&quot;https://github.com/rust-lang/cargo/blob/master/CHANGELOG.md#cargo-151-2021-03-25&quot;&gt;Cargo&lt;/a&gt;, and &lt;a href&#x3D;&quot;https://github.com/rust-lang/rust-clippy/blob/master/CHANGELOG.md#rust-151&quot;&gt;Clippy&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;&lt;a href&#x3D;&quot;#contributors-to-1510&quot; aria-hidden&#x3D;&quot;true&quot; class&#x3D;&quot;anchor&quot; id&#x3D;&quot;contributors-to-1510&quot;&gt;&lt;/a&gt;Contributors to 1.51.0&lt;/h3&gt;
&lt;p&gt;Many people came together to create Rust 1.51.0. We couldn&#x27;t have done it without all of you. &lt;a href&#x3D;&quot;https://thanks.rust-lang.org/rust/1.51.0/&quot;&gt;Thanks!&lt;/a&gt;&lt;/p&gt;
</content>

        <author>
            <name>The Rust Release Team</name>
        </author>
    </entry>
    
    <entry>
        <title>Building a shared vision for Async Rust</title>
        <link rel="alternate" href="https://blog.rust-lang.org/2021/03/18/async-vision-doc.html" type="text/html" title="Building a shared vision for Async Rust" />
        <published>2021-03-18T00:00:00+00:00</published>
        <updated>2021-03-18T00:00:00+00:00</updated>
        <id>https://blog.rust-lang.org/2021/03/18/async-vision-doc.html</id>
        <content type="html" xml:base="https://blog.rust-lang.org/2021/03/18/async-vision-doc.html">&lt;p&gt;The &lt;a href&#x3D;&quot;https://rust-lang.github.io/wg-async-foundations/&quot;&gt;Async Foundations Working Group&lt;/a&gt; believes Rust can become one of the most popular choices for building distributed systems, ranging from embedded devices to foundational cloud services. Whatever they&#x27;re using it for, we want all developers to love using Async Rust. For that to happen, we need to move Async Rust beyond the &amp;quot;MVP&amp;quot; state it&#x27;s in today and make it accessible to everyone.&lt;/p&gt;
&lt;p&gt;We are launching a collaborative effort to build a shared &lt;a href&#x3D;&quot;https://rust-lang.github.io/wg-async-foundations/vision.html#-the-vision&quot;&gt;vision document&lt;/a&gt; for Async Rust. &lt;strong&gt;Our goal is to engage the entire community in a collective act of the imagination:&lt;/strong&gt; how can we make the end-to-end experience of using Async I/O not only a pragmatic choice, but a &lt;em&gt;joyful&lt;/em&gt; one?&lt;/p&gt;
&lt;h3&gt;&lt;a href&#x3D;&quot;#the-vision-document-starts-with-the-status-quo&quot; aria-hidden&#x3D;&quot;true&quot; class&#x3D;&quot;anchor&quot; id&#x3D;&quot;the-vision-document-starts-with-the-status-quo&quot;&gt;&lt;/a&gt;The vision document starts with the status quo...&lt;/h3&gt;
&lt;p&gt;The &amp;quot;vision document&amp;quot; starts with a &lt;a href&#x3D;&quot;https://rust-lang.github.io/wg-async-foundations/vision/characters.html&quot;&gt;cast of characters&lt;/a&gt;. Each character is tied to a particular Rust value (e.g., performance, productivity, etc) determined by their background; this background also informs the expectations they bring when using Rust.&lt;/p&gt;
&lt;p&gt;Let me introduce you to one character, &lt;a href&#x3D;&quot;https://rust-lang.github.io/wg-async-foundations/vision/characters/grace.html&quot;&gt;Grace&lt;/a&gt;. As an experienced C developer, Grace is used to high performance and control, but she likes the idea of using Rust to get memory safety. Here is her biography:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Grace has been writing C and C++ for a number of years. She&#x27;s accustomed to hacking lots of low-level details to coax the most performance she can from her code. She&#x27;s also experienced her share of epic debugging sessions resulting from memory errors in C. She&#x27;s intrigued by Rust: she likes the idea of getting the same control and performance she gets from C but with the productivity benefits she gets from memory safety. She&#x27;s currently experimenting with introducing Rust into some of the systems she works on, and she&#x27;s considering Rust for a few greenfield projects as well.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;For each character, we will write a series of &lt;a href&#x3D;&quot;https://rust-lang.github.io/wg-async-foundations/vision/status_quo.html&quot;&gt;&amp;quot;status quo&amp;quot; stories&lt;/a&gt; that describe the challenges they face as they try to achieve their goals (and typically fail in dramatic fashion!) &lt;strong&gt;These stories are not fiction.&lt;/strong&gt; They are an amalgamation of the real experiences of people using Async Rust, as reported to us by interviews, blog posts, and tweets. To give you the idea, we currently have two examples: one where &lt;a href&#x3D;&quot;https://rust-lang.github.io/wg-async-foundations/vision/status_quo/grace_deploys_her_service.html&quot;&gt;Grace has to debug a custom future that she wrote&lt;/a&gt;, and another where &lt;a href&#x3D;&quot;https://rust-lang.github.io/wg-async-foundations/vision/characters/alan.html&quot;&gt;Alan&lt;/a&gt; -- a programmer coming from a GC&#x27;d language -- &lt;a href&#x3D;&quot;https://rust-lang.github.io/wg-async-foundations/vision/status_quo/alan_runs_into_stack_trouble.html&quot;&gt;encounters a stack overflow and has to debug the cause&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Writing the &amp;quot;status quo&amp;quot; stories helps us to compensate for the &lt;a href&#x3D;&quot;https://en.wikipedia.org/wiki/Curse_of_knowledge&quot;&gt;curse of knowledge&lt;/a&gt;: the folks working on Async Rust tend to be experts in Async Rust. We&#x27;ve gotten used to the &lt;a href&#x3D;&quot;https://github.com/rust-lang/async-book/tree/a927107bfe501a44dde1560a5942b1471c11c71d/src/07_workarounds&quot;&gt;workarounds&lt;/a&gt; required to be productive, and we know the little tips and tricks that can get you out of a jam. The stories help us gauge the cumulative impact all the paper cuts can have on someone still learning their way around. This gives us the data we need to prioritize.&lt;/p&gt;
&lt;h3&gt;&lt;a href&#x3D;&quot;#and-then-tells-how-we-will-change-it&quot; aria-hidden&#x3D;&quot;true&quot; class&#x3D;&quot;anchor&quot; id&#x3D;&quot;and-then-tells-how-we-will-change-it&quot;&gt;&lt;/a&gt;...and then tells how we will change it&lt;/h3&gt;
&lt;p&gt;The ultimate goal of the vision doc, of course, is not just to tell us where we are now, but where we are going and how  we will get there. Once we&#x27;ve made good progress on the status quo stories, the next step will be start brainstorming stories about the &lt;a href&#x3D;&quot;https://rust-lang.github.io/wg-async-foundations/vision/shiny_future.html&quot;&gt;&amp;quot;shiny future&amp;quot;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Shiny future stories talk about what the world of async could look like 2 or 3 years in the future. Typically, they will replay the same scenario as a &amp;quot;status quo&amp;quot; story, but with a happier ending. For example, maybe Grace has access to a debugging tool that is able to diagnose her stuck tasks and tell her what kind of future they are blocked on, so she doesn&#x27;t have to grep through the logs. Maybe the compiler could warn Alan about a likely stack overflow, or (better yet) we can tweak the design of &lt;code&gt;select&lt;/code&gt; to avoid the problem in the first place. The idea is to be ambitious and focus first and foremost on the user experience we want to create; we&#x27;ll figure out the steps along the way (and maybe adjust the goal, if we have to).&lt;/p&gt;
&lt;h3&gt;&lt;a href&#x3D;&quot;#involving-the-whole-community&quot; aria-hidden&#x3D;&quot;true&quot; class&#x3D;&quot;anchor&quot; id&#x3D;&quot;involving-the-whole-community&quot;&gt;&lt;/a&gt;Involving the whole community&lt;/h3&gt;
&lt;p&gt;The async vision document provides a forum where the Async Rust community can plan a great overall experience for Async Rust users. Async Rust was intentionally designed not to have a &amp;quot;one size fits all&amp;quot; mindset, and we don&#x27;t want to change that. Our goal is to build a shared vision for the end-to-end experience while retaining the loosely coupled, exploration-oriented ecosystem we have built.&lt;/p&gt;
&lt;p&gt;The process we are using to write the vision doc encourages active collaboration and &amp;quot;positive sum&amp;quot; thinking. It starts with a brainstorming period, during which we aim to collect as many &amp;quot;status quo&amp;quot; and &amp;quot;shiny future&amp;quot; stories as we can. This brainstorming period runs for six weeks, until the end of April. For the first two weeks (until 2021-04-02), we are collecting &amp;quot;status quo&amp;quot; stories only. After that, we will accept both &amp;quot;status quo&amp;quot; and &amp;quot;shiny future&amp;quot; stories until the end of the brainstorming period. Finally, to cap off the brainstorming period, we will select winners for &lt;a href&#x3D;&quot;https://rust-lang.github.io/wg-async-foundations/vision/how_to_vision/awards.html&quot;&gt;awards&lt;/a&gt; like &amp;quot;Most Humorous Story&amp;quot; or &amp;quot;Must Supportive Contributor&amp;quot;.&lt;/p&gt;
&lt;p&gt;Once the brainstorming period is complete, the working group leads will begin work on assembling the various stories and shiny futures into a coherent draft. This draft will be reviewed by the community and the Rust teams and adjusted based on feedback.&lt;/p&gt;
&lt;h3&gt;&lt;a href&#x3D;&quot;#want-to-help&quot; aria-hidden&#x3D;&quot;true&quot; class&#x3D;&quot;anchor&quot; id&#x3D;&quot;want-to-help&quot;&gt;&lt;/a&gt;Want to help?&lt;/h3&gt;
&lt;p&gt;If you&#x27;d like to help us to write the vision document, we&#x27;d love for you to contribute your experiences and vision! Right now, we are focused on creating status quo stories. We are looking for people to author PRs or to talk about their experiences on issues or elsewhere. If you&#x27;d like to get started, check out the &lt;a href&#x3D;&quot;https://rust-lang.github.io/wg-async-foundations/vision/status_quo/template.html&quot;&gt;template for status quo stories&lt;/a&gt; -- it has all the information you need to open a PR. Alternatively, you can view the &lt;a href&#x3D;&quot;https://rust-lang.github.io/wg-async-foundations/vision/how_to_vision.html&quot;&gt;How To Vision&lt;/a&gt; page, which covers the whole vision document process in detail.&lt;/p&gt;
</content>

        <author>
            <name>Niko Matsakis</name>
        </author>
    </entry>
    
    <entry>
        <title>Const generics MVP hits beta!</title>
        <link rel="alternate" href="https://blog.rust-lang.org/2021/02/26/const-generics-mvp-beta.html" type="text/html" title="Const generics MVP hits beta!" />
        <published>2021-02-26T00:00:00+00:00</published>
        <updated>2021-02-26T00:00:00+00:00</updated>
        <id>https://blog.rust-lang.org/2021/02/26/const-generics-mvp-beta.html</id>
        <content type="html" xml:base="https://blog.rust-lang.org/2021/02/26/const-generics-mvp-beta.html">&lt;p&gt;After more than 3 years since the &lt;a href&#x3D;&quot;https://github.com/rust-lang/rfcs/blob/master/text/2000-const-generics.md&quot;&gt;original RFC for const generics&lt;/a&gt; was accepted, &lt;strong&gt;the first version of const generics is now available in the Rust beta channel!&lt;/strong&gt; It will be available in the 1.51 release, which is expected to be released on &lt;strong&gt;March 25th, 2021&lt;/strong&gt;. Const generics is one of the &lt;a href&#x3D;&quot;https://blog.rust-lang.org/2020/12/16/rust-survey-2020.html&quot;&gt;most highly anticipated&lt;/a&gt; features coming to Rust, and we&#x27;re excited for people to start taking advantage of the increased power of the language following this addition.&lt;/p&gt;
&lt;p&gt;Even if you don&#x27;t know what const generics are (in which case, read on!), you&#x27;ve likely been benefitting from them: const generics are already employed in the Rust standard library to improve the ergonomics of arrays and diagnostics; more on that below.&lt;/p&gt;
&lt;p&gt;With const generics hitting beta, let&#x27;s take a quick look over what&#x27;s actually being stabilized, what this means practically, and what&#x27;s next.&lt;/p&gt;
&lt;h2&gt;&lt;a href&#x3D;&quot;#what-are-const-generics&quot; aria-hidden&#x3D;&quot;true&quot; class&#x3D;&quot;anchor&quot; id&#x3D;&quot;what-are-const-generics&quot;&gt;&lt;/a&gt;What are const generics?&lt;/h2&gt;
&lt;p&gt;Const generics are generic arguments that range over constant values, rather than types or lifetimes. This allows, for instance, types to be parameterized by integers. In fact, there has been one example of const generic types since early on in Rust&#x27;s development: the array types &lt;code&gt;[T; N]&lt;/code&gt;, for some type &lt;code&gt;T&lt;/code&gt; and &lt;code&gt;N: usize&lt;/code&gt;. However, there has previously been no way to abstract over arrays of an arbitrary size: if you wanted to implement a trait for arrays of any size, you would have to do so manually for each possible value. For a long time, even the standard library methods for arrays were limited to arrays of length at most 32 due to this problem. This restriction was &lt;a href&#x3D;&quot;https://blog.rust-lang.org/2020/10/08/Rust-1.47.html#traits-on-larger-arrays&quot;&gt;finally lifted in Rust 1.47&lt;/a&gt; - a change that was made possible by const generics.&lt;/p&gt;
&lt;p&gt;Here&#x27;s an example of a type and implementation making use of const generics: a type wrapping a pair of arrays of the same size.&lt;/p&gt;
&lt;pre&gt;&lt;code class&#x3D;&quot;language-rust&quot;&gt;struct ArrayPair&amp;lt;T, const N: usize&amp;gt; {
    left: [T; N],
    right: [T; N],
}

impl&amp;lt;T: Debug, const N: usize&amp;gt; Debug for ArrayPair&amp;lt;T, N&amp;gt; {
    // ...
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;&lt;a href&#x3D;&quot;#current-restrictions&quot; aria-hidden&#x3D;&quot;true&quot; class&#x3D;&quot;anchor&quot; id&#x3D;&quot;current-restrictions&quot;&gt;&lt;/a&gt;Current restrictions&lt;/h3&gt;
&lt;p&gt;The first iteration of const generics has been deliberately constrained: in other words, this version is the MVP (minimal viable product) for const generics. This decision is motivated both by the additional complexity of general const generics (the implementation for general const generics is not yet complete, but we feel const generics in 1.51 are already very useful), as well as by the desire to introduce a large feature gradually, to gain experience with any potential shortcomings and difficulties. We intend to lift these in future versions of Rust: see &lt;a href&#x3D;&quot;#whats-next&quot;&gt;what&#x27;s next&lt;/a&gt;.&lt;/p&gt;
&lt;h4&gt;&lt;a href&#x3D;&quot;#only-integral-types-are-permitted-for-const-generics&quot; aria-hidden&#x3D;&quot;true&quot; class&#x3D;&quot;anchor&quot; id&#x3D;&quot;only-integral-types-are-permitted-for-const-generics&quot;&gt;&lt;/a&gt;Only integral types are permitted for const generics&lt;/h4&gt;
&lt;p&gt;For now, the only types that may be used as the type of a const generic argument are the types of integers (i.e. signed and unsigned integers, including &lt;code&gt;isize&lt;/code&gt; and &lt;code&gt;usize&lt;/code&gt;) as well as &lt;code&gt;char&lt;/code&gt; and &lt;code&gt;bool&lt;/code&gt;. This covers a primary use case of const, namely abstracting over arrays. In the future, this restriction will be lifted to allow more complex types, such as &lt;code&gt;&amp;amp;str&lt;/code&gt; and user-defined types.&lt;/p&gt;
&lt;h4&gt;&lt;a href&#x3D;&quot;#no-complex-generic-expressions-in-const-arguments&quot; aria-hidden&#x3D;&quot;true&quot; class&#x3D;&quot;anchor&quot; id&#x3D;&quot;no-complex-generic-expressions-in-const-arguments&quot;&gt;&lt;/a&gt;No complex generic expressions in const arguments&lt;/h4&gt;
&lt;p&gt;Currently, const parameters may only be instantiated by const arguments of the following forms:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A standalone const parameter.&lt;/li&gt;
&lt;li&gt;A literal (i.e. an integer, bool, or character).&lt;/li&gt;
&lt;li&gt;A concrete constant expression (enclosed by &lt;code&gt;{}&lt;/code&gt;), involving no generic parameters.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For example:&lt;/p&gt;
&lt;pre&gt;&lt;code class&#x3D;&quot;language-rust&quot;&gt;fn foo&amp;lt;const N: usize&amp;gt;() {}

fn bar&amp;lt;T, const M: usize&amp;gt;() {
    foo::&amp;lt;M&amp;gt;(); // ok: &#x60;M&#x60; is a const parameter
    foo::&amp;lt;2021&amp;gt;(); // ok: &#x60;2021&#x60; is a literal
    foo::&amp;lt;{20 * 100 + 20 * 10 + 1}&amp;gt;(); // ok: const expression contains no generic parameters
    
    foo::&amp;lt;{ M + 1 }&amp;gt;(); // error: const expression contains the generic parameter &#x60;M&#x60;
    foo::&amp;lt;{ std::mem::size_of::&amp;lt;T&amp;gt;() }&amp;gt;(); // error: const expression contains the generic parameter &#x60;T&#x60;
    
    let _: [u8; M]; // ok: &#x60;M&#x60; is a const parameter
    let _: [u8; std::mem::size_of::&amp;lt;T&amp;gt;()]; // error: const expression contains the generic parameter &#x60;T&#x60;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;&lt;a href&#x3D;&quot;#by-value-array-iterator&quot; aria-hidden&#x3D;&quot;true&quot; class&#x3D;&quot;anchor&quot; id&#x3D;&quot;by-value-array-iterator&quot;&gt;&lt;/a&gt;By-value array iterator&lt;/h2&gt;
&lt;p&gt;In addition to the language changes described above, we&#x27;ve also started adding methods to the standard library taking advantage of const generics. While most are not yet ready for stabilization in this version, there is one method that has been stabilized. &lt;a href&#x3D;&quot;https://doc.rust-lang.org/nightly/std/array/struct.IntoIter.html&quot;&gt;&lt;code&gt;array::IntoIter&lt;/code&gt;&lt;/a&gt; allows arrays to be iterated by value, rather than by reference, addressing a significant shortcoming. There is ongoing discussion about the possibility of implementing &lt;code&gt;IntoIterator&lt;/code&gt; directly for arrays, though there are &lt;a href&#x3D;&quot;https://github.com/rust-lang/rust/pull/65819&quot;&gt;backwards-compatibility concerns&lt;/a&gt; that still have to be addressed. &lt;code&gt;IntoIter::new&lt;/code&gt; acts as an interim solution that makes working with arrays significantly simpler.&lt;/p&gt;
&lt;pre&gt;&lt;code class&#x3D;&quot;language-rust&quot;&gt;use std::array;
fn needs_vec(v: Vec&amp;lt;i32&amp;gt;) {
    // ...
}

let arr &#x3D; [vec![0, 1], vec![1, 2, 3], vec![3]];
for elem in array::IntoIter::new(arr) {
    needs_vec(elem);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;&lt;a href&#x3D;&quot;#whats-next&quot; aria-hidden&#x3D;&quot;true&quot; class&#x3D;&quot;anchor&quot; id&#x3D;&quot;whats-next&quot;&gt;&lt;/a&gt;What&#x27;s next?&lt;/h2&gt;
&lt;h3&gt;&lt;a href&#x3D;&quot;#const-generics-and-default-arguments&quot; aria-hidden&#x3D;&quot;true&quot; class&#x3D;&quot;anchor&quot; id&#x3D;&quot;const-generics-and-default-arguments&quot;&gt;&lt;/a&gt;Const generics and default arguments&lt;/h3&gt;
&lt;p&gt;Generic parameters must currently come in a specific order: lifetimes, types, consts. However, this causes difficulties when one attempts to use default arguments alongside const parameters. For the compiler to know which generic argument is which, any default arguments need to be placed last. These two constraints - &amp;quot;types come before consts&amp;quot;, and &amp;quot;defaults come last&amp;quot; - conflict with each other for definitions that have default type arguments &lt;em&gt;and&lt;/em&gt; const parameters.&lt;/p&gt;
&lt;p&gt;The solution to this is to relax the ordering constraint so that const parameters may precede type arguments. However, there turn out to be subtleties involved in implementing this change, because the Rust compiler currently makes assumptions about parameter ordering that require some delicacy to remove.&lt;/p&gt;
&lt;p&gt;In light of similar design questions around defaults for const arguments, these are also currently not supported in version 1.51. However, fixing the parameter ordering issues above will also unblock const defaults.&lt;/p&gt;
&lt;h3&gt;&lt;a href&#x3D;&quot;#const-generics-for-custom-types&quot; aria-hidden&#x3D;&quot;true&quot; class&#x3D;&quot;anchor&quot; id&#x3D;&quot;const-generics-for-custom-types&quot;&gt;&lt;/a&gt;Const generics for custom types&lt;/h3&gt;
&lt;p&gt;For a type to be valid, in theory, as the type of a const parameter, we must be able to compare values of that type at compile-time. Furthermore, equality of values should be well-behaved (namely, it should be deterministic, reflexive, symmetric, and transitive). To guarantee these properties, the concept of &lt;em&gt;structural equality&lt;/em&gt; was introduced in the &lt;a href&#x3D;&quot;https://github.com/rust-lang/rfcs/blob/master/text/2000-const-generics.md&quot;&gt;const generics RFC&lt;/a&gt;: essentially this includes any type with &lt;code&gt;#[derive(PartialEq, Eq)]&lt;/code&gt; whose members also satisfy structural equality.&lt;/p&gt;
&lt;p&gt;There are &lt;a href&#x3D;&quot;https://github.com/rust-lang/rust/issues/74446&quot;&gt;still some questions&lt;/a&gt; concerning precisely how structural equality should behave, and &lt;a href&#x3D;&quot;https://github.com/rust-lang/compiler-team/issues/323&quot;&gt;prerequisites for implementation&lt;/a&gt;. Primitive types are significantly simpler, which has allowed us to stabilize const generics for these types before more general types.&lt;/p&gt;
&lt;h3&gt;&lt;a href&#x3D;&quot;#const-generics-with-complex-expressions&quot; aria-hidden&#x3D;&quot;true&quot; class&#x3D;&quot;anchor&quot; id&#x3D;&quot;const-generics-with-complex-expressions&quot;&gt;&lt;/a&gt;Const generics with complex expressions&lt;/h3&gt;
&lt;p&gt;There are several complexities involved in supporting complex expressions. A feature flag, &lt;code&gt;feature(const_evaluatable_checked)&lt;/code&gt;, is available in the Nightly channel, which enables a version of complex expression support for const generics.&lt;/p&gt;
&lt;p&gt;One difficulty lies in the necessity of having some way to compare unevaluated constants, as the compiler does not automatically know that two syntactically identical expressions are actually equal. This involves a kind of symbolic reasoning about expressions, which is a complex problem in general.&lt;/p&gt;
&lt;pre&gt;&lt;code class&#x3D;&quot;language-rust&quot;&gt;// The two expressions &#x60;N + 1&#x60; and &#x60;N + 1&#x60; are distinct
// entities in the compiler, so we need a way to check
// if they should be considered equal.
fn foo&amp;lt;const N: usize&amp;gt;() -&amp;gt; [u8; N + 1] {
    [0; N + 1]
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We also want a way to deal with potential errors when evaluating generic operations.&lt;/p&gt;
&lt;pre&gt;&lt;code class&#x3D;&quot;language-rust&quot;&gt;fn split_first&amp;lt;T, const N: usize&amp;gt;(arr: [T; N]) -&amp;gt; (T, [T; N - 1]) {
    // ...
}

fn generic_function&amp;lt;const M: usize&amp;gt;(arr: [i32; M]) {
    // ...
    let (head, tail) &#x3D; split_first(arr);
    // ...
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Without a way to restrict the possible values of &lt;code&gt;M&lt;/code&gt; here, calling &lt;code&gt;generic_function::&amp;lt;0&amp;gt;()&lt;/code&gt; would cause an error when evaluating &lt;code&gt;0 - 1&lt;/code&gt; that is not caught at declaration time and so may unexpectedly fail for downstream users.&lt;/p&gt;
&lt;p&gt;There are &lt;a href&#x3D;&quot;https://github.com/rust-lang/rust/issues/68436&quot;&gt;design questions&lt;/a&gt; about how exactly to express these kinds of bounds, which need to be addressed before stabilising complex const arguments.&lt;/p&gt;
&lt;h2&gt;&lt;a href&#x3D;&quot;#summary&quot; aria-hidden&#x3D;&quot;true&quot; class&#x3D;&quot;anchor&quot; id&#x3D;&quot;summary&quot;&gt;&lt;/a&gt;Summary&lt;/h2&gt;
&lt;p&gt;With such a major new feature, there are likely to be a few rough edges. If you encounter any problems, even if it&#x27;s as minor as a confusing error message, &lt;a href&#x3D;&quot;https://github.com/rust-lang/rust/issues/new/choose&quot;&gt;please open an issue&lt;/a&gt;! We want the user experience to be the best it can possibly be - and any issues now are likely to be even more important for the next iterations of const generics.&lt;/p&gt;
</content>

        <author>
            <name>The const generics project group</name>
        </author>
    </entry>
    
    <entry>
        <title>Announcing Rust 1.50.0</title>
        <link rel="alternate" href="https://blog.rust-lang.org/2021/02/11/Rust-1.50.0.html" type="text/html" title="Announcing Rust 1.50.0" />
        <published>2021-02-11T00:00:00+00:00</published>
        <updated>2021-02-11T00:00:00+00:00</updated>
        <id>https://blog.rust-lang.org/2021/02/11/Rust-1.50.0.html</id>
        <content type="html" xml:base="https://blog.rust-lang.org/2021/02/11/Rust-1.50.0.html">&lt;p&gt;The Rust team is happy to announce a new version of Rust, 1.50.0. Rust is a
programming language that is empowering everyone to build reliable and
efficient software.&lt;/p&gt;
&lt;p&gt;If you have a previous version of Rust installed via rustup, getting Rust
1.50.0 is as easy as:&lt;/p&gt;
&lt;pre&gt;&lt;code class&#x3D;&quot;language-console&quot;&gt;rustup update stable
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If you don&#x27;t have it already, you can &lt;a href&#x3D;&quot;https://www.rust-lang.org/install.html&quot;&gt;get &lt;code&gt;rustup&lt;/code&gt;&lt;/a&gt;
from the appropriate page on our website, and check out the
&lt;a href&#x3D;&quot;https://github.com/rust-lang/rust/blob/master/RELEASES.md#version-1500-2021-02-11&quot;&gt;detailed release notes for 1.50.0&lt;/a&gt; on GitHub.&lt;/p&gt;
&lt;h2&gt;&lt;a href&#x3D;&quot;#whats-in-1500-stable&quot; aria-hidden&#x3D;&quot;true&quot; class&#x3D;&quot;anchor&quot; id&#x3D;&quot;whats-in-1500-stable&quot;&gt;&lt;/a&gt;What&#x27;s in 1.50.0 stable&lt;/h2&gt;
&lt;p&gt;For this release, we have improved array indexing, expanded safe access to union fields, and added to the standard library.
See the &lt;a href&#x3D;&quot;https://github.com/rust-lang/rust/blob/master/RELEASES.md#version-1500-2021-02-11&quot;&gt;detailed release notes&lt;/a&gt; to learn about other changes
not covered by this post.&lt;/p&gt;
&lt;h3&gt;&lt;a href&#x3D;&quot;#const-generic-array-indexing&quot; aria-hidden&#x3D;&quot;true&quot; class&#x3D;&quot;anchor&quot; id&#x3D;&quot;const-generic-array-indexing&quot;&gt;&lt;/a&gt;Const-generic array indexing&lt;/h3&gt;
&lt;p&gt;Continuing the march toward stable &lt;code&gt;const&lt;/code&gt; generics, this release adds
implementations of &lt;code&gt;ops::Index&lt;/code&gt; and &lt;code&gt;IndexMut&lt;/code&gt; for arrays &lt;code&gt;[T; N]&lt;/code&gt; for
&lt;em&gt;any&lt;/em&gt; length of &lt;code&gt;const N&lt;/code&gt;. The indexing operator &lt;code&gt;[]&lt;/code&gt; already worked on
arrays through built-in compiler magic, but at the type level, arrays
didn&#x27;t actually implement the library traits until now.&lt;/p&gt;
&lt;pre&gt;&lt;code class&#x3D;&quot;language-rust&quot;&gt;fn second&amp;lt;C&amp;gt;(container: &amp;amp;C) -&amp;gt; &amp;amp;C::Output
where
    C: std::ops::Index&amp;lt;usize&amp;gt; + ?Sized,
{
    &amp;amp;container[1]
}

fn main() {
    let array: [i32; 3] &#x3D; [1, 2, 3];
    assert_eq!(second(&amp;amp;array[..]), &amp;amp;2); // slices worked before
    assert_eq!(second(&amp;amp;array), &amp;amp;2); // now it also works directly
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;&lt;a href&#x3D;&quot;#const-value-repetition-for-arrays&quot; aria-hidden&#x3D;&quot;true&quot; class&#x3D;&quot;anchor&quot; id&#x3D;&quot;const-value-repetition-for-arrays&quot;&gt;&lt;/a&gt;&lt;code&gt;const&lt;/code&gt; value repetition for arrays&lt;/h3&gt;
&lt;p&gt;Arrays in Rust can be written either as a list &lt;code&gt;[a, b, c]&lt;/code&gt; or a repetition &lt;code&gt;[x; N]&lt;/code&gt;.
For lengths &lt;code&gt;N&lt;/code&gt; greater than one, repetition has only been allowed for &lt;code&gt;x&lt;/code&gt;s that are &lt;code&gt;Copy&lt;/code&gt;,
and &lt;a href&#x3D;&quot;https://rust-lang.github.io/rfcs/2203-const-repeat-expr.html&quot;&gt;RFC 2203&lt;/a&gt; sought to allow any &lt;code&gt;const&lt;/code&gt; expression there. However,
while that feature was unstable for arbitrary expressions, its implementation
since Rust 1.38 accidentally allowed stable use of &lt;code&gt;const&lt;/code&gt; &lt;em&gt;values&lt;/em&gt; in array
repetition.&lt;/p&gt;
&lt;pre&gt;&lt;code class&#x3D;&quot;language-rust&quot;&gt;fn main() {
    // This is not allowed, because &#x60;Option&amp;lt;Vec&amp;lt;i32&amp;gt;&amp;gt;&#x60; does not implement &#x60;Copy&#x60;.
    let array: [Option&amp;lt;Vec&amp;lt;i32&amp;gt;&amp;gt;; 10] &#x3D; [None; 10];

    const NONE: Option&amp;lt;Vec&amp;lt;i32&amp;gt;&amp;gt; &#x3D; None;
    const EMPTY: Option&amp;lt;Vec&amp;lt;i32&amp;gt;&amp;gt; &#x3D; Some(Vec::new());

    // However, repeating a &#x60;const&#x60; value is allowed!
    let nones &#x3D; [NONE; 10];
    let empties &#x3D; [EMPTY; 10];
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In Rust 1.50, that stabilization is formally acknowledged. In the future, to avoid such &amp;quot;temporary&amp;quot; named
constants, you can look forward to inline &lt;code&gt;const&lt;/code&gt; expressions per &lt;a href&#x3D;&quot;https://rust-lang.github.io/rfcs/2920-inline-const.html&quot;&gt;RFC 2920&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;&lt;a href&#x3D;&quot;#safe-assignments-to-manuallydropt-union-fields&quot; aria-hidden&#x3D;&quot;true&quot; class&#x3D;&quot;anchor&quot; id&#x3D;&quot;safe-assignments-to-manuallydropt-union-fields&quot;&gt;&lt;/a&gt;Safe assignments to &lt;code&gt;ManuallyDrop&amp;lt;T&amp;gt;&lt;/code&gt; union fields&lt;/h3&gt;
&lt;p&gt;Rust 1.49 made it possible to add &lt;code&gt;ManuallyDrop&amp;lt;T&amp;gt;&lt;/code&gt; fields to a &lt;code&gt;union&lt;/code&gt; as part
of allowing &lt;code&gt;Drop&lt;/code&gt; for unions at all. However, unions don&#x27;t drop old values
when a field is assigned, since they don&#x27;t know which variant was formerly
valid, so safe Rust previously limited this to &lt;code&gt;Copy&lt;/code&gt; types only, which never &lt;code&gt;Drop&lt;/code&gt;.
Of course, &lt;code&gt;ManuallyDrop&amp;lt;T&amp;gt;&lt;/code&gt; also doesn&#x27;t need to &lt;code&gt;Drop&lt;/code&gt;, so now Rust 1.50
allows safe assignments to these fields as well.&lt;/p&gt;
&lt;h3&gt;&lt;a href&#x3D;&quot;#a-niche-for-file-on-unix-platforms&quot; aria-hidden&#x3D;&quot;true&quot; class&#x3D;&quot;anchor&quot; id&#x3D;&quot;a-niche-for-file-on-unix-platforms&quot;&gt;&lt;/a&gt;A niche for &lt;code&gt;File&lt;/code&gt; on Unix platforms&lt;/h3&gt;
&lt;p&gt;Some types in Rust have specific limitations on what is considered a
valid value, which may not cover the entire range of possible memory
values. We call any remaining invalid value a &lt;a href&#x3D;&quot;https://rust-lang.github.io/unsafe-code-guidelines/glossary.html#niche&quot;&gt;niche&lt;/a&gt;, and this space
may be used for type layout optimizations. For example, in Rust 1.28
we introduced &lt;code&gt;NonZero&lt;/code&gt; integer types (like &lt;code&gt;NonZeroU8&lt;/code&gt;) where &lt;code&gt;0&lt;/code&gt; is a niche, and this allowed
&lt;code&gt;Option&amp;lt;NonZero&amp;gt;&lt;/code&gt; to use &lt;code&gt;0&lt;/code&gt; to represent &lt;code&gt;None&lt;/code&gt; with no extra memory.&lt;/p&gt;
&lt;p&gt;On Unix platforms, Rust&#x27;s &lt;code&gt;File&lt;/code&gt; is simply made of the system&#x27;s integer
file descriptor, and this happens to have a possible niche
as well because it can never be &lt;code&gt;-1&lt;/code&gt;! System calls which return a file
descriptor use &lt;code&gt;-1&lt;/code&gt; to indicate that an error occurred (check &lt;code&gt;errno&lt;/code&gt;)
so it&#x27;s never possible for &lt;code&gt;-1&lt;/code&gt; to be a real file descriptor. Starting
in Rust 1.50 this niche is added to the type&#x27;s definition so it can be
used in layout optimizations too. It follows that &lt;code&gt;Option&amp;lt;File&amp;gt;&lt;/code&gt; will
now have the same size as &lt;code&gt;File&lt;/code&gt; itself!&lt;/p&gt;
&lt;h3&gt;&lt;a href&#x3D;&quot;#library-changes&quot; aria-hidden&#x3D;&quot;true&quot; class&#x3D;&quot;anchor&quot; id&#x3D;&quot;library-changes&quot;&gt;&lt;/a&gt;Library changes&lt;/h3&gt;
&lt;p&gt;In Rust 1.50.0, there are nine new stable functions:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://doc.rust-lang.org/stable/std/primitive.bool.html#method.then&quot;&gt;&lt;code&gt;bool::then&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://doc.rust-lang.org/stable/std/collections/btree_map/enum.Entry.html#method.or_insert_with_key&quot;&gt;&lt;code&gt;btree_map::Entry::or_insert_with_key&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://doc.rust-lang.org/stable/std/primitive.f32.html#method.clamp&quot;&gt;&lt;code&gt;f32::clamp&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://doc.rust-lang.org/stable/std/primitive.f64.html#method.clamp&quot;&gt;&lt;code&gt;f64::clamp&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://doc.rust-lang.org/stable/std/collections/hash_map/enum.Entry.html#method.or_insert_with_key&quot;&gt;&lt;code&gt;hash_map::Entry::or_insert_with_key&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://doc.rust-lang.org/stable/std/cmp/trait.Ord.html#method.clamp&quot;&gt;&lt;code&gt;Ord::clamp&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://doc.rust-lang.org/stable/std/cell/struct.RefCell.html#method.take&quot;&gt;&lt;code&gt;RefCell::take&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://doc.rust-lang.org/stable/std/primitive.slice.html#method.fill&quot;&gt;&lt;code&gt;slice::fill&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://doc.rust-lang.org/stable/std/cell/struct.UnsafeCell.html#method.get_mut&quot;&gt;&lt;code&gt;UnsafeCell::get_mut&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;And quite a few existing functions were made &lt;code&gt;const&lt;/code&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://doc.rust-lang.org/stable/std/net/enum.IpAddr.html#method.is_ipv4&quot;&gt;&lt;code&gt;IpAddr::is_ipv4&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://doc.rust-lang.org/stable/std/net/enum.IpAddr.html#method.is_ipv6&quot;&gt;&lt;code&gt;IpAddr::is_ipv6&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://doc.rust-lang.org/stable/std/alloc/struct.Layout.html#method.size&quot;&gt;&lt;code&gt;Layout::size&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://doc.rust-lang.org/stable/std/alloc/struct.Layout.html#method.align&quot;&gt;&lt;code&gt;Layout::align&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://doc.rust-lang.org/stable/std/alloc/struct.Layout.html#method.from_size_align&quot;&gt;&lt;code&gt;Layout::from_size_align&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pow&lt;/code&gt; for all integer types.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;checked_pow&lt;/code&gt; for all integer types.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;saturating_pow&lt;/code&gt; for all integer types.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;wrapping_pow&lt;/code&gt; for all integer types.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;next_power_of_two&lt;/code&gt; for all unsigned integer types.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;checked_power_of_two&lt;/code&gt; for all unsigned integer types.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;See the &lt;a href&#x3D;&quot;https://github.com/rust-lang/rust/blob/master/RELEASES.md#version-1500-2021-02-11&quot;&gt;detailed release notes&lt;/a&gt; to learn about other changes.&lt;/p&gt;
&lt;h3&gt;&lt;a href&#x3D;&quot;#other-changes&quot; aria-hidden&#x3D;&quot;true&quot; class&#x3D;&quot;anchor&quot; id&#x3D;&quot;other-changes&quot;&gt;&lt;/a&gt;Other changes&lt;/h3&gt;
&lt;p&gt;There are other changes in the Rust 1.50.0 release: check out what changed in
&lt;a href&#x3D;&quot;https://github.com/rust-lang/rust/blob/master/RELEASES.md#version-1500-2021-02-11&quot;&gt;Rust&lt;/a&gt;, &lt;a href&#x3D;&quot;https://github.com/rust-lang/cargo/blob/master/CHANGELOG.md#cargo-150-2021-02-11&quot;&gt;Cargo&lt;/a&gt;, and &lt;a href&#x3D;&quot;https://github.com/rust-lang/rust-clippy/blob/master/CHANGELOG.md#rust-150&quot;&gt;Clippy&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;&lt;a href&#x3D;&quot;#contributors-to-1500&quot; aria-hidden&#x3D;&quot;true&quot; class&#x3D;&quot;anchor&quot; id&#x3D;&quot;contributors-to-1500&quot;&gt;&lt;/a&gt;Contributors to 1.50.0&lt;/h2&gt;
&lt;p&gt;Many people came together to create Rust 1.50.0. We couldn&#x27;t have done it
without all of you. &lt;a href&#x3D;&quot;https://thanks.rust-lang.org/rust/1.50.0/&quot;&gt;Thanks!&lt;/a&gt;&lt;/p&gt;
</content>

        <author>
            <name>The Rust Release Team</name>
        </author>
    </entry>
    
    <entry>
        <title>mdBook security advisory</title>
        <link rel="alternate" href="https://blog.rust-lang.org/2021/01/04/mdbook-security-advisory.html" type="text/html" title="mdBook security advisory" />
        <published>2021-01-04T00:00:00+00:00</published>
        <updated>2021-01-04T00:00:00+00:00</updated>
        <id>https://blog.rust-lang.org/2021/01/04/mdbook-security-advisory.html</id>
        <content type="html" xml:base="https://blog.rust-lang.org/2021/01/04/mdbook-security-advisory.html">&lt;blockquote&gt;
&lt;p&gt;This is a cross-post of &lt;a href&#x3D;&quot;https://groups.google.com/g/rustlang-security-announcements/c/3-sO6of29O0&quot;&gt;the official security advisory&lt;/a&gt;. The official post
contains a signed version with our PGP key, as well.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The Rust Security Response Working Group was recently notified of a security
issue affecting the search feature of mdBook, which could allow an attacker to
execute arbitrary JavaScript code on the page.&lt;/p&gt;
&lt;p&gt;The CVE for this vulnerability is &lt;a href&#x3D;&quot;https://cve.mitre.org/cgi-bin/cvename.cgi?name&#x3D;CVE-2020-26297&quot;&gt;CVE-2020-26297&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;&lt;a href&#x3D;&quot;#overview&quot; aria-hidden&#x3D;&quot;true&quot; class&#x3D;&quot;anchor&quot; id&#x3D;&quot;overview&quot;&gt;&lt;/a&gt;Overview&lt;/h2&gt;
&lt;p&gt;The search feature of mdBook (introduced in version 0.1.4) was affected by a
cross site scripting vulnerability that allowed an attacker to execute
arbitrary JavaScript code on an user&#x27;s browser by tricking the user into typing
a malicious search query, or tricking the user into clicking a link to the
search page with the malicious search query prefilled.&lt;/p&gt;
&lt;p&gt;mdBook 0.4.5 fixes the vulnerability by properly escaping the search query.&lt;/p&gt;
&lt;h2&gt;&lt;a href&#x3D;&quot;#mitigations&quot; aria-hidden&#x3D;&quot;true&quot; class&#x3D;&quot;anchor&quot; id&#x3D;&quot;mitigations&quot;&gt;&lt;/a&gt;Mitigations&lt;/h2&gt;
&lt;p&gt;Owners of websites built with mdBook have to upgrade to mdBook 0.4.5 or greater
and rebuild their website contents with it. It&#x27;s possible to install mdBook
0.4.5 on the local system with:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cargo install mdbook --version 0.4.5 --force
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;&lt;a href&#x3D;&quot;#acknowledgements&quot; aria-hidden&#x3D;&quot;true&quot; class&#x3D;&quot;anchor&quot; id&#x3D;&quot;acknowledgements&quot;&gt;&lt;/a&gt;Acknowledgements&lt;/h2&gt;
&lt;p&gt;Thanks to Kamil Vavra for responsibly disclosing the vulnerability to us
according to &lt;a href&#x3D;&quot;https://www.rust-lang.org/policies/security&quot;&gt;our security policy&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;&lt;a href&#x3D;&quot;#timeline-of-events&quot; aria-hidden&#x3D;&quot;true&quot; class&#x3D;&quot;anchor&quot; id&#x3D;&quot;timeline-of-events&quot;&gt;&lt;/a&gt;Timeline of events&lt;/h2&gt;
&lt;p&gt;All times are listed in UTC.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;2020-12-30 20:14 - The issue is reported to the Rust Security Response WG&lt;/li&gt;
&lt;li&gt;2020-12-30 20:32 - The issue is acknowledged and the investigation began&lt;/li&gt;
&lt;li&gt;2020-12-30 21:21 - Found the cause of the vulnerability and prepared the patch&lt;/li&gt;
&lt;li&gt;2021-01-04 15:00 - Patched version released and vulnerability disclosed&lt;/li&gt;
&lt;/ul&gt;
</content>

        <author>
            <name>Rust Security Response WG</name>
        </author>
    </entry>
    
</feed>
